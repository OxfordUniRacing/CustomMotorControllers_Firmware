
4YP_Software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000067c8  00400000  00400000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001d0  20400000  004067c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000110  204001d0  00406998  000201d0  2**2
                  ALLOC
  3 .heap         00000200  204002e0  00406aa8  000201d0  2**0
                  ALLOC
  4 .stack        00000400  204004e0  00406ca8  000201d0  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000201fe  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001e3c2  00000000  00000000  00020257  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003fa9  00000000  00000000  0003e619  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00008eb4  00000000  00000000  000425c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000b08  00000000  00000000  0004b476  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000950  00000000  00000000  0004bf7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00044909  00000000  00000000  0004c8ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000191c2  00000000  00000000  000911d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0015355e  00000000  00000000  000aa399  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002a88  00000000  00000000  001fd8f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	e0 08 40 20 b9 04 40 00 b5 04 40 00 b5 04 40 00     ..@ ..@...@...@.
  400010:	b5 04 40 00 b5 04 40 00 b5 04 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	b5 04 40 00 b5 04 40 00 00 00 00 00 b5 04 40 00     ..@...@.......@.
  40003c:	b5 04 40 00 b5 04 40 00 b5 04 40 00 b5 04 40 00     ..@...@...@...@.
  40004c:	b5 04 40 00 b5 04 40 00 b5 04 40 00 b5 04 40 00     ..@...@...@...@.
  40005c:	b5 04 40 00 b5 04 40 00 00 00 00 00 19 12 40 00     ..@...@.......@.
  40006c:	b5 04 40 00 b5 04 40 00 b5 04 40 00 b5 04 40 00     ..@...@...@...@.
  40007c:	b5 04 40 00 0d 12 40 00 b5 04 40 00 b5 04 40 00     ..@...@...@...@.
  40008c:	b5 04 40 00 b5 04 40 00 b5 04 40 00 b5 04 40 00     ..@...@...@...@.
  40009c:	b5 04 40 00 b5 04 40 00 b5 04 40 00 b5 04 40 00     ..@...@...@...@.
  4000ac:	b5 04 40 00 b5 04 40 00 b5 04 40 00 b5 04 40 00     ..@...@...@...@.
  4000bc:	65 13 40 00 b5 04 40 00 b5 04 40 00 b5 04 40 00     e.@...@...@...@.
  4000cc:	b5 04 40 00 b5 04 40 00 dd 0f 40 00 b5 04 40 00     ..@...@...@...@.
  4000dc:	b5 04 40 00 b5 04 40 00 b5 04 40 00 b5 04 40 00     ..@...@...@...@.
  4000ec:	b5 04 40 00 b5 04 40 00 b5 04 40 00 b5 04 40 00     ..@...@...@...@.
  4000fc:	b5 04 40 00 b5 04 40 00 b5 04 40 00 b5 04 40 00     ..@...@...@...@.
  40010c:	b5 04 40 00 b5 04 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 b5 04 40 00 b5 04 40 00 b5 04 40 00     ......@...@...@.
  40012c:	b5 04 40 00 79 13 40 00 b5 04 40 00 b5 04 40 00     ..@.y.@...@...@.
  40013c:	b5 04 40 00 b5 04 40 00 b5 04 40 00 b5 04 40 00     ..@...@...@...@.
  40014c:	b5 04 40 00 b5 04 40 00 b5 04 40 00 b5 04 40 00     ..@...@...@...@.
  40015c:	b5 04 40 00 b5 04 40 00 b5 04 40 00                 ..@...@...@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	204001d0 	.word	0x204001d0
  400184:	00000000 	.word	0x00000000
  400188:	004067c8 	.word	0x004067c8

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	004067c8 	.word	0x004067c8
  4001c8:	204001d4 	.word	0x204001d4
  4001cc:	004067c8 	.word	0x004067c8
  4001d0:	00000000 	.word	0x00000000

004001d4 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
  4001d4:	b508      	push	{r3, lr}
	system_init();
  4001d6:	4b02      	ldr	r3, [pc, #8]	; (4001e0 <atmel_start_init+0xc>)
  4001d8:	4798      	blx	r3
	stdio_redirect_init();
  4001da:	4b02      	ldr	r3, [pc, #8]	; (4001e4 <atmel_start_init+0x10>)
  4001dc:	4798      	blx	r3
  4001de:	bd08      	pop	{r3, pc}
  4001e0:	00400819 	.word	0x00400819
  4001e4:	00401955 	.word	0x00401955

004001e8 <adc_enable_all>:
const uint16_t length);
*/


//enables/disables all AFECs
void adc_enable_all(void){
  4001e8:	b570      	push	{r4, r5, r6, lr}
	//note that it is possible to enable individual channels
	//functions from hal_adc_sync.h
	adc_sync_enable_channel(ADC_CURRENT_A);
  4001ea:	4d11      	ldr	r5, [pc, #68]	; (400230 <adc_enable_all+0x48>)
  4001ec:	2108      	movs	r1, #8
  4001ee:	4628      	mov	r0, r5
  4001f0:	4c10      	ldr	r4, [pc, #64]	; (400234 <adc_enable_all+0x4c>)
  4001f2:	47a0      	blx	r4
	adc_sync_enable_channel(ADC_CURRENT_B);
  4001f4:	2102      	movs	r1, #2
  4001f6:	4628      	mov	r0, r5
  4001f8:	47a0      	blx	r4
	adc_sync_enable_channel(ADC_CURRENT_C);
  4001fa:	4e0f      	ldr	r6, [pc, #60]	; (400238 <adc_enable_all+0x50>)
  4001fc:	2101      	movs	r1, #1
  4001fe:	4630      	mov	r0, r6
  400200:	47a0      	blx	r4
	
	adc_sync_enable_channel(ADC_SUPPL_VOLTAGE);
  400202:	2106      	movs	r1, #6
  400204:	4630      	mov	r0, r6
  400206:	47a0      	blx	r4
	
	adc_sync_enable_channel(ADC_TEMP_1);
  400208:	2105      	movs	r1, #5
  40020a:	4630      	mov	r0, r6
  40020c:	47a0      	blx	r4
	adc_sync_enable_channel(ADC_TEMP_2);
  40020e:	2106      	movs	r1, #6
  400210:	4628      	mov	r0, r5
  400212:	47a0      	blx	r4
	//adc_sync_enable_channel(ADC_TEMP_3);
	adc_sync_enable_channel(ADC_TEMP_4);
  400214:	210a      	movs	r1, #10
  400216:	4628      	mov	r0, r5
  400218:	47a0      	blx	r4
	adc_sync_enable_channel(ADC_TEMP_5);
  40021a:	2100      	movs	r1, #0
  40021c:	4630      	mov	r0, r6
  40021e:	47a0      	blx	r4
	adc_sync_enable_channel(ADC_TEMP_6);
  400220:	2105      	movs	r1, #5
  400222:	4628      	mov	r0, r5
  400224:	47a0      	blx	r4
	adc_sync_enable_channel(ADC_TEMP_MOTOR);
  400226:	2100      	movs	r1, #0
  400228:	4628      	mov	r0, r5
  40022a:	47a0      	blx	r4
  40022c:	bd70      	pop	{r4, r5, r6, pc}
  40022e:	bf00      	nop
  400230:	204002b8 	.word	0x204002b8
  400234:	00400949 	.word	0x00400949
  400238:	204002d8 	.word	0x204002d8

0040023c <adc_read>:
	adc_sync_disable_channel(ADC_TEMP_6);
	adc_sync_disable_channel(ADC_TEMP_MOTOR);
}

//reads ADC value
uint16_t adc_read(struct adc_sync_descriptor *const descr, const uint8_t channel){
  40023c:	b510      	push	{r4, lr}
  40023e:	b082      	sub	sp, #8
	
	uint16_t temp;
	
	adc_sync_read_channel(descr, channel, (uint8_t *)&temp, 2);
  400240:	2302      	movs	r3, #2
  400242:	f10d 0206 	add.w	r2, sp, #6
  400246:	4c03      	ldr	r4, [pc, #12]	; (400254 <adc_read+0x18>)
  400248:	47a0      	blx	r4
	
	return temp;
}
  40024a:	f8bd 0006 	ldrh.w	r0, [sp, #6]
  40024e:	b002      	add	sp, #8
  400250:	bd10      	pop	{r4, pc}
  400252:	bf00      	nop
  400254:	00400975 	.word	0x00400975

00400258 <pwm_enable_all>:



//enable/disable pwm pins
//also sets periods and other variables which might not have been set at initialization
void pwm_enable_all(void){
  400258:	b570      	push	{r4, r5, r6, lr}
	//note it's possible to individual channels, but not through these functions
	//functions from hal_pwm.h
	
	//enable PWM0 and PWM1
	pwm_enable(&PWM_0);
  40025a:	4c0a      	ldr	r4, [pc, #40]	; (400284 <pwm_enable_all+0x2c>)
  40025c:	4620      	mov	r0, r4
  40025e:	4e0a      	ldr	r6, [pc, #40]	; (400288 <pwm_enable_all+0x30>)
  400260:	47b0      	blx	r6
	pwm_enable(&PWM_1);
  400262:	4d0a      	ldr	r5, [pc, #40]	; (40028c <pwm_enable_all+0x34>)
  400264:	4628      	mov	r0, r5
  400266:	47b0      	blx	r6
		
	//set period and initial duty cycle
	//initial duty cycle = 0.5 * period <=> no current output for an H-bridge type driver
	pwm_set_parameters(&PWM_0, PWM_PERIOD, PWM_PERIOD>>1);
  400268:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  40026c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  400270:	4620      	mov	r0, r4
  400272:	4c07      	ldr	r4, [pc, #28]	; (400290 <pwm_enable_all+0x38>)
  400274:	47a0      	blx	r4
	pwm_set_parameters(&PWM_1  , PWM_PERIOD, PWM_PERIOD>>1);
  400276:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  40027a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  40027e:	4628      	mov	r0, r5
  400280:	47a0      	blx	r4
  400282:	bd70      	pop	{r4, r5, r6, pc}
  400284:	20400268 	.word	0x20400268
  400288:	00400bb5 	.word	0x00400bb5
  40028c:	204002bc 	.word	0x204002bc
  400290:	00400bf1 	.word	0x00400bf1

00400294 <pwm_set_duty>:
	//ASSERT(device && (duty_cycle < period));

	//cfg = _pwm_get_cfg(device->hw);

	//for (i = 0; i < cfg->ch_num; i++) {										//not needed; we are altering one channel at a time
	hri_pwm_write_CDTYUPD_reg(descr->device.hw, channel, duty_cycle);
  400294:	6903      	ldr	r3, [r0, #16]
}

static inline void hri_pwm_write_CDTYUPD_reg(const void *const hw, uint8_t submodule_index, hri_pwm_cdtyupd_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CDTYUPD = data;
  400296:	eb03 1141 	add.w	r1, r3, r1, lsl #5
  40029a:	f8c1 2208 	str.w	r2, [r1, #520]	; 0x208
  40029e:	4770      	bx	lr

004002a0 <pwm_deadtime_init>:
	tmp = ((PwmChNum *)hw)->PWM_DT;
  4002a0:	490b      	ldr	r1, [pc, #44]	; (4002d0 <pwm_deadtime_init+0x30>)
  4002a2:	698a      	ldr	r2, [r1, #24]
	tmp &= ~PWM_DT_DTH_Msk;
  4002a4:	480b      	ldr	r0, [pc, #44]	; (4002d4 <pwm_deadtime_init+0x34>)
  4002a6:	4002      	ands	r2, r0
	tmp |= PWM_DT_DTH(data);
  4002a8:	f042 0203 	orr.w	r2, r2, #3
	((PwmChNum *)hw)->PWM_DT = tmp;
  4002ac:	618a      	str	r2, [r1, #24]
	tmp = ((PwmChNum *)hw)->PWM_DT;
  4002ae:	698a      	ldr	r2, [r1, #24]
	tmp &= ~PWM_DT_DTL_Msk;
  4002b0:	b292      	uxth	r2, r2
	tmp |= PWM_DT_DTL(data);
  4002b2:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
	((PwmChNum *)hw)->PWM_DT = tmp;
  4002b6:	618a      	str	r2, [r1, #24]
	tmp = ((PwmChNum *)hw)->PWM_DT;
  4002b8:	4a07      	ldr	r2, [pc, #28]	; (4002d8 <pwm_deadtime_init+0x38>)
  4002ba:	6993      	ldr	r3, [r2, #24]
	tmp &= ~PWM_DT_DTH_Msk;
  4002bc:	4003      	ands	r3, r0
	tmp |= PWM_DT_DTH(data);
  4002be:	f043 0303 	orr.w	r3, r3, #3
	((PwmChNum *)hw)->PWM_DT = tmp;
  4002c2:	6193      	str	r3, [r2, #24]
	tmp = ((PwmChNum *)hw)->PWM_DT;
  4002c4:	6993      	ldr	r3, [r2, #24]
	tmp &= ~PWM_DT_DTL_Msk;
  4002c6:	b29b      	uxth	r3, r3
	tmp |= PWM_DT_DTL(data);
  4002c8:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
	((PwmChNum *)hw)->PWM_DT = tmp;
  4002cc:	6193      	str	r3, [r2, #24]
  4002ce:	4770      	bx	lr
  4002d0:	40020000 	.word	0x40020000
  4002d4:	ffff0000 	.word	0xffff0000
  4002d8:	4005c000 	.word	0x4005c000

004002dc <Current_Voltage_Inital_Test>:
	printf("Temp Motor = %i  \n",temp_test_data[6]);
	
	
}

void Current_Voltage_Inital_Test (void){
  4002dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	//Get Current Sensor and High Voltage reading and display values
	
	int current_test_data [3];
	
	current_test_data [0] = adc_read(ADC_CURRENT_A);
  4002e0:	4d10      	ldr	r5, [pc, #64]	; (400324 <Current_Voltage_Inital_Test+0x48>)
  4002e2:	2108      	movs	r1, #8
  4002e4:	4628      	mov	r0, r5
  4002e6:	4c10      	ldr	r4, [pc, #64]	; (400328 <Current_Voltage_Inital_Test+0x4c>)
  4002e8:	47a0      	blx	r4
  4002ea:	4606      	mov	r6, r0
	current_test_data [1] = adc_read(ADC_CURRENT_B);
  4002ec:	2102      	movs	r1, #2
  4002ee:	4628      	mov	r0, r5
  4002f0:	47a0      	blx	r4
  4002f2:	4607      	mov	r7, r0
	current_test_data [2] = adc_read(ADC_CURRENT_C);
  4002f4:	4d0d      	ldr	r5, [pc, #52]	; (40032c <Current_Voltage_Inital_Test+0x50>)
  4002f6:	2101      	movs	r1, #1
  4002f8:	4628      	mov	r0, r5
  4002fa:	47a0      	blx	r4
  4002fc:	4680      	mov	r8, r0
	
	int voltage_test_data;
	
	voltage_test_data = adc_read(ADC_SUPPL_VOLTAGE);
  4002fe:	2106      	movs	r1, #6
  400300:	4628      	mov	r0, r5
  400302:	47a0      	blx	r4
  400304:	4605      	mov	r5, r0
	
	printf("\n Current and Voltage Testing -----------------\n");
  400306:	480a      	ldr	r0, [pc, #40]	; (400330 <Current_Voltage_Inital_Test+0x54>)
  400308:	4c0a      	ldr	r4, [pc, #40]	; (400334 <Current_Voltage_Inital_Test+0x58>)
  40030a:	47a0      	blx	r4
	printf("Raw Data \n");
  40030c:	480a      	ldr	r0, [pc, #40]	; (400338 <Current_Voltage_Inital_Test+0x5c>)
  40030e:	47a0      	blx	r4
	printf("CurrA = %i \t\t CurrB = %i \t\t CurrC = %i \n",current_test_data[0], current_test_data[1], current_test_data[2]);
  400310:	4643      	mov	r3, r8
  400312:	463a      	mov	r2, r7
  400314:	4631      	mov	r1, r6
  400316:	4809      	ldr	r0, [pc, #36]	; (40033c <Current_Voltage_Inital_Test+0x60>)
  400318:	47a0      	blx	r4
	printf("Supply Voltage = %i  \n",voltage_test_data);
  40031a:	4629      	mov	r1, r5
  40031c:	4808      	ldr	r0, [pc, #32]	; (400340 <Current_Voltage_Inital_Test+0x64>)
  40031e:	47a0      	blx	r4
  400320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400324:	204002b8 	.word	0x204002b8
  400328:	0040023d 	.word	0x0040023d
  40032c:	204002d8 	.word	0x204002d8
  400330:	00406010 	.word	0x00406010
  400334:	00403f7d 	.word	0x00403f7d
  400338:	00405f98 	.word	0x00405f98
  40033c:	00406044 	.word	0x00406044
  400340:	00406070 	.word	0x00406070
  400344:	00000000 	.word	0x00000000

00400348 <first_slow_spin>:
}

void first_slow_spin (void){
  400348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40034c:	ed2d 8b06 	vpush	{d8-d10}
	float omega = 94.25;    //Gives electrical frequency of 15Hz (one spin of the rotor every second)
	float T = 0;
  400350:	eddf 8a45 	vldr	s17, [pc, #276]	; 400468 <first_slow_spin+0x120>
	float V_supply = 20;
	float V_pp_test = 5;
	while (1)
	{
		float pwm_testing_a, pwm_testing_b, pwm_testing_c;
		pwm_testing_a = 1000 - (sin(omega*T)+1)*500*V_pp_test/V_supply;
  400354:	ed9f 8a45 	vldr	s16, [pc, #276]	; 40046c <first_slow_spin+0x124>
  400358:	ee28 8a88 	vmul.f32	s16, s17, s16
  40035c:	4f44      	ldr	r7, [pc, #272]	; (400470 <first_slow_spin+0x128>)
  40035e:	ee18 0a10 	vmov	r0, s16
  400362:	47b8      	blx	r7
  400364:	f8df a13c 	ldr.w	sl, [pc, #316]	; 4004a4 <first_slow_spin+0x15c>
  400368:	47d0      	blx	sl
  40036a:	4e42      	ldr	r6, [pc, #264]	; (400474 <first_slow_spin+0x12c>)
  40036c:	2200      	movs	r2, #0
  40036e:	4b42      	ldr	r3, [pc, #264]	; (400478 <first_slow_spin+0x130>)
  400370:	47b0      	blx	r6
  400372:	4c42      	ldr	r4, [pc, #264]	; (40047c <first_slow_spin+0x134>)
  400374:	2200      	movs	r2, #0
  400376:	4b42      	ldr	r3, [pc, #264]	; (400480 <first_slow_spin+0x138>)
  400378:	47a0      	blx	r4
  40037a:	2200      	movs	r2, #0
  40037c:	4b41      	ldr	r3, [pc, #260]	; (400484 <first_slow_spin+0x13c>)
  40037e:	47a0      	blx	r4
  400380:	f8df 9124 	ldr.w	r9, [pc, #292]	; 4004a8 <first_slow_spin+0x160>
  400384:	2200      	movs	r2, #0
  400386:	4b40      	ldr	r3, [pc, #256]	; (400488 <first_slow_spin+0x140>)
  400388:	47c8      	blx	r9
  40038a:	f8df 8120 	ldr.w	r8, [pc, #288]	; 4004ac <first_slow_spin+0x164>
  40038e:	4602      	mov	r2, r0
  400390:	460b      	mov	r3, r1
  400392:	2000      	movs	r0, #0
  400394:	493d      	ldr	r1, [pc, #244]	; (40048c <first_slow_spin+0x144>)
  400396:	47c0      	blx	r8
  400398:	4d3d      	ldr	r5, [pc, #244]	; (400490 <first_slow_spin+0x148>)
  40039a:	47a8      	blx	r5
  40039c:	ee0a 0a10 	vmov	s20, r0
		pwm_testing_b = 1000 - (sin(omega*T+PI/3)+1)*500*V_pp_test/V_supply;
  4003a0:	ed9f 9a3c 	vldr	s18, [pc, #240]	; 400494 <first_slow_spin+0x14c>
  4003a4:	ee78 7a09 	vadd.f32	s15, s16, s18
  4003a8:	ee17 0a90 	vmov	r0, s15
  4003ac:	47b8      	blx	r7
  4003ae:	47d0      	blx	sl
  4003b0:	2200      	movs	r2, #0
  4003b2:	4b31      	ldr	r3, [pc, #196]	; (400478 <first_slow_spin+0x130>)
  4003b4:	47b0      	blx	r6
  4003b6:	2200      	movs	r2, #0
  4003b8:	4b31      	ldr	r3, [pc, #196]	; (400480 <first_slow_spin+0x138>)
  4003ba:	47a0      	blx	r4
  4003bc:	2200      	movs	r2, #0
  4003be:	4b31      	ldr	r3, [pc, #196]	; (400484 <first_slow_spin+0x13c>)
  4003c0:	47a0      	blx	r4
  4003c2:	2200      	movs	r2, #0
  4003c4:	4b30      	ldr	r3, [pc, #192]	; (400488 <first_slow_spin+0x140>)
  4003c6:	47c8      	blx	r9
  4003c8:	4602      	mov	r2, r0
  4003ca:	460b      	mov	r3, r1
  4003cc:	2000      	movs	r0, #0
  4003ce:	492f      	ldr	r1, [pc, #188]	; (40048c <first_slow_spin+0x144>)
  4003d0:	47c0      	blx	r8
  4003d2:	47a8      	blx	r5
  4003d4:	ee09 0a90 	vmov	s19, r0
		pwm_testing_c = 1000 - (sin(omega*T-PI/3)+1)*500*V_pp_test/V_supply;
  4003d8:	ee78 7a49 	vsub.f32	s15, s16, s18
  4003dc:	ee17 0a90 	vmov	r0, s15
  4003e0:	47b8      	blx	r7
  4003e2:	47d0      	blx	sl
  4003e4:	2200      	movs	r2, #0
  4003e6:	4b24      	ldr	r3, [pc, #144]	; (400478 <first_slow_spin+0x130>)
  4003e8:	47b0      	blx	r6
  4003ea:	2200      	movs	r2, #0
  4003ec:	4b24      	ldr	r3, [pc, #144]	; (400480 <first_slow_spin+0x138>)
  4003ee:	47a0      	blx	r4
  4003f0:	2200      	movs	r2, #0
  4003f2:	4b24      	ldr	r3, [pc, #144]	; (400484 <first_slow_spin+0x13c>)
  4003f4:	47a0      	blx	r4
  4003f6:	2200      	movs	r2, #0
  4003f8:	4b23      	ldr	r3, [pc, #140]	; (400488 <first_slow_spin+0x140>)
  4003fa:	47c8      	blx	r9
  4003fc:	4602      	mov	r2, r0
  4003fe:	460b      	mov	r3, r1
  400400:	2000      	movs	r0, #0
  400402:	4922      	ldr	r1, [pc, #136]	; (40048c <first_slow_spin+0x144>)
  400404:	47c0      	blx	r8
  400406:	47a8      	blx	r5
  400408:	ee08 0a10 	vmov	s16, r0
		
		pwm_set_duty(PWM_PHASE_A,pwm_testing_a);
  40040c:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 4004b0 <first_slow_spin+0x168>
  400410:	eefc 7aca 	vcvt.u32.f32	s15, s20
  400414:	ee17 2a90 	vmov	r2, s15
  400418:	2100      	movs	r1, #0
  40041a:	4640      	mov	r0, r8
  40041c:	4c1e      	ldr	r4, [pc, #120]	; (400498 <first_slow_spin+0x150>)
  40041e:	47a0      	blx	r4
		pwm_set_duty(PWM_PHASE_B,pwm_testing_b);
  400420:	eefc 7ae9 	vcvt.u32.f32	s15, s19
  400424:	ee17 2a90 	vmov	r2, s15
  400428:	2102      	movs	r1, #2
  40042a:	4640      	mov	r0, r8
  40042c:	47a0      	blx	r4
		pwm_set_duty(PWM_PHASE_C,pwm_testing_c);
  40042e:	eefc 7ac8 	vcvt.u32.f32	s15, s16
  400432:	ee17 2a90 	vmov	r2, s15
  400436:	2100      	movs	r1, #0
  400438:	4818      	ldr	r0, [pc, #96]	; (40049c <first_slow_spin+0x154>)
  40043a:	47a0      	blx	r4
		
		delay_us(333);
  40043c:	f240 104d 	movw	r0, #333	; 0x14d
  400440:	4b17      	ldr	r3, [pc, #92]	; (4004a0 <first_slow_spin+0x158>)
  400442:	4798      	blx	r3
		T = T + 0.000333;			//Updates the duty cycle every switch at 3kHz switching frequency
  400444:	ee18 0a90 	vmov	r0, s17
  400448:	47b8      	blx	r7
  40044a:	a305      	add	r3, pc, #20	; (adr r3, 400460 <first_slow_spin+0x118>)
  40044c:	e9d3 2300 	ldrd	r2, r3, [r3]
  400450:	47b0      	blx	r6
  400452:	47a8      	blx	r5
  400454:	ee08 0a90 	vmov	s17, r0
  400458:	e77c      	b.n	400354 <first_slow_spin+0xc>
  40045a:	bf00      	nop
  40045c:	f3af 8000 	nop.w
  400460:	1c0ca601 	.word	0x1c0ca601
  400464:	3f35d2d0 	.word	0x3f35d2d0
  400468:	00000000 	.word	0x00000000
  40046c:	42bc8000 	.word	0x42bc8000
  400470:	00402f85 	.word	0x00402f85
  400474:	00402cc9 	.word	0x00402cc9
  400478:	3ff00000 	.word	0x3ff00000
  40047c:	0040302d 	.word	0x0040302d
  400480:	407f4000 	.word	0x407f4000
  400484:	40140000 	.word	0x40140000
  400488:	40340000 	.word	0x40340000
  40048c:	408f4000 	.word	0x408f4000
  400490:	004035b1 	.word	0x004035b1
  400494:	3f860a92 	.word	0x3f860a92
  400498:	00400295 	.word	0x00400295
  40049c:	204002bc 	.word	0x204002bc
  4004a0:	00400a45 	.word	0x00400a45
  4004a4:	00401975 	.word	0x00401975
  4004a8:	00403281 	.word	0x00403281
  4004ac:	00402cc5 	.word	0x00402cc5
  4004b0:	20400268 	.word	0x20400268

004004b4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4004b4:	e7fe      	b.n	4004b4 <Dummy_Handler>
	...

004004b8 <Reset_Handler>:
{
  4004b8:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
  4004ba:	4b10      	ldr	r3, [pc, #64]	; (4004fc <Reset_Handler+0x44>)
  4004bc:	4a10      	ldr	r2, [pc, #64]	; (400500 <Reset_Handler+0x48>)
  4004be:	429a      	cmp	r2, r3
  4004c0:	d009      	beq.n	4004d6 <Reset_Handler+0x1e>
  4004c2:	4b0e      	ldr	r3, [pc, #56]	; (4004fc <Reset_Handler+0x44>)
  4004c4:	4a0e      	ldr	r2, [pc, #56]	; (400500 <Reset_Handler+0x48>)
  4004c6:	e003      	b.n	4004d0 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
  4004c8:	6811      	ldr	r1, [r2, #0]
  4004ca:	6019      	str	r1, [r3, #0]
  4004cc:	3304      	adds	r3, #4
  4004ce:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
  4004d0:	490c      	ldr	r1, [pc, #48]	; (400504 <Reset_Handler+0x4c>)
  4004d2:	428b      	cmp	r3, r1
  4004d4:	d3f8      	bcc.n	4004c8 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
  4004d6:	4b0c      	ldr	r3, [pc, #48]	; (400508 <Reset_Handler+0x50>)
  4004d8:	e002      	b.n	4004e0 <Reset_Handler+0x28>
                *pDest++ = 0;
  4004da:	2200      	movs	r2, #0
  4004dc:	601a      	str	r2, [r3, #0]
  4004de:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
  4004e0:	4a0a      	ldr	r2, [pc, #40]	; (40050c <Reset_Handler+0x54>)
  4004e2:	4293      	cmp	r3, r2
  4004e4:	d3f9      	bcc.n	4004da <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4004e6:	4a0a      	ldr	r2, [pc, #40]	; (400510 <Reset_Handler+0x58>)
  4004e8:	4b0a      	ldr	r3, [pc, #40]	; (400514 <Reset_Handler+0x5c>)
  4004ea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4004ee:	6093      	str	r3, [r2, #8]
        __libc_init_array();
  4004f0:	4b09      	ldr	r3, [pc, #36]	; (400518 <Reset_Handler+0x60>)
  4004f2:	4798      	blx	r3
        main();
  4004f4:	4b09      	ldr	r3, [pc, #36]	; (40051c <Reset_Handler+0x64>)
  4004f6:	4798      	blx	r3
  4004f8:	e7fe      	b.n	4004f8 <Reset_Handler+0x40>
  4004fa:	bf00      	nop
  4004fc:	20400000 	.word	0x20400000
  400500:	004067c8 	.word	0x004067c8
  400504:	204001d0 	.word	0x204001d0
  400508:	204001d0 	.word	0x204001d0
  40050c:	204002e0 	.word	0x204002e0
  400510:	e000ed00 	.word	0xe000ed00
  400514:	00400000 	.word	0x00400000
  400518:	00403651 	.word	0x00403651
  40051c:	00401849 	.word	0x00401849

00400520 <ADC_0_PORT_init>:
	((Pio *)hw)->PIO_PDR = PIO_PSR_P31;
}

static inline void hri_pio_set_PSR_reg(const void *const hw, hri_pio_psr_reg_t mask)
{
	((Pio *)hw)->PIO_PER = mask;
  400520:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400524:	4b08      	ldr	r3, [pc, #32]	; (400548 <ADC_0_PORT_init+0x28>)
  400526:	601a      	str	r2, [r3, #0]
  400528:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  40052c:	2208      	movs	r2, #8
  40052e:	601a      	str	r2, [r3, #0]
  400530:	2204      	movs	r2, #4
  400532:	601a      	str	r2, [r3, #0]
  400534:	4a05      	ldr	r2, [pc, #20]	; (40054c <ADC_0_PORT_init+0x2c>)
  400536:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  40053a:	6011      	str	r1, [r2, #0]
  40053c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  400540:	6011      	str	r1, [r2, #0]
  400542:	2201      	movs	r2, #1
  400544:	601a      	str	r2, [r3, #0]
  400546:	4770      	bx	lr
  400548:	400e1400 	.word	0x400e1400
  40054c:	400e0e00 	.word	0x400e0e00

00400550 <ADC_0_CLOCK_init>:
}

static inline hri_pmc_pcsr0_reg_t hri_pmc_get_PCSR0_reg(const void *const hw, hri_pmc_pcsr0_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400550:	4b04      	ldr	r3, [pc, #16]	; (400564 <ADC_0_CLOCK_init+0x14>)
  400552:	699b      	ldr	r3, [r3, #24]
 *
 */
static inline void _pmc_enable_periph_clock(uint32_t periph_id)
{
	if (periph_id < 32) {
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  400554:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
  400558:	d103      	bne.n	400562 <ADC_0_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  40055a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40055e:	4b01      	ldr	r3, [pc, #4]	; (400564 <ADC_0_CLOCK_init+0x14>)
  400560:	611a      	str	r2, [r3, #16]
  400562:	4770      	bx	lr
  400564:	400e0600 	.word	0x400e0600

00400568 <ADC_0_init>:

	_pmc_enable_periph_clock(ID_AFEC0);
}

void ADC_0_init(void)
{
  400568:	b508      	push	{r3, lr}
	ADC_0_CLOCK_init();
  40056a:	4b05      	ldr	r3, [pc, #20]	; (400580 <ADC_0_init+0x18>)
  40056c:	4798      	blx	r3
	ADC_0_PORT_init();
  40056e:	4b05      	ldr	r3, [pc, #20]	; (400584 <ADC_0_init+0x1c>)
  400570:	4798      	blx	r3
	adc_sync_init(&ADC_0, AFEC0, (void *)NULL);
  400572:	2200      	movs	r2, #0
  400574:	4904      	ldr	r1, [pc, #16]	; (400588 <ADC_0_init+0x20>)
  400576:	4805      	ldr	r0, [pc, #20]	; (40058c <ADC_0_init+0x24>)
  400578:	4b05      	ldr	r3, [pc, #20]	; (400590 <ADC_0_init+0x28>)
  40057a:	4798      	blx	r3
  40057c:	bd08      	pop	{r3, pc}
  40057e:	bf00      	nop
  400580:	00400551 	.word	0x00400551
  400584:	00400521 	.word	0x00400521
  400588:	4003c000 	.word	0x4003c000
  40058c:	204002b8 	.word	0x204002b8
  400590:	00400919 	.word	0x00400919

00400594 <ADC_1_PORT_init>:
  400594:	2202      	movs	r2, #2
  400596:	4b07      	ldr	r3, [pc, #28]	; (4005b4 <ADC_1_PORT_init+0x20>)
  400598:	601a      	str	r2, [r3, #0]
  40059a:	f503 7300 	add.w	r3, r3, #512	; 0x200
  40059e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4005a2:	601a      	str	r2, [r3, #0]
  4005a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4005a8:	601a      	str	r2, [r3, #0]
  4005aa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  4005ae:	601a      	str	r2, [r3, #0]
  4005b0:	4770      	bx	lr
  4005b2:	bf00      	nop
  4005b4:	400e1000 	.word	0x400e1000

004005b8 <ADC_1_CLOCK_init>:
}

static inline hri_pmc_pcsr1_reg_t hri_pmc_get_PCSR1_reg(const void *const hw, hri_pmc_pcsr1_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  4005b8:	4b05      	ldr	r3, [pc, #20]	; (4005d0 <ADC_1_CLOCK_init+0x18>)
  4005ba:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
			hri_pmc_set_PCSR0_reg(PMC, (1 << periph_id));
		}
	} else if (periph_id < 64) {
		periph_id -= 32;
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  4005be:	f413 7f80 	tst.w	r3, #256	; 0x100
  4005c2:	d104      	bne.n	4005ce <ADC_1_CLOCK_init+0x16>
	((Pmc *)hw)->PMC_PCER1 = mask;
  4005c4:	f44f 7280 	mov.w	r2, #256	; 0x100
  4005c8:	4b01      	ldr	r3, [pc, #4]	; (4005d0 <ADC_1_CLOCK_init+0x18>)
  4005ca:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  4005ce:	4770      	bx	lr
  4005d0:	400e0600 	.word	0x400e0600

004005d4 <ADC_1_init>:

	_pmc_enable_periph_clock(ID_AFEC1);
}

void ADC_1_init(void)
{
  4005d4:	b508      	push	{r3, lr}
	ADC_1_CLOCK_init();
  4005d6:	4b05      	ldr	r3, [pc, #20]	; (4005ec <ADC_1_init+0x18>)
  4005d8:	4798      	blx	r3
	ADC_1_PORT_init();
  4005da:	4b05      	ldr	r3, [pc, #20]	; (4005f0 <ADC_1_init+0x1c>)
  4005dc:	4798      	blx	r3
	adc_sync_init(&ADC_1, AFEC1, (void *)NULL);
  4005de:	2200      	movs	r2, #0
  4005e0:	4904      	ldr	r1, [pc, #16]	; (4005f4 <ADC_1_init+0x20>)
  4005e2:	4805      	ldr	r0, [pc, #20]	; (4005f8 <ADC_1_init+0x24>)
  4005e4:	4b05      	ldr	r3, [pc, #20]	; (4005fc <ADC_1_init+0x28>)
  4005e6:	4798      	blx	r3
  4005e8:	bd08      	pop	{r3, pc}
  4005ea:	bf00      	nop
  4005ec:	004005b9 	.word	0x004005b9
  4005f0:	00400595 	.word	0x00400595
  4005f4:	40064000 	.word	0x40064000
  4005f8:	204002d8 	.word	0x204002d8
  4005fc:	00400919 	.word	0x00400919

00400600 <EXTERNAL_IRQ_D_init>:
	((Pio *)hw)->PIO_ODR = ~data;
}

static inline void hri_pio_clear_OSR_reg(const void *const hw, hri_pio_osr_reg_t mask)
{
	((Pio *)hw)->PIO_ODR = mask;
  400600:	4b04      	ldr	r3, [pc, #16]	; (400614 <EXTERNAL_IRQ_D_init+0x14>)
  400602:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400606:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = ~data;
}

static inline void hri_pio_clear_PUSR_reg(const void *const hw, hri_pio_pusr_reg_t mask)
{
	((Pio *)hw)->PIO_PUDR = mask;
  400608:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = ~data;
}

static inline void hri_pio_clear_PPDSR_reg(const void *const hw, hri_pio_ppdsr_reg_t mask)
{
	((Pio *)hw)->PIO_PPDDR = mask;
  40060a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  40060e:	601a      	str	r2, [r3, #0]
  400610:	4770      	bx	lr
  400612:	bf00      	nop
  400614:	400e1400 	.word	0x400e1400

00400618 <EXTERNAL_IRQ_A_init>:
	((Pio *)hw)->PIO_ODR = mask;
  400618:	4b06      	ldr	r3, [pc, #24]	; (400634 <EXTERNAL_IRQ_A_init+0x1c>)
  40061a:	2204      	movs	r2, #4
  40061c:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  40061e:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  400620:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400624:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  400626:	2220      	movs	r2, #32
  400628:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  40062a:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  40062c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400630:	601a      	str	r2, [r3, #0]
  400632:	4770      	bx	lr
  400634:	400e0e00 	.word	0x400e0e00

00400638 <PWM_0_PORT_init>:
}

static inline void hri_pio_set_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400638:	4b16      	ldr	r3, [pc, #88]	; (400694 <PWM_0_PORT_init+0x5c>)
  40063a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40063c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
  400640:	671a      	str	r2, [r3, #112]	; 0x70
}

static inline void hri_pio_clear_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400642:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400644:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
  400648:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40064a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  40064e:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400650:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400652:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
  400656:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400658:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40065a:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
  40065e:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400660:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400664:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400666:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400668:	f022 0202 	bic.w	r2, r2, #2
  40066c:	671a      	str	r2, [r3, #112]	; 0x70
  40066e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400670:	f022 0202 	bic.w	r2, r2, #2
  400674:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400676:	2202      	movs	r2, #2
  400678:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40067a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40067c:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
  400680:	671a      	str	r2, [r3, #112]	; 0x70
  400682:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400684:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
  400688:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40068a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  40068e:	605a      	str	r2, [r3, #4]
  400690:	4770      	bx	lr
  400692:	bf00      	nop
  400694:	400e0e00 	.word	0x400e0e00

00400698 <PWM_0_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400698:	4b04      	ldr	r3, [pc, #16]	; (4006ac <PWM_0_CLOCK_init+0x14>)
  40069a:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  40069c:	2b00      	cmp	r3, #0
  40069e:	db03      	blt.n	4006a8 <PWM_0_CLOCK_init+0x10>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4006a0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  4006a4:	4b01      	ldr	r3, [pc, #4]	; (4006ac <PWM_0_CLOCK_init+0x14>)
  4006a6:	611a      	str	r2, [r3, #16]
  4006a8:	4770      	bx	lr
  4006aa:	bf00      	nop
  4006ac:	400e0600 	.word	0x400e0600

004006b0 <PWM_0_init>:
{
	_pmc_enable_periph_clock(ID_PWM0);
}

void PWM_0_init(void)
{
  4006b0:	b508      	push	{r3, lr}
	PWM_0_CLOCK_init();
  4006b2:	4b06      	ldr	r3, [pc, #24]	; (4006cc <PWM_0_init+0x1c>)
  4006b4:	4798      	blx	r3
	PWM_0_PORT_init();
  4006b6:	4b06      	ldr	r3, [pc, #24]	; (4006d0 <PWM_0_init+0x20>)
  4006b8:	4798      	blx	r3
	pwm_init(&PWM_0, PWM0, _pwm_get_pwm());
  4006ba:	4b06      	ldr	r3, [pc, #24]	; (4006d4 <PWM_0_init+0x24>)
  4006bc:	4798      	blx	r3
  4006be:	4602      	mov	r2, r0
  4006c0:	4905      	ldr	r1, [pc, #20]	; (4006d8 <PWM_0_init+0x28>)
  4006c2:	4806      	ldr	r0, [pc, #24]	; (4006dc <PWM_0_init+0x2c>)
  4006c4:	4b06      	ldr	r3, [pc, #24]	; (4006e0 <PWM_0_init+0x30>)
  4006c6:	4798      	blx	r3
  4006c8:	bd08      	pop	{r3, pc}
  4006ca:	bf00      	nop
  4006cc:	00400699 	.word	0x00400699
  4006d0:	00400639 	.word	0x00400639
  4006d4:	004015cd 	.word	0x004015cd
  4006d8:	40020000 	.word	0x40020000
  4006dc:	20400268 	.word	0x20400268
  4006e0:	00400b71 	.word	0x00400b71

004006e4 <PWM_1_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4006e4:	4b0c      	ldr	r3, [pc, #48]	; (400718 <PWM_1_PORT_init+0x34>)
  4006e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4006e8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  4006ec:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4006ee:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4006f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  4006f4:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4006f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  4006fa:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4006fc:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
  400700:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400702:	f042 0201 	orr.w	r2, r2, #1
  400706:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400708:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40070a:	f022 0201 	bic.w	r2, r2, #1
  40070e:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400710:	2201      	movs	r2, #1
  400712:	605a      	str	r2, [r3, #4]
  400714:	4770      	bx	lr
  400716:	bf00      	nop
  400718:	400e0e00 	.word	0x400e0e00

0040071c <PWM_1_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  40071c:	4b05      	ldr	r3, [pc, #20]	; (400734 <PWM_1_CLOCK_init+0x18>)
  40071e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  400722:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
  400726:	d104      	bne.n	400732 <PWM_1_CLOCK_init+0x16>
	((Pmc *)hw)->PMC_PCER1 = mask;
  400728:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40072c:	4b01      	ldr	r3, [pc, #4]	; (400734 <PWM_1_CLOCK_init+0x18>)
  40072e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  400732:	4770      	bx	lr
  400734:	400e0600 	.word	0x400e0600

00400738 <PWM_1_init>:
{
	_pmc_enable_periph_clock(ID_PWM1);
}

void PWM_1_init(void)
{
  400738:	b508      	push	{r3, lr}
	PWM_1_CLOCK_init();
  40073a:	4b06      	ldr	r3, [pc, #24]	; (400754 <PWM_1_init+0x1c>)
  40073c:	4798      	blx	r3
	PWM_1_PORT_init();
  40073e:	4b06      	ldr	r3, [pc, #24]	; (400758 <PWM_1_init+0x20>)
  400740:	4798      	blx	r3
	pwm_init(&PWM_1, PWM1, _pwm_get_pwm());
  400742:	4b06      	ldr	r3, [pc, #24]	; (40075c <PWM_1_init+0x24>)
  400744:	4798      	blx	r3
  400746:	4602      	mov	r2, r0
  400748:	4905      	ldr	r1, [pc, #20]	; (400760 <PWM_1_init+0x28>)
  40074a:	4806      	ldr	r0, [pc, #24]	; (400764 <PWM_1_init+0x2c>)
  40074c:	4b06      	ldr	r3, [pc, #24]	; (400768 <PWM_1_init+0x30>)
  40074e:	4798      	blx	r3
  400750:	bd08      	pop	{r3, pc}
  400752:	bf00      	nop
  400754:	0040071d 	.word	0x0040071d
  400758:	004006e5 	.word	0x004006e5
  40075c:	004015cd 	.word	0x004015cd
  400760:	4005c000 	.word	0x4005c000
  400764:	204002bc 	.word	0x204002bc
  400768:	00400b71 	.word	0x00400b71

0040076c <delay_driver_init>:
}

void delay_driver_init(void)
{
  40076c:	b508      	push	{r3, lr}
	delay_init(SysTick);
  40076e:	4802      	ldr	r0, [pc, #8]	; (400778 <delay_driver_init+0xc>)
  400770:	4b02      	ldr	r3, [pc, #8]	; (40077c <delay_driver_init+0x10>)
  400772:	4798      	blx	r3
  400774:	bd08      	pop	{r3, pc}
  400776:	bf00      	nop
  400778:	e000e010 	.word	0xe000e010
  40077c:	00400a31 	.word	0x00400a31

00400780 <EDBG_COM_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400780:	4b0f      	ldr	r3, [pc, #60]	; (4007c0 <EDBG_COM_PORT_init+0x40>)
  400782:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400784:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  400788:	671a      	str	r2, [r3, #112]	; 0x70
  40078a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40078c:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  400790:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400792:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400796:	605a      	str	r2, [r3, #4]
}

static inline void hri_matrix_set_CCFG_SYSIO_reg(const void *const hw, hri_matrix_ccfg_sysio_reg_t mask)
{
	MATRIX_CRITICAL_SECTION_ENTER();
	((Matrix *)hw)->CCFG_SYSIO |= mask;
  400798:	4a0a      	ldr	r2, [pc, #40]	; (4007c4 <EDBG_COM_PORT_init+0x44>)
  40079a:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  40079e:	f043 0310 	orr.w	r3, r3, #16
  4007a2:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4007a6:	4b08      	ldr	r3, [pc, #32]	; (4007c8 <EDBG_COM_PORT_init+0x48>)
  4007a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4007aa:	f042 0210 	orr.w	r2, r2, #16
  4007ae:	671a      	str	r2, [r3, #112]	; 0x70
  4007b0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4007b2:	f042 0210 	orr.w	r2, r2, #16
  4007b6:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4007b8:	2210      	movs	r2, #16
  4007ba:	605a      	str	r2, [r3, #4]
  4007bc:	4770      	bx	lr
  4007be:	bf00      	nop
  4007c0:	400e0e00 	.word	0x400e0e00
  4007c4:	40088000 	.word	0x40088000
  4007c8:	400e1000 	.word	0x400e1000

004007cc <EDBG_COM_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4007cc:	4b04      	ldr	r3, [pc, #16]	; (4007e0 <EDBG_COM_CLOCK_init+0x14>)
  4007ce:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  4007d0:	f413 4f80 	tst.w	r3, #16384	; 0x4000
  4007d4:	d103      	bne.n	4007de <EDBG_COM_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4007d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  4007da:	4b01      	ldr	r3, [pc, #4]	; (4007e0 <EDBG_COM_CLOCK_init+0x14>)
  4007dc:	611a      	str	r2, [r3, #16]
  4007de:	4770      	bx	lr
  4007e0:	400e0600 	.word	0x400e0600

004007e4 <EDBG_COM_init>:
{
	_pmc_enable_periph_clock(ID_USART1);
}

void EDBG_COM_init(void)
{
  4007e4:	b508      	push	{r3, lr}
	EDBG_COM_CLOCK_init();
  4007e6:	4b06      	ldr	r3, [pc, #24]	; (400800 <EDBG_COM_init+0x1c>)
  4007e8:	4798      	blx	r3
	EDBG_COM_PORT_init();
  4007ea:	4b06      	ldr	r3, [pc, #24]	; (400804 <EDBG_COM_init+0x20>)
  4007ec:	4798      	blx	r3
	usart_sync_init(&EDBG_COM, USART1, _usart_get_usart_sync());
  4007ee:	4b06      	ldr	r3, [pc, #24]	; (400808 <EDBG_COM_init+0x24>)
  4007f0:	4798      	blx	r3
  4007f2:	4602      	mov	r2, r0
  4007f4:	4905      	ldr	r1, [pc, #20]	; (40080c <EDBG_COM_init+0x28>)
  4007f6:	4806      	ldr	r0, [pc, #24]	; (400810 <EDBG_COM_init+0x2c>)
  4007f8:	4b06      	ldr	r3, [pc, #24]	; (400814 <EDBG_COM_init+0x30>)
  4007fa:	4798      	blx	r3
  4007fc:	bd08      	pop	{r3, pc}
  4007fe:	bf00      	nop
  400800:	004007cd 	.word	0x004007cd
  400804:	00400781 	.word	0x00400781
  400808:	00401845 	.word	0x00401845
  40080c:	40028000 	.word	0x40028000
  400810:	204002ac 	.word	0x204002ac
  400814:	00400cf1 	.word	0x00400cf1

00400818 <system_init>:
	CAN_1_PORT_init();
	can_async_init(&CAN_1, MCAN1);
}

void system_init(void)
{
  400818:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
  40081a:	4b32      	ldr	r3, [pc, #200]	; (4008e4 <system_init+0xcc>)
  40081c:	4798      	blx	r3
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  40081e:	4b32      	ldr	r3, [pc, #200]	; (4008e8 <system_init+0xd0>)
  400820:	699b      	ldr	r3, [r3, #24]
  400822:	f413 6f80 	tst.w	r3, #1024	; 0x400
  400826:	d103      	bne.n	400830 <system_init+0x18>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400828:	f44f 6280 	mov.w	r2, #1024	; 0x400
  40082c:	4b2e      	ldr	r3, [pc, #184]	; (4008e8 <system_init+0xd0>)
  40082e:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400830:	4b2d      	ldr	r3, [pc, #180]	; (4008e8 <system_init+0xd0>)
  400832:	699b      	ldr	r3, [r3, #24]
  400834:	f413 5f80 	tst.w	r3, #4096	; 0x1000
  400838:	d103      	bne.n	400842 <system_init+0x2a>
	((Pmc *)hw)->PMC_PCER0 = mask;
  40083a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40083e:	4b2a      	ldr	r3, [pc, #168]	; (4008e8 <system_init+0xd0>)
  400840:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400842:	4b29      	ldr	r3, [pc, #164]	; (4008e8 <system_init+0xd0>)
  400844:	699b      	ldr	r3, [r3, #24]
  400846:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  40084a:	d103      	bne.n	400854 <system_init+0x3c>
	((Pmc *)hw)->PMC_PCER0 = mask;
  40084c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  400850:	4b25      	ldr	r3, [pc, #148]	; (4008e8 <system_init+0xd0>)
  400852:	611a      	str	r2, [r3, #16]
}

static inline void hri_wdt_set_MR_WDDIS_bit(const void *const hw)
{
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->WDT_MR |= WDT_MR_WDDIS;
  400854:	4a25      	ldr	r2, [pc, #148]	; (4008ec <system_init+0xd4>)
  400856:	6853      	ldr	r3, [r2, #4]
  400858:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  40085c:	6053      	str	r3, [r2, #4]
	((Pio *)hw)->PIO_ODR = mask;
  40085e:	4b24      	ldr	r3, [pc, #144]	; (4008f0 <system_init+0xd8>)
  400860:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400864:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PPDDR = mask;
  400866:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PUER = mask;
  40086a:	665a      	str	r2, [r3, #100]	; 0x64
	((Pio *)hw)->PIO_PER = mask;
  40086c:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  40086e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
  400872:	6359      	str	r1, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400874:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400876:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400878:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40087c:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  40087e:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400880:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400882:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400886:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400888:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  40088a:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  40088c:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
  400890:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400892:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400894:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400896:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  40089a:	f44f 7080 	mov.w	r0, #256	; 0x100
  40089e:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  4008a0:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  4008a2:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  4008a4:	f503 7300 	add.w	r3, r3, #512	; 0x200
  4008a8:	6359      	str	r1, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  4008aa:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  4008ac:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  4008ae:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4008b2:	6359      	str	r1, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  4008b4:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  4008b6:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  4008b8:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  4008ba:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  4008bc:	601a      	str	r2, [r3, #0]
	// Set pin direction to output
	gpio_set_pin_direction(PIN_GPIO_6, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(PIN_GPIO_6, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
  4008be:	4b0d      	ldr	r3, [pc, #52]	; (4008f4 <system_init+0xdc>)
  4008c0:	4798      	blx	r3

	ADC_1_init();
  4008c2:	4b0d      	ldr	r3, [pc, #52]	; (4008f8 <system_init+0xe0>)
  4008c4:	4798      	blx	r3
	EXTERNAL_IRQ_D_init();
  4008c6:	4b0d      	ldr	r3, [pc, #52]	; (4008fc <system_init+0xe4>)
  4008c8:	4798      	blx	r3
	EXTERNAL_IRQ_A_init();
  4008ca:	4b0d      	ldr	r3, [pc, #52]	; (400900 <system_init+0xe8>)
  4008cc:	4798      	blx	r3

	PWM_0_init();
  4008ce:	4b0d      	ldr	r3, [pc, #52]	; (400904 <system_init+0xec>)
  4008d0:	4798      	blx	r3

	PWM_1_init();
  4008d2:	4b0d      	ldr	r3, [pc, #52]	; (400908 <system_init+0xf0>)
  4008d4:	4798      	blx	r3

	delay_driver_init();
  4008d6:	4b0d      	ldr	r3, [pc, #52]	; (40090c <system_init+0xf4>)
  4008d8:	4798      	blx	r3

	EDBG_COM_init();
  4008da:	4b0d      	ldr	r3, [pc, #52]	; (400910 <system_init+0xf8>)
  4008dc:	4798      	blx	r3

	//CAN_1_init();

	ext_irq_init();
  4008de:	4b0d      	ldr	r3, [pc, #52]	; (400914 <system_init+0xfc>)
  4008e0:	4798      	blx	r3
  4008e2:	bd08      	pop	{r3, pc}
  4008e4:	00400f15 	.word	0x00400f15
  4008e8:	400e0600 	.word	0x400e0600
  4008ec:	400e1850 	.word	0x400e1850
  4008f0:	400e0e00 	.word	0x400e0e00
  4008f4:	00400569 	.word	0x00400569
  4008f8:	004005d5 	.word	0x004005d5
  4008fc:	00400601 	.word	0x00400601
  400900:	00400619 	.word	0x00400619
  400904:	004006b1 	.word	0x004006b1
  400908:	00400739 	.word	0x00400739
  40090c:	0040076d 	.word	0x0040076d
  400910:	004007e5 	.word	0x004007e5
  400914:	00400ac9 	.word	0x00400ac9

00400918 <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
  400918:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  40091a:	4604      	mov	r4, r0
  40091c:	460d      	mov	r5, r1
  40091e:	2800      	cmp	r0, #0
  400920:	bf18      	it	ne
  400922:	2900      	cmpne	r1, #0
  400924:	bf14      	ite	ne
  400926:	2001      	movne	r0, #1
  400928:	2000      	moveq	r0, #0
  40092a:	2239      	movs	r2, #57	; 0x39
  40092c:	4903      	ldr	r1, [pc, #12]	; (40093c <adc_sync_init+0x24>)
  40092e:	4b04      	ldr	r3, [pc, #16]	; (400940 <adc_sync_init+0x28>)
  400930:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
  400932:	4629      	mov	r1, r5
  400934:	4620      	mov	r0, r4
  400936:	4b03      	ldr	r3, [pc, #12]	; (400944 <adc_sync_init+0x2c>)
  400938:	4798      	blx	r3
}
  40093a:	bd38      	pop	{r3, r4, r5, pc}
  40093c:	00406088 	.word	0x00406088
  400940:	00400d65 	.word	0x00400d65
  400944:	00400e89 	.word	0x00400e89

00400948 <adc_sync_enable_channel>:

/**
 * \brief Enable ADC
 */
int32_t adc_sync_enable_channel(struct adc_sync_descriptor *const descr, const uint8_t channel)
{
  400948:	b538      	push	{r3, r4, r5, lr}
  40094a:	460d      	mov	r5, r1
	ASSERT(descr);
  40094c:	4604      	mov	r4, r0
  40094e:	224e      	movs	r2, #78	; 0x4e
  400950:	4905      	ldr	r1, [pc, #20]	; (400968 <adc_sync_enable_channel+0x20>)
  400952:	3000      	adds	r0, #0
  400954:	bf18      	it	ne
  400956:	2001      	movne	r0, #1
  400958:	4b04      	ldr	r3, [pc, #16]	; (40096c <adc_sync_enable_channel+0x24>)
  40095a:	4798      	blx	r3
	_adc_sync_enable_channel(&descr->device, channel);
  40095c:	4629      	mov	r1, r5
  40095e:	4620      	mov	r0, r4
  400960:	4b03      	ldr	r3, [pc, #12]	; (400970 <adc_sync_enable_channel+0x28>)
  400962:	4798      	blx	r3

	return ERR_NONE;
}
  400964:	2000      	movs	r0, #0
  400966:	bd38      	pop	{r3, r4, r5, pc}
  400968:	00406088 	.word	0x00406088
  40096c:	00400d65 	.word	0x00400d65
  400970:	00400ec1 	.word	0x00400ec1

00400974 <adc_sync_read_channel>:
/*
 * \brief Read data from ADC
 */
int32_t adc_sync_read_channel(struct adc_sync_descriptor *const descr, const uint8_t channel, uint8_t *const buffer,
                              const uint16_t length)
{
  400974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400978:	460d      	mov	r5, r1
  40097a:	4699      	mov	r9, r3
	uint8_t  data_size;
	uint16_t offset = 0;

	ASSERT(descr && buffer && length);
  40097c:	4607      	mov	r7, r0
  40097e:	4690      	mov	r8, r2
  400980:	2800      	cmp	r0, #0
  400982:	bf18      	it	ne
  400984:	2a00      	cmpne	r2, #0
  400986:	d002      	beq.n	40098e <adc_sync_read_channel+0x1a>
  400988:	b9cb      	cbnz	r3, 4009be <adc_sync_read_channel+0x4a>
  40098a:	2000      	movs	r0, #0
  40098c:	e000      	b.n	400990 <adc_sync_read_channel+0x1c>
  40098e:	2000      	movs	r0, #0
  400990:	f8df a07c 	ldr.w	sl, [pc, #124]	; 400a10 <adc_sync_read_channel+0x9c>
  400994:	2267      	movs	r2, #103	; 0x67
  400996:	4651      	mov	r1, sl
  400998:	4e18      	ldr	r6, [pc, #96]	; (4009fc <adc_sync_read_channel+0x88>)
  40099a:	47b0      	blx	r6
	data_size = _adc_sync_get_data_size(&descr->device);
  40099c:	463c      	mov	r4, r7
  40099e:	4638      	mov	r0, r7
  4009a0:	4b17      	ldr	r3, [pc, #92]	; (400a00 <adc_sync_read_channel+0x8c>)
  4009a2:	4798      	blx	r3
  4009a4:	4607      	mov	r7, r0
	ASSERT(!(length % data_size));
  4009a6:	fb99 f0f0 	sdiv	r0, r9, r0
  4009aa:	fb07 9010 	mls	r0, r7, r0, r9
  4009ae:	2269      	movs	r2, #105	; 0x69
  4009b0:	4651      	mov	r1, sl
  4009b2:	fab0 f080 	clz	r0, r0
  4009b6:	0940      	lsrs	r0, r0, #5
  4009b8:	47b0      	blx	r6
	uint16_t offset = 0;
  4009ba:	2600      	movs	r6, #0
  4009bc:	e005      	b.n	4009ca <adc_sync_read_channel+0x56>
	ASSERT(descr && buffer && length);
  4009be:	2001      	movs	r0, #1
  4009c0:	e7e6      	b.n	400990 <adc_sync_read_channel+0x1c>
		result         = _adc_sync_read_channel_data(&descr->device, channel);
		buffer[offset] = result;
		if (1 < data_size) {
			buffer[offset + 1] = result >> 8;
		}
		offset += data_size;
  4009c2:	443e      	add	r6, r7
  4009c4:	b2b6      	uxth	r6, r6
	} while (offset < length);
  4009c6:	45b1      	cmp	r9, r6
  4009c8:	d915      	bls.n	4009f6 <adc_sync_read_channel+0x82>
		_adc_sync_convert(&descr->device);
  4009ca:	4620      	mov	r0, r4
  4009cc:	4b0d      	ldr	r3, [pc, #52]	; (400a04 <adc_sync_read_channel+0x90>)
  4009ce:	4798      	blx	r3
		while (!_adc_sync_is_channel_conversion_done(&descr->device, channel))
  4009d0:	4629      	mov	r1, r5
  4009d2:	4620      	mov	r0, r4
  4009d4:	4b0c      	ldr	r3, [pc, #48]	; (400a08 <adc_sync_read_channel+0x94>)
  4009d6:	4798      	blx	r3
  4009d8:	2800      	cmp	r0, #0
  4009da:	d0f9      	beq.n	4009d0 <adc_sync_read_channel+0x5c>
		result         = _adc_sync_read_channel_data(&descr->device, channel);
  4009dc:	4629      	mov	r1, r5
  4009de:	4620      	mov	r0, r4
  4009e0:	4b0a      	ldr	r3, [pc, #40]	; (400a0c <adc_sync_read_channel+0x98>)
  4009e2:	4798      	blx	r3
		buffer[offset] = result;
  4009e4:	f808 0006 	strb.w	r0, [r8, r6]
		if (1 < data_size) {
  4009e8:	2f01      	cmp	r7, #1
  4009ea:	d9ea      	bls.n	4009c2 <adc_sync_read_channel+0x4e>
			buffer[offset + 1] = result >> 8;
  4009ec:	1c73      	adds	r3, r6, #1
  4009ee:	0a00      	lsrs	r0, r0, #8
  4009f0:	f808 0003 	strb.w	r0, [r8, r3]
  4009f4:	e7e5      	b.n	4009c2 <adc_sync_read_channel+0x4e>

	return offset;
}
  4009f6:	4630      	mov	r0, r6
  4009f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4009fc:	00400d65 	.word	0x00400d65
  400a00:	00400ecd 	.word	0x00400ecd
  400a04:	00400ee5 	.word	0x00400ee5
  400a08:	00400ed1 	.word	0x00400ed1
  400a0c:	00400eed 	.word	0x00400eed
  400a10:	00406088 	.word	0x00406088

00400a14 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  400a14:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
  400a18:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  400a1a:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  400a1c:	f3bf 8f5f 	dmb	sy
  400a20:	4770      	bx	lr

00400a22 <atomic_leave_critical>:
  400a22:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
  400a26:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
  400a28:	f383 8810 	msr	PRIMASK, r3
  400a2c:	4770      	bx	lr
	...

00400a30 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
  400a30:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
  400a32:	4b02      	ldr	r3, [pc, #8]	; (400a3c <delay_init+0xc>)
  400a34:	6018      	str	r0, [r3, #0]
  400a36:	4b02      	ldr	r3, [pc, #8]	; (400a40 <delay_init+0x10>)
  400a38:	4798      	blx	r3
  400a3a:	bd08      	pop	{r3, pc}
  400a3c:	204001ec 	.word	0x204001ec
  400a40:	004015e5 	.word	0x004015e5

00400a44 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
  400a44:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
  400a46:	4b04      	ldr	r3, [pc, #16]	; (400a58 <delay_us+0x14>)
  400a48:	681c      	ldr	r4, [r3, #0]
  400a4a:	4b04      	ldr	r3, [pc, #16]	; (400a5c <delay_us+0x18>)
  400a4c:	4798      	blx	r3
  400a4e:	4601      	mov	r1, r0
  400a50:	4620      	mov	r0, r4
  400a52:	4b03      	ldr	r3, [pc, #12]	; (400a60 <delay_us+0x1c>)
  400a54:	4798      	blx	r3
  400a56:	bd10      	pop	{r4, pc}
  400a58:	204001ec 	.word	0x204001ec
  400a5c:	00400ef9 	.word	0x00400ef9
  400a60:	004015f1 	.word	0x004015f1

00400a64 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
  400a64:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
  400a66:	4b04      	ldr	r3, [pc, #16]	; (400a78 <delay_ms+0x14>)
  400a68:	681c      	ldr	r4, [r3, #0]
  400a6a:	4b04      	ldr	r3, [pc, #16]	; (400a7c <delay_ms+0x18>)
  400a6c:	4798      	blx	r3
  400a6e:	4601      	mov	r1, r0
  400a70:	4620      	mov	r0, r4
  400a72:	4b03      	ldr	r3, [pc, #12]	; (400a80 <delay_ms+0x1c>)
  400a74:	4798      	blx	r3
  400a76:	bd10      	pop	{r4, pc}
  400a78:	204001ec 	.word	0x204001ec
  400a7c:	00400f03 	.word	0x00400f03
  400a80:	004015f1 	.word	0x004015f1

00400a84 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
  400a84:	b538      	push	{r3, r4, r5, lr}
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
  400a86:	2503      	movs	r5, #3
  400a88:	2400      	movs	r4, #0

	while (upper >= lower) {
  400a8a:	e007      	b.n	400a9c <process_ext_irq+0x18>
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
			if (ext_irqs[middle].cb) {
  400a8c:	4a0d      	ldr	r2, [pc, #52]	; (400ac4 <process_ext_irq+0x40>)
  400a8e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  400a92:	b1b3      	cbz	r3, 400ac2 <process_ext_irq+0x3e>
				ext_irqs[middle].cb();
  400a94:	4798      	blx	r3
  400a96:	bd38      	pop	{r3, r4, r5, pc}
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
		} else {
			upper = middle - 1;
  400a98:	3a01      	subs	r2, #1
  400a9a:	b2d5      	uxtb	r5, r2
	while (upper >= lower) {
  400a9c:	42ac      	cmp	r4, r5
  400a9e:	d810      	bhi.n	400ac2 <process_ext_irq+0x3e>
		middle = (upper + lower) >> 1;
  400aa0:	192b      	adds	r3, r5, r4
  400aa2:	105b      	asrs	r3, r3, #1
  400aa4:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
  400aa6:	2a02      	cmp	r2, #2
  400aa8:	d80b      	bhi.n	400ac2 <process_ext_irq+0x3e>
  400aaa:	4613      	mov	r3, r2
		if (ext_irqs[middle].pin == pin) {
  400aac:	4905      	ldr	r1, [pc, #20]	; (400ac4 <process_ext_irq+0x40>)
  400aae:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
  400ab2:	6849      	ldr	r1, [r1, #4]
  400ab4:	4281      	cmp	r1, r0
  400ab6:	d0e9      	beq.n	400a8c <process_ext_irq+0x8>
		if (ext_irqs[middle].pin < pin) {
  400ab8:	4281      	cmp	r1, r0
  400aba:	d2ed      	bcs.n	400a98 <process_ext_irq+0x14>
			lower = middle + 1;
  400abc:	3201      	adds	r2, #1
  400abe:	b2d4      	uxtb	r4, r2
  400ac0:	e7ec      	b.n	400a9c <process_ext_irq+0x18>
  400ac2:	bd38      	pop	{r3, r4, r5, pc}
  400ac4:	204001f0 	.word	0x204001f0

00400ac8 <ext_irq_init>:
{
  400ac8:	b508      	push	{r3, lr}
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  400aca:	2300      	movs	r3, #0
  400acc:	e00a      	b.n	400ae4 <ext_irq_init+0x1c>
		ext_irqs[i].pin = 0xFFFFFFFF;
  400ace:	4a08      	ldr	r2, [pc, #32]	; (400af0 <ext_irq_init+0x28>)
  400ad0:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
  400ad4:	f04f 30ff 	mov.w	r0, #4294967295
  400ad8:	6048      	str	r0, [r1, #4]
		ext_irqs[i].cb  = NULL;
  400ada:	2100      	movs	r1, #0
  400adc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  400ae0:	3301      	adds	r3, #1
  400ae2:	b29b      	uxth	r3, r3
  400ae4:	2b02      	cmp	r3, #2
  400ae6:	d9f2      	bls.n	400ace <ext_irq_init+0x6>
	return _ext_irq_init(process_ext_irq);
  400ae8:	4802      	ldr	r0, [pc, #8]	; (400af4 <ext_irq_init+0x2c>)
  400aea:	4b03      	ldr	r3, [pc, #12]	; (400af8 <ext_irq_init+0x30>)
  400aec:	4798      	blx	r3
}
  400aee:	bd08      	pop	{r3, pc}
  400af0:	204001f0 	.word	0x204001f0
  400af4:	00400a85 	.word	0x00400a85
  400af8:	00401225 	.word	0x00401225

00400afc <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  400afc:	b570      	push	{r4, r5, r6, lr}
  400afe:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  400b00:	4604      	mov	r4, r0
  400b02:	460d      	mov	r5, r1
  400b04:	2800      	cmp	r0, #0
  400b06:	bf18      	it	ne
  400b08:	2900      	cmpne	r1, #0
  400b0a:	bf14      	ite	ne
  400b0c:	2001      	movne	r0, #1
  400b0e:	2000      	moveq	r0, #0
  400b10:	2234      	movs	r2, #52	; 0x34
  400b12:	4904      	ldr	r1, [pc, #16]	; (400b24 <io_write+0x28>)
  400b14:	4b04      	ldr	r3, [pc, #16]	; (400b28 <io_write+0x2c>)
  400b16:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
  400b18:	6823      	ldr	r3, [r4, #0]
  400b1a:	4632      	mov	r2, r6
  400b1c:	4629      	mov	r1, r5
  400b1e:	4620      	mov	r0, r4
  400b20:	4798      	blx	r3
}
  400b22:	bd70      	pop	{r4, r5, r6, pc}
  400b24:	004060a4 	.word	0x004060a4
  400b28:	00400d65 	.word	0x00400d65

00400b2c <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  400b2c:	b570      	push	{r4, r5, r6, lr}
  400b2e:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  400b30:	4604      	mov	r4, r0
  400b32:	460d      	mov	r5, r1
  400b34:	2800      	cmp	r0, #0
  400b36:	bf18      	it	ne
  400b38:	2900      	cmpne	r1, #0
  400b3a:	bf14      	ite	ne
  400b3c:	2001      	movne	r0, #1
  400b3e:	2000      	moveq	r0, #0
  400b40:	223d      	movs	r2, #61	; 0x3d
  400b42:	4904      	ldr	r1, [pc, #16]	; (400b54 <io_read+0x28>)
  400b44:	4b04      	ldr	r3, [pc, #16]	; (400b58 <io_read+0x2c>)
  400b46:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
  400b48:	6863      	ldr	r3, [r4, #4]
  400b4a:	4632      	mov	r2, r6
  400b4c:	4629      	mov	r1, r5
  400b4e:	4620      	mov	r0, r4
  400b50:	4798      	blx	r3
}
  400b52:	bd70      	pop	{r4, r5, r6, pc}
  400b54:	004060a4 	.word	0x004060a4
  400b58:	00400d65 	.word	0x00400d65

00400b5c <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
  400b5c:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
  400b5e:	6943      	ldr	r3, [r0, #20]
  400b60:	b103      	cbz	r3, 400b64 <pwm_period_expired+0x8>
		descr->pwm_cb.period(descr);
  400b62:	4798      	blx	r3
  400b64:	bd08      	pop	{r3, pc}

00400b66 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
  400b66:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
  400b68:	6983      	ldr	r3, [r0, #24]
  400b6a:	b103      	cbz	r3, 400b6e <pwm_detect_fault+0x8>
		descr->pwm_cb.error(descr);
  400b6c:	4798      	blx	r3
  400b6e:	bd08      	pop	{r3, pc}

00400b70 <pwm_init>:
{
  400b70:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  400b72:	4604      	mov	r4, r0
  400b74:	460d      	mov	r5, r1
  400b76:	2800      	cmp	r0, #0
  400b78:	bf18      	it	ne
  400b7a:	2900      	cmpne	r1, #0
  400b7c:	bf14      	ite	ne
  400b7e:	2001      	movne	r0, #1
  400b80:	2000      	moveq	r0, #0
  400b82:	2233      	movs	r2, #51	; 0x33
  400b84:	4906      	ldr	r1, [pc, #24]	; (400ba0 <pwm_init+0x30>)
  400b86:	4b07      	ldr	r3, [pc, #28]	; (400ba4 <pwm_init+0x34>)
  400b88:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
  400b8a:	4629      	mov	r1, r5
  400b8c:	4620      	mov	r0, r4
  400b8e:	4b06      	ldr	r3, [pc, #24]	; (400ba8 <pwm_init+0x38>)
  400b90:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
  400b92:	4b06      	ldr	r3, [pc, #24]	; (400bac <pwm_init+0x3c>)
  400b94:	6023      	str	r3, [r4, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
  400b96:	4b06      	ldr	r3, [pc, #24]	; (400bb0 <pwm_init+0x40>)
  400b98:	6063      	str	r3, [r4, #4]
}
  400b9a:	2000      	movs	r0, #0
  400b9c:	bd38      	pop	{r3, r4, r5, pc}
  400b9e:	bf00      	nop
  400ba0:	004060b8 	.word	0x004060b8
  400ba4:	00400d65 	.word	0x00400d65
  400ba8:	0040138d 	.word	0x0040138d
  400bac:	00400b5d 	.word	0x00400b5d
  400bb0:	00400b67 	.word	0x00400b67

00400bb4 <pwm_enable>:
{
  400bb4:	b510      	push	{r4, lr}
	ASSERT(descr);
  400bb6:	4604      	mov	r4, r0
  400bb8:	224a      	movs	r2, #74	; 0x4a
  400bba:	4909      	ldr	r1, [pc, #36]	; (400be0 <pwm_enable+0x2c>)
  400bbc:	3000      	adds	r0, #0
  400bbe:	bf18      	it	ne
  400bc0:	2001      	movne	r0, #1
  400bc2:	4b08      	ldr	r3, [pc, #32]	; (400be4 <pwm_enable+0x30>)
  400bc4:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
  400bc6:	4620      	mov	r0, r4
  400bc8:	4b07      	ldr	r3, [pc, #28]	; (400be8 <pwm_enable+0x34>)
  400bca:	4798      	blx	r3
  400bcc:	b920      	cbnz	r0, 400bd8 <pwm_enable+0x24>
	_pwm_enable(&descr->device);
  400bce:	4620      	mov	r0, r4
  400bd0:	4b06      	ldr	r3, [pc, #24]	; (400bec <pwm_enable+0x38>)
  400bd2:	4798      	blx	r3
	return ERR_NONE;
  400bd4:	2000      	movs	r0, #0
  400bd6:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
  400bd8:	f06f 0010 	mvn.w	r0, #16
}
  400bdc:	bd10      	pop	{r4, pc}
  400bde:	bf00      	nop
  400be0:	004060b8 	.word	0x004060b8
  400be4:	00400d65 	.word	0x00400d65
  400be8:	0040159d 	.word	0x0040159d
  400bec:	004014f9 	.word	0x004014f9

00400bf0 <pwm_set_parameters>:
{
  400bf0:	b570      	push	{r4, r5, r6, lr}
  400bf2:	460d      	mov	r5, r1
  400bf4:	4616      	mov	r6, r2
	ASSERT(descr);
  400bf6:	4604      	mov	r4, r0
  400bf8:	227c      	movs	r2, #124	; 0x7c
  400bfa:	4906      	ldr	r1, [pc, #24]	; (400c14 <pwm_set_parameters+0x24>)
  400bfc:	3000      	adds	r0, #0
  400bfe:	bf18      	it	ne
  400c00:	2001      	movne	r0, #1
  400c02:	4b05      	ldr	r3, [pc, #20]	; (400c18 <pwm_set_parameters+0x28>)
  400c04:	4798      	blx	r3
	_pwm_set_param(&descr->device, period, duty_cycle);
  400c06:	4632      	mov	r2, r6
  400c08:	4629      	mov	r1, r5
  400c0a:	4620      	mov	r0, r4
  400c0c:	4b03      	ldr	r3, [pc, #12]	; (400c1c <pwm_set_parameters+0x2c>)
  400c0e:	4798      	blx	r3
}
  400c10:	2000      	movs	r0, #0
  400c12:	bd70      	pop	{r4, r5, r6, pc}
  400c14:	004060b8 	.word	0x004060b8
  400c18:	00400d65 	.word	0x00400d65
  400c1c:	0040153d 	.word	0x0040153d

00400c20 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  400c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400c22:	4616      	mov	r6, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
  400c24:	4605      	mov	r5, r0
  400c26:	460f      	mov	r7, r1
  400c28:	2800      	cmp	r0, #0
  400c2a:	bf18      	it	ne
  400c2c:	2900      	cmpne	r1, #0
  400c2e:	d002      	beq.n	400c36 <usart_sync_write+0x16>
  400c30:	bb0a      	cbnz	r2, 400c76 <usart_sync_write+0x56>
  400c32:	2000      	movs	r0, #0
  400c34:	e000      	b.n	400c38 <usart_sync_write+0x18>
  400c36:	2000      	movs	r0, #0
  400c38:	22f1      	movs	r2, #241	; 0xf1
  400c3a:	4910      	ldr	r1, [pc, #64]	; (400c7c <usart_sync_write+0x5c>)
  400c3c:	4b10      	ldr	r3, [pc, #64]	; (400c80 <usart_sync_write+0x60>)
  400c3e:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
  400c40:	f105 0408 	add.w	r4, r5, #8
  400c44:	4620      	mov	r0, r4
  400c46:	4b0f      	ldr	r3, [pc, #60]	; (400c84 <usart_sync_write+0x64>)
  400c48:	4798      	blx	r3
  400c4a:	2800      	cmp	r0, #0
  400c4c:	d0f8      	beq.n	400c40 <usart_sync_write+0x20>
  400c4e:	2500      	movs	r5, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
  400c50:	5d79      	ldrb	r1, [r7, r5]
  400c52:	4620      	mov	r0, r4
  400c54:	4b0c      	ldr	r3, [pc, #48]	; (400c88 <usart_sync_write+0x68>)
  400c56:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
  400c58:	4620      	mov	r0, r4
  400c5a:	4b0a      	ldr	r3, [pc, #40]	; (400c84 <usart_sync_write+0x64>)
  400c5c:	4798      	blx	r3
  400c5e:	2800      	cmp	r0, #0
  400c60:	d0fa      	beq.n	400c58 <usart_sync_write+0x38>
			;
	} while (++offset < length);
  400c62:	3501      	adds	r5, #1
  400c64:	42b5      	cmp	r5, r6
  400c66:	d3f3      	bcc.n	400c50 <usart_sync_write+0x30>
	while (!_usart_sync_is_transmit_done(&descr->device))
  400c68:	4620      	mov	r0, r4
  400c6a:	4b08      	ldr	r3, [pc, #32]	; (400c8c <usart_sync_write+0x6c>)
  400c6c:	4798      	blx	r3
  400c6e:	2800      	cmp	r0, #0
  400c70:	d0fa      	beq.n	400c68 <usart_sync_write+0x48>
		;
	return (int32_t)offset;
}
  400c72:	4628      	mov	r0, r5
  400c74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
  400c76:	2001      	movs	r0, #1
  400c78:	e7de      	b.n	400c38 <usart_sync_write+0x18>
  400c7a:	bf00      	nop
  400c7c:	004060d0 	.word	0x004060d0
  400c80:	00400d65 	.word	0x00400d65
  400c84:	004017cd 	.word	0x004017cd
  400c88:	00401785 	.word	0x00401785
  400c8c:	004017f5 	.word	0x004017f5

00400c90 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  400c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400c94:	4617      	mov	r7, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
  400c96:	4605      	mov	r5, r0
  400c98:	4688      	mov	r8, r1
  400c9a:	2800      	cmp	r0, #0
  400c9c:	bf18      	it	ne
  400c9e:	2900      	cmpne	r1, #0
  400ca0:	d002      	beq.n	400ca8 <usart_sync_read+0x18>
  400ca2:	b9d2      	cbnz	r2, 400cda <usart_sync_read+0x4a>
  400ca4:	2000      	movs	r0, #0
  400ca6:	e000      	b.n	400caa <usart_sync_read+0x1a>
  400ca8:	2000      	movs	r0, #0
  400caa:	f44f 7286 	mov.w	r2, #268	; 0x10c
  400cae:	490c      	ldr	r1, [pc, #48]	; (400ce0 <usart_sync_read+0x50>)
  400cb0:	4b0c      	ldr	r3, [pc, #48]	; (400ce4 <usart_sync_read+0x54>)
  400cb2:	4798      	blx	r3
	uint32_t                      offset = 0;
  400cb4:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
  400cb6:	f105 0408 	add.w	r4, r5, #8
  400cba:	4620      	mov	r0, r4
  400cbc:	4b0a      	ldr	r3, [pc, #40]	; (400ce8 <usart_sync_read+0x58>)
  400cbe:	4798      	blx	r3
  400cc0:	2800      	cmp	r0, #0
  400cc2:	d0f8      	beq.n	400cb6 <usart_sync_read+0x26>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
  400cc4:	4620      	mov	r0, r4
  400cc6:	4b09      	ldr	r3, [pc, #36]	; (400cec <usart_sync_read+0x5c>)
  400cc8:	4798      	blx	r3
  400cca:	f808 0006 	strb.w	r0, [r8, r6]
	} while (++offset < length);
  400cce:	3601      	adds	r6, #1
  400cd0:	42be      	cmp	r6, r7
  400cd2:	d3f0      	bcc.n	400cb6 <usart_sync_read+0x26>

	return (int32_t)offset;
}
  400cd4:	4630      	mov	r0, r6
  400cd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(io_descr && buf && length);
  400cda:	2001      	movs	r0, #1
  400cdc:	e7e5      	b.n	400caa <usart_sync_read+0x1a>
  400cde:	bf00      	nop
  400ce0:	004060d0 	.word	0x004060d0
  400ce4:	00400d65 	.word	0x00400d65
  400ce8:	0040181d 	.word	0x0040181d
  400cec:	004017a9 	.word	0x004017a9

00400cf0 <usart_sync_init>:
{
  400cf0:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  400cf2:	4604      	mov	r4, r0
  400cf4:	460d      	mov	r5, r1
  400cf6:	2800      	cmp	r0, #0
  400cf8:	bf18      	it	ne
  400cfa:	2900      	cmpne	r1, #0
  400cfc:	bf14      	ite	ne
  400cfe:	2001      	movne	r0, #1
  400d00:	2000      	moveq	r0, #0
  400d02:	2234      	movs	r2, #52	; 0x34
  400d04:	4907      	ldr	r1, [pc, #28]	; (400d24 <usart_sync_init+0x34>)
  400d06:	4b08      	ldr	r3, [pc, #32]	; (400d28 <usart_sync_init+0x38>)
  400d08:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
  400d0a:	4629      	mov	r1, r5
  400d0c:	f104 0008 	add.w	r0, r4, #8
  400d10:	4b06      	ldr	r3, [pc, #24]	; (400d2c <usart_sync_init+0x3c>)
  400d12:	4798      	blx	r3
	if (init_status) {
  400d14:	4603      	mov	r3, r0
  400d16:	b918      	cbnz	r0, 400d20 <usart_sync_init+0x30>
	descr->io.read  = usart_sync_read;
  400d18:	4a05      	ldr	r2, [pc, #20]	; (400d30 <usart_sync_init+0x40>)
  400d1a:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
  400d1c:	4a05      	ldr	r2, [pc, #20]	; (400d34 <usart_sync_init+0x44>)
  400d1e:	6022      	str	r2, [r4, #0]
}
  400d20:	4618      	mov	r0, r3
  400d22:	bd38      	pop	{r3, r4, r5, pc}
  400d24:	004060d0 	.word	0x004060d0
  400d28:	00400d65 	.word	0x00400d65
  400d2c:	00401719 	.word	0x00401719
  400d30:	00400c91 	.word	0x00400c91
  400d34:	00400c21 	.word	0x00400c21

00400d38 <usart_sync_enable>:
{
  400d38:	b510      	push	{r4, lr}
	ASSERT(descr);
  400d3a:	4604      	mov	r4, r0
  400d3c:	2253      	movs	r2, #83	; 0x53
  400d3e:	4906      	ldr	r1, [pc, #24]	; (400d58 <usart_sync_enable+0x20>)
  400d40:	3000      	adds	r0, #0
  400d42:	bf18      	it	ne
  400d44:	2001      	movne	r0, #1
  400d46:	4b05      	ldr	r3, [pc, #20]	; (400d5c <usart_sync_enable+0x24>)
  400d48:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
  400d4a:	f104 0008 	add.w	r0, r4, #8
  400d4e:	4b04      	ldr	r3, [pc, #16]	; (400d60 <usart_sync_enable+0x28>)
  400d50:	4798      	blx	r3
}
  400d52:	2000      	movs	r0, #0
  400d54:	bd10      	pop	{r4, pc}
  400d56:	bf00      	nop
  400d58:	004060d0 	.word	0x004060d0
  400d5c:	00400d65 	.word	0x00400d65
  400d60:	00401751 	.word	0x00401751

00400d64 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
  400d64:	b900      	cbnz	r0, 400d68 <assert+0x4>
		__asm("BKPT #0");
  400d66:	be00      	bkpt	0x0000
  400d68:	4770      	bx	lr
	...

00400d6c <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
  400d6c:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
  400d6e:	4a06      	ldr	r2, [pc, #24]	; (400d88 <_sbrk+0x1c>)
  400d70:	6812      	ldr	r2, [r2, #0]
  400d72:	b122      	cbz	r2, 400d7e <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  400d74:	4a04      	ldr	r2, [pc, #16]	; (400d88 <_sbrk+0x1c>)
  400d76:	6810      	ldr	r0, [r2, #0]

	heap += incr;
  400d78:	4403      	add	r3, r0
  400d7a:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
  400d7c:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  400d7e:	4903      	ldr	r1, [pc, #12]	; (400d8c <_sbrk+0x20>)
  400d80:	4a01      	ldr	r2, [pc, #4]	; (400d88 <_sbrk+0x1c>)
  400d82:	6011      	str	r1, [r2, #0]
  400d84:	e7f6      	b.n	400d74 <_sbrk+0x8>
  400d86:	bf00      	nop
  400d88:	20400208 	.word	0x20400208
  400d8c:	204008e0 	.word	0x204008e0

00400d90 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
  400d90:	f04f 30ff 	mov.w	r0, #4294967295
  400d94:	4770      	bx	lr

00400d96 <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
  400d96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  400d9a:	604b      	str	r3, [r1, #4]

	return 0;
}
  400d9c:	2000      	movs	r0, #0
  400d9e:	4770      	bx	lr

00400da0 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
  400da0:	2001      	movs	r0, #1
  400da2:	4770      	bx	lr

00400da4 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
  400da4:	2000      	movs	r0, #0
  400da6:	4770      	bx	lr

00400da8 <_afec_init>:
 */
static int32_t _afec_init(void *const hw, const uint8_t i)
{
	uint8_t cnt;

	hri_afec_write_MR_reg(hw, _afecs[i].mr);
  400da8:	2364      	movs	r3, #100	; 0x64
  400daa:	4a1d      	ldr	r2, [pc, #116]	; (400e20 <_afec_init+0x78>)
  400dac:	fb03 2301 	mla	r3, r3, r1, r2
  400db0:	685a      	ldr	r2, [r3, #4]
}

static inline void hri_afec_write_MR_reg(const void *const hw, hri_afec_mr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_MR = data;
  400db2:	6042      	str	r2, [r0, #4]
	hri_afec_write_EMR_reg(hw, _afecs[i].emr);
  400db4:	689a      	ldr	r2, [r3, #8]
}

static inline void hri_afec_write_EMR_reg(const void *const hw, hri_afec_emr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_EMR = data;
  400db6:	6082      	str	r2, [r0, #8]
	hri_afec_write_SEQ1R_reg(hw, _afecs[i].seq1r);
  400db8:	68da      	ldr	r2, [r3, #12]
}

static inline void hri_afec_write_SEQ1R_reg(const void *const hw, hri_afec_seq1r_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SEQ1R = data;
  400dba:	60c2      	str	r2, [r0, #12]
	hri_afec_write_SEQ2R_reg(hw, _afecs[i].seq2r);
  400dbc:	691a      	ldr	r2, [r3, #16]
}

static inline void hri_afec_write_SEQ2R_reg(const void *const hw, hri_afec_seq2r_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SEQ2R = data;
  400dbe:	6102      	str	r2, [r0, #16]
	hri_afec_write_CWR_reg(hw, _afecs[i].cwr);
  400dc0:	695a      	ldr	r2, [r3, #20]
}

static inline void hri_afec_write_CWR_reg(const void *const hw, hri_afec_cwr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CWR = data;
  400dc2:	6502      	str	r2, [r0, #80]	; 0x50
	hri_afec_write_CGR_reg(hw, _afecs[i].cgr);
  400dc4:	699a      	ldr	r2, [r3, #24]
}

static inline void hri_afec_write_CGR_reg(const void *const hw, hri_afec_cgr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CGR = data;
  400dc6:	6542      	str	r2, [r0, #84]	; 0x54
	hri_afec_write_DIFFR_reg(hw, _afecs[i].diffr);
  400dc8:	69da      	ldr	r2, [r3, #28]
}

static inline void hri_afec_write_DIFFR_reg(const void *const hw, hri_afec_diffr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_DIFFR = data;
  400dca:	6602      	str	r2, [r0, #96]	; 0x60
	hri_afec_write_ACR_reg(hw, _afecs[i].acr);
  400dcc:	6a1a      	ldr	r2, [r3, #32]
}

static inline void hri_afec_write_ACR_reg(const void *const hw, hri_afec_acr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_ACR = data;
  400dce:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
	hri_afec_write_SHMR_reg(hw, _afecs[i].shmr);
  400dd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
}

static inline void hri_afec_write_SHMR_reg(const void *const hw, hri_afec_shmr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SHMR = data;
  400dd4:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
	hri_afec_write_COSR_reg(hw, _afecs[i].cosr);
  400dd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
}

static inline void hri_afec_write_COSR_reg(const void *const hw, hri_afec_cosr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_COSR = data;
  400dda:	f8c0 20d0 	str.w	r2, [r0, #208]	; 0xd0
	hri_afec_write_CVR_reg(hw, _afecs[i].cvr);
  400dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
}

static inline void hri_afec_write_CVR_reg(const void *const hw, hri_afec_cvr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CVR = data;
  400de0:	f8c0 20d4 	str.w	r2, [r0, #212]	; 0xd4
	hri_afec_write_CECR_reg(hw, _afecs[i].cecr);
  400de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}

static inline void hri_afec_write_CECR_reg(const void *const hw, hri_afec_cecr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CECR = data;
  400de6:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8

	for (cnt = 0; cnt < AFEC_CHANNEL_AMOUNT; cnt++) {
  400dea:	2200      	movs	r2, #0
  400dec:	2a0b      	cmp	r2, #11
  400dee:	d814      	bhi.n	400e1a <_afec_init+0x72>
{
  400df0:	b410      	push	{r4}
	((Afec *)hw)->AFEC_CSELR = data;
  400df2:	6642      	str	r2, [r0, #100]	; 0x64
		hri_afec_write_CSELR_reg(hw, cnt);
		hri_afec_write_COCR_reg(hw, _afecs[i].cocr[cnt]);
  400df4:	eb01 0381 	add.w	r3, r1, r1, lsl #2
  400df8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  400dfc:	4413      	add	r3, r2
  400dfe:	330c      	adds	r3, #12
  400e00:	4c07      	ldr	r4, [pc, #28]	; (400e20 <_afec_init+0x78>)
  400e02:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  400e06:	685b      	ldr	r3, [r3, #4]
	((Afec *)hw)->AFEC_COCR = data;
  400e08:	66c3      	str	r3, [r0, #108]	; 0x6c
	for (cnt = 0; cnt < AFEC_CHANNEL_AMOUNT; cnt++) {
  400e0a:	3201      	adds	r2, #1
  400e0c:	b2d2      	uxtb	r2, r2
  400e0e:	2a0b      	cmp	r2, #11
  400e10:	d9ef      	bls.n	400df2 <_afec_init+0x4a>
	}

	return ERR_NONE;
}
  400e12:	2000      	movs	r0, #0
  400e14:	f85d 4b04 	ldr.w	r4, [sp], #4
  400e18:	4770      	bx	lr
  400e1a:	2000      	movs	r0, #0
  400e1c:	4770      	bx	lr
  400e1e:	bf00      	nop
  400e20:	004060ec 	.word	0x004060ec

00400e24 <_afec_get_hardware_index>:
{
  400e24:	b508      	push	{r3, lr}
	if (hw == AFEC0) {
  400e26:	4b09      	ldr	r3, [pc, #36]	; (400e4c <_afec_get_hardware_index+0x28>)
  400e28:	4298      	cmp	r0, r3
  400e2a:	d00a      	beq.n	400e42 <_afec_get_hardware_index+0x1e>
	} else if (hw == AFEC1) {
  400e2c:	f503 3320 	add.w	r3, r3, #163840	; 0x28000
  400e30:	4298      	cmp	r0, r3
  400e32:	d008      	beq.n	400e46 <_afec_get_hardware_index+0x22>
	ASSERT(false);
  400e34:	22a3      	movs	r2, #163	; 0xa3
  400e36:	4906      	ldr	r1, [pc, #24]	; (400e50 <_afec_get_hardware_index+0x2c>)
  400e38:	2000      	movs	r0, #0
  400e3a:	4b06      	ldr	r3, [pc, #24]	; (400e54 <_afec_get_hardware_index+0x30>)
  400e3c:	4798      	blx	r3
	return 0;
  400e3e:	2000      	movs	r0, #0
  400e40:	bd08      	pop	{r3, pc}
		return 0;
  400e42:	2000      	movs	r0, #0
  400e44:	bd08      	pop	{r3, pc}
		return 1;
  400e46:	2001      	movs	r0, #1
}
  400e48:	bd08      	pop	{r3, pc}
  400e4a:	bf00      	nop
  400e4c:	4003c000 	.word	0x4003c000
  400e50:	004061b4 	.word	0x004061b4
  400e54:	00400d65 	.word	0x00400d65

00400e58 <_afec_get_regs>:
{
  400e58:	b508      	push	{r3, lr}
	uint8_t n = _afec_get_hardware_index((const void *)hw_addr);
  400e5a:	4b09      	ldr	r3, [pc, #36]	; (400e80 <_afec_get_regs+0x28>)
  400e5c:	4798      	blx	r3
	for (i = 0; i < sizeof(_afecs) / sizeof(struct afec_configuration); i++) {
  400e5e:	2300      	movs	r3, #0
  400e60:	2b01      	cmp	r3, #1
  400e62:	d809      	bhi.n	400e78 <_afec_get_regs+0x20>
		if (_afecs[i].number == n) {
  400e64:	2264      	movs	r2, #100	; 0x64
  400e66:	fb02 f203 	mul.w	r2, r2, r3
  400e6a:	4906      	ldr	r1, [pc, #24]	; (400e84 <_afec_get_regs+0x2c>)
  400e6c:	5c8a      	ldrb	r2, [r1, r2]
  400e6e:	4290      	cmp	r0, r2
  400e70:	d003      	beq.n	400e7a <_afec_get_regs+0x22>
	for (i = 0; i < sizeof(_afecs) / sizeof(struct afec_configuration); i++) {
  400e72:	3301      	adds	r3, #1
  400e74:	b2db      	uxtb	r3, r3
  400e76:	e7f3      	b.n	400e60 <_afec_get_regs+0x8>
	return 0;
  400e78:	2300      	movs	r3, #0
}
  400e7a:	4618      	mov	r0, r3
  400e7c:	bd08      	pop	{r3, pc}
  400e7e:	bf00      	nop
  400e80:	00400e25 	.word	0x00400e25
  400e84:	004060ec 	.word	0x004060ec

00400e88 <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
  400e88:	b538      	push	{r3, r4, r5, lr}
  400e8a:	460c      	mov	r4, r1
	ASSERT(device);
  400e8c:	4605      	mov	r5, r0
  400e8e:	f44f 728d 	mov.w	r2, #282	; 0x11a
  400e92:	4907      	ldr	r1, [pc, #28]	; (400eb0 <_adc_sync_init+0x28>)
  400e94:	3000      	adds	r0, #0
  400e96:	bf18      	it	ne
  400e98:	2001      	movne	r0, #1
  400e9a:	4b06      	ldr	r3, [pc, #24]	; (400eb4 <_adc_sync_init+0x2c>)
  400e9c:	4798      	blx	r3

	device->hw = hw;
  400e9e:	602c      	str	r4, [r5, #0]

	return _afec_init(hw, _afec_get_regs((uint32_t)hw));
  400ea0:	4620      	mov	r0, r4
  400ea2:	4b05      	ldr	r3, [pc, #20]	; (400eb8 <_adc_sync_init+0x30>)
  400ea4:	4798      	blx	r3
  400ea6:	4601      	mov	r1, r0
  400ea8:	4620      	mov	r0, r4
  400eaa:	4b04      	ldr	r3, [pc, #16]	; (400ebc <_adc_sync_init+0x34>)
  400eac:	4798      	blx	r3
}
  400eae:	bd38      	pop	{r3, r4, r5, pc}
  400eb0:	004061b4 	.word	0x004061b4
  400eb4:	00400d65 	.word	0x00400d65
  400eb8:	00400e59 	.word	0x00400e59
  400ebc:	00400da9 	.word	0x00400da9

00400ec0 <_adc_sync_enable_channel>:
/**
 * \brief Enable ADC
 */
void _adc_sync_enable_channel(struct _adc_sync_device *const device, const uint8_t channel)
{
	hri_afec_set_CHSR_reg(device->hw, (1 << channel));
  400ec0:	6802      	ldr	r2, [r0, #0]
  400ec2:	2301      	movs	r3, #1
  400ec4:	fa03 f101 	lsl.w	r1, r3, r1
	((Afec *)hw)->AFEC_CHER = mask;
  400ec8:	6151      	str	r1, [r2, #20]
  400eca:	4770      	bx	lr

00400ecc <_adc_sync_get_data_size>:
uint8_t _adc_sync_get_data_size(const struct _adc_sync_device *const device)
{
	(void)device;

	return 2;
}
  400ecc:	2002      	movs	r0, #2
  400ece:	4770      	bx	lr

00400ed0 <_adc_sync_is_channel_conversion_done>:
/**
 * \brief Check if conversion is done
 */
bool _adc_sync_is_channel_conversion_done(const struct _adc_sync_device *const device, const uint8_t channel)
{
	return hri_afec_get_ISR_reg(device->hw, (1 << channel));
  400ed0:	6802      	ldr	r2, [r0, #0]
  400ed2:	2301      	movs	r3, #1
  400ed4:	fa03 f101 	lsl.w	r1, r3, r1
	tmp = ((Afec *)hw)->AFEC_ISR;
  400ed8:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400eda:	4219      	tst	r1, r3
}
  400edc:	bf14      	ite	ne
  400ede:	2001      	movne	r0, #1
  400ee0:	2000      	moveq	r0, #0
  400ee2:	4770      	bx	lr

00400ee4 <_adc_sync_convert>:
/**
 * \brief Make conversion
 */
void _adc_sync_convert(struct _adc_sync_device *const device)
{
	hri_afec_write_CR_reg(device->hw, AFEC_CR_START);
  400ee4:	6803      	ldr	r3, [r0, #0]
}

static inline void hri_afec_write_CR_reg(const void *const hw, hri_afec_cr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CR = data;
  400ee6:	2202      	movs	r2, #2
  400ee8:	601a      	str	r2, [r3, #0]
  400eea:	4770      	bx	lr

00400eec <_adc_sync_read_channel_data>:
/**
 * \brief Retrieve the conversion result
 */
uint16_t _adc_sync_read_channel_data(const struct _adc_sync_device *const device, const uint8_t channel)
{
	hri_afec_write_CSELR_reg(device->hw, channel);
  400eec:	6803      	ldr	r3, [r0, #0]
	((Afec *)hw)->AFEC_CSELR = data;
  400eee:	6659      	str	r1, [r3, #100]	; 0x64

	return hri_afec_read_CDR_reg(device->hw);
  400ef0:	6803      	ldr	r3, [r0, #0]
	return ((Afec *)hw)->AFEC_CDR;
  400ef2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400ef4:	b280      	uxth	r0, r0
  400ef6:	4770      	bx	lr

00400ef8 <_get_cycles_for_us>:
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
	return _get_cycles_for_us_internal(us, CONF_HCLK_FREQUENCY, HCLK_FREQ_POWER);
}
  400ef8:	f44f 7396 	mov.w	r3, #300	; 0x12c
  400efc:	fb03 f000 	mul.w	r0, r3, r0
  400f00:	4770      	bx	lr

00400f02 <_get_cycles_for_ms>:
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (ms * (freq / 1000000)) * 1000;
  400f02:	f44f 7396 	mov.w	r3, #300	; 0x12c
  400f06:	fb03 f000 	mul.w	r0, r3, r0
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_HCLK_FREQUENCY, HCLK_FREQ_POWER);
}
  400f0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  400f0e:	fb03 f000 	mul.w	r0, r3, r0
  400f12:	4770      	bx	lr

00400f14 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
  400f14:	b500      	push	{lr}
  400f16:	b083      	sub	sp, #12
/**
 * \brief Enable FPU
 */
static inline void _fpu_enable(void)
{
	CRITICAL_SECTION_ENTER()
  400f18:	a801      	add	r0, sp, #4
  400f1a:	4b0e      	ldr	r3, [pc, #56]	; (400f54 <_init_chip+0x40>)
  400f1c:	4798      	blx	r3
	/** Set bits 20-23 to enable CP10 and CP11 coprocessors */
	SCB->CPACR |= (0xFu << 20);
  400f1e:	4a0e      	ldr	r2, [pc, #56]	; (400f58 <_init_chip+0x44>)
  400f20:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
  400f24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400f28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
  400f2c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400f30:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	CRITICAL_SECTION_LEAVE()
  400f34:	a801      	add	r0, sp, #4
  400f36:	4b09      	ldr	r3, [pc, #36]	; (400f5c <_init_chip+0x48>)
  400f38:	4798      	blx	r3

static inline void hri_efc_write_EEFC_FMR_FWS_bf(const void *const hw, hri_efc_eefc_fmr_reg_t data)
{
	uint32_t tmp;
	EFC_CRITICAL_SECTION_ENTER();
	tmp = ((Efc *)hw)->EEFC_FMR;
  400f3a:	4a09      	ldr	r2, [pc, #36]	; (400f60 <_init_chip+0x4c>)
  400f3c:	6813      	ldr	r3, [r2, #0]
	tmp &= ~EEFC_FMR_FWS_Msk;
  400f3e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
	tmp |= EEFC_FMR_FWS(data);
  400f42:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
	((Efc *)hw)->EEFC_FMR = tmp;
  400f46:	6013      	str	r3, [r2, #0]
#if CONF_DMA_ENABLE
	_pmc_enable_periph_clock(ID_XDMAC);
	_dma_init();

#endif
	_pmc_init();
  400f48:	4b06      	ldr	r3, [pc, #24]	; (400f64 <_init_chip+0x50>)
  400f4a:	4798      	blx	r3
}
  400f4c:	b003      	add	sp, #12
  400f4e:	f85d fb04 	ldr.w	pc, [sp], #4
  400f52:	bf00      	nop
  400f54:	00400a15 	.word	0x00400a15
  400f58:	e000ed00 	.word	0xe000ed00
  400f5c:	00400a23 	.word	0x00400a23
  400f60:	400e0c00 	.word	0x400e0c00
  400f64:	004012e9 	.word	0x004012e9

00400f68 <_can_irq_handler>:
 * \brief CAN interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _can_irq_handler(struct _can_async_device *dev)
{
  400f68:	b538      	push	{r3, r4, r5, lr}
  400f6a:	4605      	mov	r5, r0
	uint32_t ir;
	ir = hri_mcan_read_IR_reg(dev->hw);
  400f6c:	6803      	ldr	r3, [r0, #0]
	MCAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_mcan_ir_reg_t hri_mcan_read_IR_reg(const void *const hw)
{
	return ((Mcan *)hw)->MCAN_IR;
  400f6e:	6d1c      	ldr	r4, [r3, #80]	; 0x50

	if (ir & MCAN_IR_RF0N) {
  400f70:	f014 0f01 	tst.w	r4, #1
  400f74:	d11a      	bne.n	400fac <_can_irq_handler+0x44>
		dev->cb.rx_done(dev);
	}

	if (ir & MCAN_IR_TC) {
  400f76:	f414 7f00 	tst.w	r4, #512	; 0x200
  400f7a:	d11a      	bne.n	400fb2 <_can_irq_handler+0x4a>
		dev->cb.tx_done(dev);
	}

	if (ir & MCAN_IR_BO) {
  400f7c:	f014 7f00 	tst.w	r4, #33554432	; 0x2000000
  400f80:	d11b      	bne.n	400fba <_can_irq_handler+0x52>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
	}

	if (ir & MCAN_IR_EW) {
  400f82:	f014 7f80 	tst.w	r4, #16777216	; 0x1000000
  400f86:	d11d      	bne.n	400fc4 <_can_irq_handler+0x5c>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
	}

	if (ir & MCAN_IR_EP) {
  400f88:	f414 0f00 	tst.w	r4, #8388608	; 0x800000
  400f8c:	d008      	beq.n	400fa0 <_can_irq_handler+0x38>
		dev->cb.irq_handler(dev, hri_mcan_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
  400f8e:	68eb      	ldr	r3, [r5, #12]
  400f90:	682a      	ldr	r2, [r5, #0]
	return (((Mcan *)hw)->MCAN_PSR & MCAN_PSR_EP) > 0;
  400f92:	6c52      	ldr	r2, [r2, #68]	; 0x44
  400f94:	f012 0f20 	tst.w	r2, #32
  400f98:	d019      	beq.n	400fce <_can_irq_handler+0x66>
  400f9a:	2102      	movs	r1, #2
  400f9c:	4628      	mov	r0, r5
  400f9e:	4798      	blx	r3
	}

	if (ir & MCAN_IR_RF0L) {
  400fa0:	f014 0f08 	tst.w	r4, #8
  400fa4:	d115      	bne.n	400fd2 <_can_irq_handler+0x6a>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
	}

	hri_mcan_write_IR_reg(dev->hw, ir);
  400fa6:	682b      	ldr	r3, [r5, #0]
	((Mcan *)hw)->MCAN_IR = data;
  400fa8:	651c      	str	r4, [r3, #80]	; 0x50
  400faa:	bd38      	pop	{r3, r4, r5, pc}
		dev->cb.rx_done(dev);
  400fac:	6883      	ldr	r3, [r0, #8]
  400fae:	4798      	blx	r3
  400fb0:	e7e1      	b.n	400f76 <_can_irq_handler+0xe>
		dev->cb.tx_done(dev);
  400fb2:	686b      	ldr	r3, [r5, #4]
  400fb4:	4628      	mov	r0, r5
  400fb6:	4798      	blx	r3
  400fb8:	e7e0      	b.n	400f7c <_can_irq_handler+0x14>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
  400fba:	68eb      	ldr	r3, [r5, #12]
  400fbc:	2103      	movs	r1, #3
  400fbe:	4628      	mov	r0, r5
  400fc0:	4798      	blx	r3
  400fc2:	e7de      	b.n	400f82 <_can_irq_handler+0x1a>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
  400fc4:	68eb      	ldr	r3, [r5, #12]
  400fc6:	2100      	movs	r1, #0
  400fc8:	4628      	mov	r0, r5
  400fca:	4798      	blx	r3
  400fcc:	e7dc      	b.n	400f88 <_can_irq_handler+0x20>
		dev->cb.irq_handler(dev, hri_mcan_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
  400fce:	2101      	movs	r1, #1
  400fd0:	e7e4      	b.n	400f9c <_can_irq_handler+0x34>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
  400fd2:	68eb      	ldr	r3, [r5, #12]
  400fd4:	2104      	movs	r1, #4
  400fd6:	4628      	mov	r0, r5
  400fd8:	4798      	blx	r3
  400fda:	e7e4      	b.n	400fa6 <_can_irq_handler+0x3e>

00400fdc <MCAN1_INT0_Handler>:

/**
 * \internal CAN interrupt handler
 */
void MCAN1_INT0_Handler(void)
{
  400fdc:	b508      	push	{r3, lr}
	_can_irq_handler(_can1_dev);
  400fde:	4b02      	ldr	r3, [pc, #8]	; (400fe8 <MCAN1_INT0_Handler+0xc>)
  400fe0:	6a98      	ldr	r0, [r3, #40]	; 0x28
  400fe2:	4b02      	ldr	r3, [pc, #8]	; (400fec <MCAN1_INT0_Handler+0x10>)
  400fe4:	4798      	blx	r3
  400fe6:	bd08      	pop	{r3, pc}
  400fe8:	2040020c 	.word	0x2040020c
  400fec:	00400f69 	.word	0x00400f69

00400ff0 <_ffs>:
};
#endif

/* Find the first bit set */
static int _ffs(uint32_t *v, uint8_t len)
{
  400ff0:	b430      	push	{r4, r5}
	uint32_t i, j, bit;

	for (i = 0; i < len; i++) {
  400ff2:	2500      	movs	r5, #0
  400ff4:	428d      	cmp	r5, r1
  400ff6:	d210      	bcs.n	40101a <_ffs+0x2a>
  400ff8:	2201      	movs	r2, #1
  400ffa:	2300      	movs	r3, #0
		bit = 1;
		for (j = 0; j < sizeof(uint32_t) * 8; j++) {
  400ffc:	2b1f      	cmp	r3, #31
  400ffe:	d80a      	bhi.n	401016 <_ffs+0x26>
			if (v[i] & bit) {
  401000:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
  401004:	4222      	tst	r2, r4
  401006:	d102      	bne.n	40100e <_ffs+0x1e>
				return i * 32 + j;
			}
			bit <<= 1;
  401008:	0052      	lsls	r2, r2, #1
		for (j = 0; j < sizeof(uint32_t) * 8; j++) {
  40100a:	3301      	adds	r3, #1
  40100c:	e7f6      	b.n	400ffc <_ffs+0xc>
				return i * 32 + j;
  40100e:	eb03 1045 	add.w	r0, r3, r5, lsl #5
		}
	}

	return -1;
}
  401012:	bc30      	pop	{r4, r5}
  401014:	4770      	bx	lr
	for (i = 0; i < len; i++) {
  401016:	3501      	adds	r5, #1
  401018:	e7ec      	b.n	400ff4 <_ffs+0x4>
	return -1;
  40101a:	f04f 30ff 	mov.w	r0, #4294967295
  40101e:	e7f8      	b.n	401012 <_ffs+0x22>

00401020 <_ext_irq_handler>:

/**
 * \brief External interrupt handler
 */
static void _ext_irq_handler(void)
{
  401020:	b510      	push	{r4, lr}
  401022:	b086      	sub	sp, #24
	uint32_t flag_total = 0, flags[5] = {
  401024:	2300      	movs	r3, #0
  401026:	9301      	str	r3, [sp, #4]
  401028:	9302      	str	r3, [sp, #8]
  40102a:	9303      	str	r3, [sp, #12]
  40102c:	9304      	str	r3, [sp, #16]
  40102e:	9305      	str	r3, [sp, #20]
	                             0,
	                         };
	int pos;

	ASSERT(callback);
  401030:	4b21      	ldr	r3, [pc, #132]	; (4010b8 <_ext_irq_handler+0x98>)
  401032:	6818      	ldr	r0, [r3, #0]
  401034:	22f8      	movs	r2, #248	; 0xf8
  401036:	4921      	ldr	r1, [pc, #132]	; (4010bc <_ext_irq_handler+0x9c>)
  401038:	3000      	adds	r0, #0
  40103a:	bf18      	it	ne
  40103c:	2001      	movne	r0, #1
  40103e:	4b20      	ldr	r3, [pc, #128]	; (4010c0 <_ext_irq_handler+0xa0>)
  401040:	4798      	blx	r3
	return ((Pio *)hw)->PIO_ISR;
  401042:	4b20      	ldr	r3, [pc, #128]	; (4010c4 <_ext_irq_handler+0xa4>)
  401044:	6cda      	ldr	r2, [r3, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  401046:	6c9b      	ldr	r3, [r3, #72]	; 0x48

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
	flags[0] = hri_pio_read_ISR_reg(PIOA);
	flags[0] &= hri_pio_read_IMR_reg(PIOA);
  401048:	4013      	ands	r3, r2
  40104a:	9301      	str	r3, [sp, #4]
	return ((Pio *)hw)->PIO_ISR;
  40104c:	491e      	ldr	r1, [pc, #120]	; (4010c8 <_ext_irq_handler+0xa8>)
  40104e:	6cca      	ldr	r2, [r1, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  401050:	6c89      	ldr	r1, [r1, #72]	; 0x48
	flag_total |= flags[2];
#endif

#if CONF_EXTIRQ_3_ENABLE == 1 && defined(PIOD)
	flags[3] = hri_pio_read_ISR_reg(PIOD);
	flags[3] &= hri_pio_read_IMR_reg(PIOD);
  401052:	400a      	ands	r2, r1
  401054:	9204      	str	r2, [sp, #16]
	flag_total |= flags[3];
  401056:	4313      	orrs	r3, r2
	flags[4] = hri_pio_read_ISR_reg(PIOE);
	flags[4] &= hri_pio_read_IMR_reg(PIOE);
	flag_total |= flags[4];
#endif

	while (flag_total) {
  401058:	e025      	b.n	4010a6 <_ext_irq_handler+0x86>
		pos = _ffs(flags, 5);
		while (-1 != pos) {
			callback(pos);
  40105a:	4b17      	ldr	r3, [pc, #92]	; (4010b8 <_ext_irq_handler+0x98>)
  40105c:	681b      	ldr	r3, [r3, #0]
  40105e:	4620      	mov	r0, r4
  401060:	4798      	blx	r3

			flags[pos >> 5] &= ~(1 << (pos & 31));
  401062:	1163      	asrs	r3, r4, #5
  401064:	f004 041f 	and.w	r4, r4, #31
  401068:	2201      	movs	r2, #1
  40106a:	fa02 f404 	lsl.w	r4, r2, r4
  40106e:	aa06      	add	r2, sp, #24
  401070:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401074:	f853 2c14 	ldr.w	r2, [r3, #-20]
  401078:	ea22 0204 	bic.w	r2, r2, r4
  40107c:	f843 2c14 	str.w	r2, [r3, #-20]
			pos = _ffs(flags, 5);
  401080:	2105      	movs	r1, #5
  401082:	a801      	add	r0, sp, #4
  401084:	4b11      	ldr	r3, [pc, #68]	; (4010cc <_ext_irq_handler+0xac>)
  401086:	4798      	blx	r3
  401088:	4604      	mov	r4, r0
		while (-1 != pos) {
  40108a:	f1b4 3fff 	cmp.w	r4, #4294967295
  40108e:	d1e4      	bne.n	40105a <_ext_irq_handler+0x3a>
	return ((Pio *)hw)->PIO_ISR;
  401090:	4a0c      	ldr	r2, [pc, #48]	; (4010c4 <_ext_irq_handler+0xa4>)
  401092:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  401094:	6c93      	ldr	r3, [r2, #72]	; 0x48
		}
		flag_total = 0;

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
		flags[0] = hri_pio_read_ISR_reg(PIOA);
		flags[0] &= hri_pio_read_IMR_reg(PIOA);
  401096:	400b      	ands	r3, r1
  401098:	9301      	str	r3, [sp, #4]
	return ((Pio *)hw)->PIO_ISR;
  40109a:	490b      	ldr	r1, [pc, #44]	; (4010c8 <_ext_irq_handler+0xa8>)
  40109c:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  40109e:	6c8a      	ldr	r2, [r1, #72]	; 0x48
		flag_total |= flags[2];
#endif

#if CONF_EXTIRQ_3_ENABLE == 1 && defined(PIOD)
		flags[3] = hri_pio_read_ISR_reg(PIOD);
		flags[3] &= hri_pio_read_IMR_reg(PIOD);
  4010a0:	4002      	ands	r2, r0
  4010a2:	9204      	str	r2, [sp, #16]
		flag_total |= flags[3];
  4010a4:	4313      	orrs	r3, r2
	while (flag_total) {
  4010a6:	b12b      	cbz	r3, 4010b4 <_ext_irq_handler+0x94>
		pos = _ffs(flags, 5);
  4010a8:	2105      	movs	r1, #5
  4010aa:	a801      	add	r0, sp, #4
  4010ac:	4b07      	ldr	r3, [pc, #28]	; (4010cc <_ext_irq_handler+0xac>)
  4010ae:	4798      	blx	r3
  4010b0:	4604      	mov	r4, r0
		while (-1 != pos) {
  4010b2:	e7ea      	b.n	40108a <_ext_irq_handler+0x6a>
		flags[4] = hri_pio_read_ISR_reg(PIOE);
		flags[4] &= hri_pio_read_IMR_reg(PIOE);
		flag_total |= flags[4];
#endif
	}
}
  4010b4:	b006      	add	sp, #24
  4010b6:	bd10      	pop	{r4, pc}
  4010b8:	20400238 	.word	0x20400238
  4010bc:	0040620c 	.word	0x0040620c
  4010c0:	00400d65 	.word	0x00400d65
  4010c4:	400e0e00 	.word	0x400e0e00
  4010c8:	400e1400 	.word	0x400e1400
  4010cc:	00400ff1 	.word	0x00400ff1

004010d0 <_pio_get_hardware_index>:
{
  4010d0:	b510      	push	{r4, lr}
	ASSERT(hw);
  4010d2:	4604      	mov	r4, r0
  4010d4:	22d2      	movs	r2, #210	; 0xd2
  4010d6:	4905      	ldr	r1, [pc, #20]	; (4010ec <_pio_get_hardware_index+0x1c>)
  4010d8:	3000      	adds	r0, #0
  4010da:	bf18      	it	ne
  4010dc:	2001      	movne	r0, #1
  4010de:	4b04      	ldr	r3, [pc, #16]	; (4010f0 <_pio_get_hardware_index+0x20>)
  4010e0:	4798      	blx	r3
	return ((uint32_t)hw - (uint32_t)PIOA) >> 9;
  4010e2:	4804      	ldr	r0, [pc, #16]	; (4010f4 <_pio_get_hardware_index+0x24>)
  4010e4:	4420      	add	r0, r4
}
  4010e6:	f3c0 2047 	ubfx	r0, r0, #9, #8
  4010ea:	bd10      	pop	{r4, pc}
  4010ec:	0040620c 	.word	0x0040620c
  4010f0:	00400d65 	.word	0x00400d65
  4010f4:	bff1f200 	.word	0xbff1f200

004010f8 <_pio_get_index>:
{
  4010f8:	b510      	push	{r4, lr}
	ASSERT(hw);
  4010fa:	4604      	mov	r4, r0
  4010fc:	22e0      	movs	r2, #224	; 0xe0
  4010fe:	490d      	ldr	r1, [pc, #52]	; (401134 <_pio_get_index+0x3c>)
  401100:	3000      	adds	r0, #0
  401102:	bf18      	it	ne
  401104:	2001      	movne	r0, #1
  401106:	4b0c      	ldr	r3, [pc, #48]	; (401138 <_pio_get_index+0x40>)
  401108:	4798      	blx	r3
	uint8_t offset = _pio_get_hardware_index(hw);
  40110a:	4620      	mov	r0, r4
  40110c:	4b0b      	ldr	r3, [pc, #44]	; (40113c <_pio_get_index+0x44>)
  40110e:	4798      	blx	r3
	for (i = 0; i < ARRAY_SIZE(_ext_irq); i++) {
  401110:	2300      	movs	r3, #0
  401112:	2b01      	cmp	r3, #1
  401114:	d80b      	bhi.n	40112e <_pio_get_index+0x36>
		if (_ext_irq[i].number == offset) {
  401116:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
  40111a:	008a      	lsls	r2, r1, #2
  40111c:	4908      	ldr	r1, [pc, #32]	; (401140 <_pio_get_index+0x48>)
  40111e:	5c8a      	ldrb	r2, [r1, r2]
  401120:	4290      	cmp	r0, r2
  401122:	d002      	beq.n	40112a <_pio_get_index+0x32>
	for (i = 0; i < ARRAY_SIZE(_ext_irq); i++) {
  401124:	3301      	adds	r3, #1
  401126:	b2db      	uxtb	r3, r3
  401128:	e7f3      	b.n	401112 <_pio_get_index+0x1a>
			return i;
  40112a:	b258      	sxtb	r0, r3
  40112c:	bd10      	pop	{r4, pc}
	return ERR_INVALID_DATA;
  40112e:	f04f 30ff 	mov.w	r0, #4294967295
}
  401132:	bd10      	pop	{r4, pc}
  401134:	0040620c 	.word	0x0040620c
  401138:	00400d65 	.word	0x00400d65
  40113c:	004010d1 	.word	0x004010d1
  401140:	004061cc 	.word	0x004061cc

00401144 <_pio_init>:
 * \return The status of instance initial
 * \retval ERR_NONE Initial status OK
 * \retval ERR_DENIED No need to initial
 */
static int32_t _pio_init(void *const hw)
{
  401144:	b538      	push	{r3, r4, r5, lr}
	int8_t i;

	ASSERT(hw);
  401146:	4604      	mov	r4, r0
  401148:	f240 1259 	movw	r2, #345	; 0x159
  40114c:	4929      	ldr	r1, [pc, #164]	; (4011f4 <_pio_init+0xb0>)
  40114e:	3000      	adds	r0, #0
  401150:	bf18      	it	ne
  401152:	2001      	movne	r0, #1
  401154:	4b28      	ldr	r3, [pc, #160]	; (4011f8 <_pio_init+0xb4>)
  401156:	4798      	blx	r3

	i = _pio_get_index(hw);
  401158:	4620      	mov	r0, r4
  40115a:	4b28      	ldr	r3, [pc, #160]	; (4011fc <_pio_init+0xb8>)
  40115c:	4798      	blx	r3
	if (i < 0) {
  40115e:	2800      	cmp	r0, #0
  401160:	db43      	blt.n	4011ea <_pio_init+0xa6>
		return ERR_DENIED;
	}

	hri_pio_set_AIMMR_reg(hw, _ext_irq[i].add_irq_enable);
  401162:	4d27      	ldr	r5, [pc, #156]	; (401200 <_pio_init+0xbc>)
  401164:	00c2      	lsls	r2, r0, #3
  401166:	1a11      	subs	r1, r2, r0
  401168:	008b      	lsls	r3, r1, #2
  40116a:	442b      	add	r3, r5
  40116c:	6899      	ldr	r1, [r3, #8]
	((Pio *)hw)->PIO_AIMER = mask;
  40116e:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
	hri_pio_clear_ELSR_reg(hw, _ext_irq[i].esr);
  401172:	68d9      	ldr	r1, [r3, #12]
	((Pio *)hw)->PIO_ESR = mask;
  401174:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
	hri_pio_set_ELSR_reg(hw, _ext_irq[i].lsr);
  401178:	6919      	ldr	r1, [r3, #16]
	((Pio *)hw)->PIO_LSR = mask;
  40117a:	f8c4 10c4 	str.w	r1, [r4, #196]	; 0xc4
	hri_pio_clear_FRLHSR_reg(hw, _ext_irq[i].fellsr);
  40117e:	699b      	ldr	r3, [r3, #24]
	((Pio *)hw)->PIO_FELLSR = mask;
  401180:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	hri_pio_set_FRLHSR_reg(hw, _ext_irq[i].rehlsr);
  401184:	1a10      	subs	r0, r2, r0
  401186:	0083      	lsls	r3, r0, #2
  401188:	442b      	add	r3, r5
  40118a:	695b      	ldr	r3, [r3, #20]
	((Pio *)hw)->PIO_REHLSR = mask;
  40118c:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4

	i = _pio_irq_n[_pio_get_hardware_index(hw)];
  401190:	4620      	mov	r0, r4
  401192:	4b1c      	ldr	r3, [pc, #112]	; (401204 <_pio_init+0xc0>)
  401194:	4798      	blx	r3
  401196:	4428      	add	r0, r5
  401198:	f990 3038 	ldrsb.w	r3, [r0, #56]	; 0x38
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  40119c:	2b00      	cmp	r3, #0
  40119e:	db0c      	blt.n	4011ba <_pio_init+0x76>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4011a0:	095a      	lsrs	r2, r3, #5
  4011a2:	f003 001f 	and.w	r0, r3, #31
  4011a6:	2101      	movs	r1, #1
  4011a8:	4081      	lsls	r1, r0
  4011aa:	3220      	adds	r2, #32
  4011ac:	4816      	ldr	r0, [pc, #88]	; (401208 <_pio_init+0xc4>)
  4011ae:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  4011b2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4011b6:	f3bf 8f6f 	isb	sy
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  4011ba:	2b00      	cmp	r3, #0
  4011bc:	db08      	blt.n	4011d0 <_pio_init+0x8c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4011be:	095a      	lsrs	r2, r3, #5
  4011c0:	f003 001f 	and.w	r0, r3, #31
  4011c4:	2101      	movs	r1, #1
  4011c6:	4081      	lsls	r1, r0
  4011c8:	3260      	adds	r2, #96	; 0x60
  4011ca:	480f      	ldr	r0, [pc, #60]	; (401208 <_pio_init+0xc4>)
  4011cc:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
  if ((int32_t)(IRQn) >= 0)
  4011d0:	2b00      	cmp	r3, #0
  4011d2:	db0d      	blt.n	4011f0 <_pio_init+0xac>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4011d4:	0959      	lsrs	r1, r3, #5
  4011d6:	f003 031f 	and.w	r3, r3, #31
  4011da:	2201      	movs	r2, #1
  4011dc:	fa02 f303 	lsl.w	r3, r2, r3
  4011e0:	4a09      	ldr	r2, [pc, #36]	; (401208 <_pio_init+0xc4>)
  4011e2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	NVIC_DisableIRQ((IRQn_Type)i);
	NVIC_ClearPendingIRQ((IRQn_Type)i);
	NVIC_EnableIRQ((IRQn_Type)i);

	return ERR_NONE;
  4011e6:	2000      	movs	r0, #0
  4011e8:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_DENIED;
  4011ea:	f06f 0010 	mvn.w	r0, #16
  4011ee:	bd38      	pop	{r3, r4, r5, pc}
	return ERR_NONE;
  4011f0:	2000      	movs	r0, #0
}
  4011f2:	bd38      	pop	{r3, r4, r5, pc}
  4011f4:	0040620c 	.word	0x0040620c
  4011f8:	00400d65 	.word	0x00400d65
  4011fc:	004010f9 	.word	0x004010f9
  401200:	004061cc 	.word	0x004061cc
  401204:	004010d1 	.word	0x004010d1
  401208:	e000e100 	.word	0xe000e100

0040120c <PIOD_Handler>:
{
  40120c:	b508      	push	{r3, lr}
	_ext_irq_handler();
  40120e:	4b01      	ldr	r3, [pc, #4]	; (401214 <PIOD_Handler+0x8>)
  401210:	4798      	blx	r3
  401212:	bd08      	pop	{r3, pc}
  401214:	00401021 	.word	0x00401021

00401218 <PIOA_Handler>:
{
  401218:	b508      	push	{r3, lr}
	_ext_irq_handler();
  40121a:	4b01      	ldr	r3, [pc, #4]	; (401220 <PIOA_Handler+0x8>)
  40121c:	4798      	blx	r3
  40121e:	bd08      	pop	{r3, pc}
  401220:	00401021 	.word	0x00401021

00401224 <_ext_irq_init>:

int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
  401224:	b538      	push	{r3, r4, r5, lr}
  401226:	4605      	mov	r5, r0

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
	_pio_init(PIOA);
  401228:	4804      	ldr	r0, [pc, #16]	; (40123c <_ext_irq_init+0x18>)
  40122a:	4c05      	ldr	r4, [pc, #20]	; (401240 <_ext_irq_init+0x1c>)
  40122c:	47a0      	blx	r4
#if CONF_EXTIRQ_2_ENABLE == 1 && defined(PIOC)
	_pio_init(PIOC);
#endif

#if CONF_EXTIRQ_3_ENABLE == 1 && defined(PIOD)
	_pio_init(PIOD);
  40122e:	4805      	ldr	r0, [pc, #20]	; (401244 <_ext_irq_init+0x20>)
  401230:	47a0      	blx	r4

#if CONF_EXTIRQ_4_ENABLE == 1 && defined(PIOE)
	_pio_init(PIOE);
#endif

	callback = cb;
  401232:	4b05      	ldr	r3, [pc, #20]	; (401248 <_ext_irq_init+0x24>)
  401234:	601d      	str	r5, [r3, #0]

	return ERR_NONE;
}
  401236:	2000      	movs	r0, #0
  401238:	bd38      	pop	{r3, r4, r5, pc}
  40123a:	bf00      	nop
  40123c:	400e0e00 	.word	0x400e0e00
  401240:	00401145 	.word	0x00401145
  401244:	400e1400 	.word	0x400e1400
  401248:	20400238 	.word	0x20400238

0040124c <_pmc_init_sources>:
	PMC_CRITICAL_SECTION_LEAVE();
}

static inline hri_pmc_ckgr_mor_reg_t hri_pmc_read_CKGR_MOR_reg(const void *const hw)
{
	return ((Pmc *)hw)->CKGR_MOR;
  40124c:	490e      	ldr	r1, [pc, #56]	; (401288 <_pmc_init_sources+0x3c>)
  40124e:	6a0a      	ldr	r2, [r1, #32]
	/* Enable Main XTAL oscillator */
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTEN;
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY | CKGR_MOR_MOSCSEL;
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
#else
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTBY;
  401250:	f022 0202 	bic.w	r2, r2, #2
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(CONF_XOSC20M_STARTUP_TIME);
  401254:	4b0d      	ldr	r3, [pc, #52]	; (40128c <_pmc_init_sources+0x40>)
  401256:	4313      	orrs	r3, r2
	((Pmc *)hw)->CKGR_MOR = data;
  401258:	620b      	str	r3, [r1, #32]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MOSCXTS) > 0;
  40125a:	4b0b      	ldr	r3, [pc, #44]	; (401288 <_pmc_init_sources+0x3c>)
  40125c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
	while (!hri_pmc_get_SR_MOSCXTS_bit(PMC)) {
  40125e:	f013 0f01 	tst.w	r3, #1
  401262:	d0fa      	beq.n	40125a <_pmc_init_sources+0xe>
	((Pmc *)hw)->CKGR_MOR |= mask;
  401264:	4b08      	ldr	r3, [pc, #32]	; (401288 <_pmc_init_sources+0x3c>)
  401266:	6a19      	ldr	r1, [r3, #32]
  401268:	4a09      	ldr	r2, [pc, #36]	; (401290 <_pmc_init_sources+0x44>)
  40126a:	430a      	orrs	r2, r1
  40126c:	621a      	str	r2, [r3, #32]

static inline void hri_pmc_write_CKGR_PLLAR_MULA_bf(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->CKGR_PLLAR;
  40126e:	6a99      	ldr	r1, [r3, #40]	; 0x28
	tmp &= ~CKGR_PLLAR_MULA_Msk;
  401270:	4a08      	ldr	r2, [pc, #32]	; (401294 <_pmc_init_sources+0x48>)
  401272:	400a      	ands	r2, r1
	tmp |= CKGR_PLLAR_MULA(data);
	((Pmc *)hw)->CKGR_PLLAR = tmp;
  401274:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline void hri_pmc_write_CKGR_PLLAR_reg(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	PMC_CRITICAL_SECTION_ENTER();
	((Pmc *)hw)->CKGR_PLLAR = data;
  401276:	4a08      	ldr	r2, [pc, #32]	; (401298 <_pmc_init_sources+0x4c>)
  401278:	629a      	str	r2, [r3, #40]	; 0x28
	return (((Pmc *)hw)->PMC_SR & PMC_SR_LOCKA) > 0;
  40127a:	4b03      	ldr	r3, [pc, #12]	; (401288 <_pmc_init_sources+0x3c>)
  40127c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
#if (CONF_PLLACK_ENABLE == 1)
	data = CKGR_PLLAR_MULA(CONF_PLLACK_MUL - 1) | CKGR_PLLAR_DIVA(CONF_PLLACK_DIV) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	/* Stop PLL first */
	hri_pmc_write_CKGR_PLLAR_MULA_bf(PMC, 0);
	hri_pmc_write_CKGR_PLLAR_reg(PMC, (CKGR_PLLAR_ONE | data));
	while (!hri_pmc_get_SR_LOCKA_bit(PMC)) {
  40127e:	f013 0f02 	tst.w	r3, #2
  401282:	d0fa      	beq.n	40127a <_pmc_init_sources+0x2e>
#if (CONF_CLK_CFDEN_ENABLE == 1)
	/* Enable main clock failure detection */
	hri_pmc_set_CKGR_MOR_CFDEN_bit(PMC);
#endif
#endif
}
  401284:	4770      	bx	lr
  401286:	bf00      	nop
  401288:	400e0600 	.word	0x400e0600
  40128c:	00373e01 	.word	0x00373e01
  401290:	01370000 	.word	0x01370000
  401294:	f800ffff 	.word	0xf800ffff
  401298:	20183f01 	.word	0x20183f01

0040129c <_pmc_init_master_clock>:

static inline void hri_pmc_write_MCKR_PRES_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  40129c:	4a11      	ldr	r2, [pc, #68]	; (4012e4 <_pmc_init_master_clock+0x48>)
  40129e:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_PRES_Msk;
  4012a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
	tmp |= PMC_MCKR_PRES(data);
	((Pmc *)hw)->PMC_MCKR = tmp;
  4012a4:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  4012a6:	4b0f      	ldr	r3, [pc, #60]	; (4012e4 <_pmc_init_master_clock+0x48>)
  4012a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
		/* Wait until master clock is ready */
	}
#elif ((CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_PLLACK) || (CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_UPLLCKDIV))
	hri_pmc_write_MCKR_PRES_bf(PMC, CONF_MCKR_PRESC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  4012aa:	f013 0f08 	tst.w	r3, #8
  4012ae:	d0fa      	beq.n	4012a6 <_pmc_init_master_clock+0xa>

static inline void hri_pmc_write_MCKR_MDIV_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  4012b0:	4a0c      	ldr	r2, [pc, #48]	; (4012e4 <_pmc_init_master_clock+0x48>)
  4012b2:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_MDIV_Msk;
  4012b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
	tmp |= PMC_MCKR_MDIV(data);
  4012b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	((Pmc *)hw)->PMC_MCKR = tmp;
  4012bc:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  4012be:	4b09      	ldr	r3, [pc, #36]	; (4012e4 <_pmc_init_master_clock+0x48>)
  4012c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_MDIV_bf(PMC, CONF_MCK_DIV);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  4012c2:	f013 0f08 	tst.w	r3, #8
  4012c6:	d0fa      	beq.n	4012be <_pmc_init_master_clock+0x22>
	tmp = ((Pmc *)hw)->PMC_MCKR;
  4012c8:	4a06      	ldr	r2, [pc, #24]	; (4012e4 <_pmc_init_master_clock+0x48>)
  4012ca:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_CSS_Msk;
  4012cc:	f023 0303 	bic.w	r3, r3, #3
	tmp |= PMC_MCKR_CSS(data);
  4012d0:	f043 0302 	orr.w	r3, r3, #2
	((Pmc *)hw)->PMC_MCKR = tmp;
  4012d4:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  4012d6:	4b03      	ldr	r3, [pc, #12]	; (4012e4 <_pmc_init_master_clock+0x48>)
  4012d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_CSS_bf(PMC, CONF_CLK_GEN_MCKR_SRC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  4012da:	f013 0f08 	tst.w	r3, #8
  4012de:	d0fa      	beq.n	4012d6 <_pmc_init_master_clock+0x3a>
		/* Wait until master clock is ready */
	}
#endif
#endif
}
  4012e0:	4770      	bx	lr
  4012e2:	bf00      	nop
  4012e4:	400e0600 	.word	0x400e0600

004012e8 <_pmc_init>:
/**
 * \brief Initializes cortex M7 core clock
 *
 */
void _pmc_init(void)
{
  4012e8:	b508      	push	{r3, lr}
	_pmc_init_sources();
  4012ea:	4b02      	ldr	r3, [pc, #8]	; (4012f4 <_pmc_init+0xc>)
  4012ec:	4798      	blx	r3
	_pmc_init_master_clock();
  4012ee:	4b02      	ldr	r3, [pc, #8]	; (4012f8 <_pmc_init+0x10>)
  4012f0:	4798      	blx	r3
  4012f2:	bd08      	pop	{r3, pc}
  4012f4:	0040124d 	.word	0x0040124d
  4012f8:	0040129d 	.word	0x0040129d

004012fc <_pwm_get_cfg>:
 */
static const struct _pwm_cfg *_pwm_get_cfg(void *const hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_pwms); i++) {
  4012fc:	2300      	movs	r3, #0
  4012fe:	2b01      	cmp	r3, #1
  401300:	d80f      	bhi.n	401322 <_pwm_get_cfg+0x26>
		if (_pwms[i].hw == hw) {
  401302:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
  401306:	008a      	lsls	r2, r1, #2
  401308:	4907      	ldr	r1, [pc, #28]	; (401328 <_pwm_get_cfg+0x2c>)
  40130a:	588a      	ldr	r2, [r1, r2]
  40130c:	4282      	cmp	r2, r0
  40130e:	d002      	beq.n	401316 <_pwm_get_cfg+0x1a>
	for (i = 0; i < ARRAY_SIZE(_pwms); i++) {
  401310:	3301      	adds	r3, #1
  401312:	b2db      	uxtb	r3, r3
  401314:	e7f3      	b.n	4012fe <_pwm_get_cfg+0x2>
			return (_pwms + i);
  401316:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
  40131a:	009a      	lsls	r2, r3, #2
  40131c:	4608      	mov	r0, r1
  40131e:	4410      	add	r0, r2
  401320:	4770      	bx	lr
		}
	}

	return NULL;
  401322:	2000      	movs	r0, #0
}
  401324:	4770      	bx	lr
  401326:	bf00      	nop
  401328:	00406228 	.word	0x00406228

0040132c <_pwm_init_irq_param>:
/**
 * \brief Init irq param with the given pwm hardware instance
 */
static void _pwm_init_irq_param(const void *const hw, struct _pwm_device *dev)
{
	if (hw == PWM0) {
  40132c:	4b06      	ldr	r3, [pc, #24]	; (401348 <_pwm_init_irq_param+0x1c>)
  40132e:	4298      	cmp	r0, r3
  401330:	d003      	beq.n	40133a <_pwm_init_irq_param+0xe>
		_pwm0_dev = dev;
	}
	if (hw == PWM1) {
  401332:	4b06      	ldr	r3, [pc, #24]	; (40134c <_pwm_init_irq_param+0x20>)
  401334:	4298      	cmp	r0, r3
  401336:	d003      	beq.n	401340 <_pwm_init_irq_param+0x14>
  401338:	4770      	bx	lr
		_pwm0_dev = dev;
  40133a:	4b05      	ldr	r3, [pc, #20]	; (401350 <_pwm_init_irq_param+0x24>)
  40133c:	6019      	str	r1, [r3, #0]
  40133e:	e7f8      	b.n	401332 <_pwm_init_irq_param+0x6>
		_pwm1_dev = dev;
  401340:	4b03      	ldr	r3, [pc, #12]	; (401350 <_pwm_init_irq_param+0x24>)
  401342:	6059      	str	r1, [r3, #4]
	}
}
  401344:	e7f8      	b.n	401338 <_pwm_init_irq_param+0xc>
  401346:	bf00      	nop
  401348:	40020000 	.word	0x40020000
  40134c:	4005c000 	.word	0x4005c000
  401350:	2040023c 	.word	0x2040023c

00401354 <_pwm_interrupt_handler>:
 * \internal interrupt handler for PWM
 *
 * \param[in] instance PWM instance number
 */
static void _pwm_interrupt_handler(struct _pwm_device *device)
{
  401354:	b508      	push	{r3, lr}
	if (hri_pwm_read_ISR1_reg(device->hw)) {
  401356:	6903      	ldr	r3, [r0, #16]
	return tmp;
}

static inline hri_pwm_isr1_reg_t hri_pwm_read_ISR1_reg(const void *const hw)
{
	return ((Pwm *)hw)->PWM_ISR1;
  401358:	69db      	ldr	r3, [r3, #28]
  40135a:	b113      	cbz	r3, 401362 <_pwm_interrupt_handler+0xe>
		if (NULL != device->callback.pwm_period_cb) {
  40135c:	6803      	ldr	r3, [r0, #0]
  40135e:	b103      	cbz	r3, 401362 <_pwm_interrupt_handler+0xe>
			device->callback.pwm_period_cb(device);
  401360:	4798      	blx	r3
  401362:	bd08      	pop	{r3, pc}

00401364 <PWM0_Handler>:

/**
 * \internal PWM interrupt handler
 */
void PWM0_Handler(void)
{
  401364:	b508      	push	{r3, lr}
	_pwm_interrupt_handler(_pwm0_dev);
  401366:	4b02      	ldr	r3, [pc, #8]	; (401370 <PWM0_Handler+0xc>)
  401368:	6818      	ldr	r0, [r3, #0]
  40136a:	4b02      	ldr	r3, [pc, #8]	; (401374 <PWM0_Handler+0x10>)
  40136c:	4798      	blx	r3
  40136e:	bd08      	pop	{r3, pc}
  401370:	2040023c 	.word	0x2040023c
  401374:	00401355 	.word	0x00401355

00401378 <PWM1_Handler>:

/**
 * \internal PWM interrupt handler
 */
void PWM1_Handler(void)
{
  401378:	b508      	push	{r3, lr}
	_pwm_interrupt_handler(_pwm1_dev);
  40137a:	4b02      	ldr	r3, [pc, #8]	; (401384 <PWM1_Handler+0xc>)
  40137c:	6858      	ldr	r0, [r3, #4]
  40137e:	4b02      	ldr	r3, [pc, #8]	; (401388 <PWM1_Handler+0x10>)
  401380:	4798      	blx	r3
  401382:	bd08      	pop	{r3, pc}
  401384:	2040023c 	.word	0x2040023c
  401388:	00401355 	.word	0x00401355

0040138c <_pwm_init>:
}

int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
  40138c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40138e:	4606      	mov	r6, r0
	ASSERT(hw);
  401390:	460c      	mov	r4, r1
  401392:	1c08      	adds	r0, r1, #0
  401394:	bf18      	it	ne
  401396:	2001      	movne	r0, #1
  401398:	f44f 72bf 	mov.w	r2, #382	; 0x17e
  40139c:	4951      	ldr	r1, [pc, #324]	; (4014e4 <_pwm_init+0x158>)
  40139e:	4b52      	ldr	r3, [pc, #328]	; (4014e8 <_pwm_init+0x15c>)
  4013a0:	4798      	blx	r3
	int8_t                      i;
	const struct _pwm_cfg *     cfg;
	const struct _pwm_ch_cfg *  ch;
	const struct _pwm_comp_cfg *comp;

	cfg = _pwm_get_cfg(hw);
  4013a2:	4620      	mov	r0, r4
  4013a4:	4b51      	ldr	r3, [pc, #324]	; (4014ec <_pwm_init+0x160>)
  4013a6:	4798      	blx	r3
  4013a8:	4605      	mov	r5, r0

	device->hw = hw;
  4013aa:	6134      	str	r4, [r6, #16]
	/* Init PMW */
	hri_pwm_write_CLK_reg(hw, cfg->pwm_clk);
  4013ac:	6883      	ldr	r3, [r0, #8]
}

static inline void hri_pwm_write_CLK_reg(const void *const hw, hri_pwm_clk_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_CLK = data;
  4013ae:	6023      	str	r3, [r4, #0]
	hri_pwm_write_ELMR_reg(hw, 0, cfg->pwm_elmr0);
  4013b0:	68c3      	ldr	r3, [r0, #12]
}

static inline void hri_pwm_write_ELMR_reg(const void *const hw, uint8_t index, hri_pwm_elmr_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ELMR[index] = data;
  4013b2:	67e3      	str	r3, [r4, #124]	; 0x7c
	hri_pwm_write_ELMR_reg(hw, 1, cfg->pwm_elmr1);
  4013b4:	6903      	ldr	r3, [r0, #16]
  4013b6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	hri_pwm_write_FMR_reg(hw, cfg->pwm_fmr);
  4013ba:	6943      	ldr	r3, [r0, #20]
	((Pwm *)hw)->PWM_FMR = data;
  4013bc:	65e3      	str	r3, [r4, #92]	; 0x5c
	hri_pwm_write_FPV1_reg(hw, cfg->pwm_fpv1);
  4013be:	6983      	ldr	r3, [r0, #24]
	((Pwm *)hw)->PWM_FPV1 = data;
  4013c0:	66a3      	str	r3, [r4, #104]	; 0x68
	hri_pwm_write_FPV2_reg(hw, cfg->pwm_fpv2);
  4013c2:	69c3      	ldr	r3, [r0, #28]
}

static inline void hri_pwm_write_FPV2_reg(const void *const hw, hri_pwm_fpv2_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_FPV2 = data;
  4013c4:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
	hri_pwm_write_FPE_reg(hw, cfg->pwm_fpe);
  4013c8:	6a03      	ldr	r3, [r0, #32]
	((Pwm *)hw)->PWM_FPE = data;
  4013ca:	66e3      	str	r3, [r4, #108]	; 0x6c
	hri_pwm_write_ETRG1_reg(hw, cfg->pwm_etrg1);
  4013cc:	6a43      	ldr	r3, [r0, #36]	; 0x24
}

static inline void hri_pwm_write_ETRG1_reg(const void *const hw, hri_pwm_etrg1_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ETRG1 = data;
  4013ce:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
	hri_pwm_write_ETRG2_reg(hw, cfg->pwm_etrg2);
  4013d2:	6a83      	ldr	r3, [r0, #40]	; 0x28
}

static inline void hri_pwm_write_ETRG2_reg(const void *const hw, hri_pwm_etrg2_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ETRG2 = data;
  4013d4:	f8c4 344c 	str.w	r3, [r4, #1100]	; 0x44c
	//int DT = 3;																	//Dead time of 3 (for 3kHz (6MHz) corresponds to 0.5us)
	
	//hri_pwmchnum_write_DT_DTH_bf(PWM0, DT);

	/* Init Channel */
	for (i = 0; i < cfg->ch_num; i++) {
  4013d8:	2000      	movs	r0, #0
  4013da:	e032      	b.n	401442 <_pwm_init+0xb6>
		ch = cfg->ch + i;
  4013dc:	6b2a      	ldr	r2, [r5, #48]	; 0x30
  4013de:	0103      	lsls	r3, r0, #4
  4013e0:	eb02 0e03 	add.w	lr, r2, r3
		hri_pwm_write_CMR_reg(hw, ch->index, ch->mode);
  4013e4:	5cd7      	ldrb	r7, [r2, r3]
  4013e6:	f8de 1004 	ldr.w	r1, [lr, #4]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CMR = data;
  4013ea:	3710      	adds	r7, #16
  4013ec:	017f      	lsls	r7, r7, #5
  4013ee:	51e1      	str	r1, [r4, r7]
		hri_pwmchnum_set_CMR_DTE_bit((void *) &((Pwm *)hw)->PwmChNum[ch->index]);
  4013f0:	5cd1      	ldrb	r1, [r2, r3]
	((PwmChNum *)hw)->PWM_CMR |= PWM_CMR_DTE;
  4013f2:	3110      	adds	r1, #16
  4013f4:	0149      	lsls	r1, r1, #5
  4013f6:	5867      	ldr	r7, [r4, r1]
  4013f8:	f447 3780 	orr.w	r7, r7, #65536	; 0x10000
  4013fc:	5067      	str	r7, [r4, r1]
		hri_pwm_set_DT_DTH_bf(hw, ch->index, 10);
  4013fe:	5cd1      	ldrb	r1, [r2, r3]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTH(mask);
  401400:	eb04 1141 	add.w	r1, r4, r1, lsl #5
  401404:	f8d1 7218 	ldr.w	r7, [r1, #536]	; 0x218
  401408:	f047 070a 	orr.w	r7, r7, #10
  40140c:	f8c1 7218 	str.w	r7, [r1, #536]	; 0x218
		hri_pwm_set_DT_DTL_bf(hw, ch->index, 10);
  401410:	5cd1      	ldrb	r1, [r2, r3]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTL(mask);
  401412:	eb04 1141 	add.w	r1, r4, r1, lsl #5
  401416:	f8d1 7218 	ldr.w	r7, [r1, #536]	; 0x218
  40141a:	f447 2720 	orr.w	r7, r7, #655360	; 0xa0000
  40141e:	f8c1 7218 	str.w	r7, [r1, #536]	; 0x218
		hri_pwm_write_CDTY_reg(hw, ch->index, ch->duty_cycle);
  401422:	5cd1      	ldrb	r1, [r2, r3]
  401424:	f8de 700c 	ldr.w	r7, [lr, #12]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CDTY = data;
  401428:	3110      	adds	r1, #16
  40142a:	eb04 1141 	add.w	r1, r4, r1, lsl #5
  40142e:	604f      	str	r7, [r1, #4]
		hri_pwm_write_CPRD_reg(hw, ch->index, ch->period);
  401430:	5cd3      	ldrb	r3, [r2, r3]
  401432:	f8de 2008 	ldr.w	r2, [lr, #8]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CPRD = data;
  401436:	eb04 1343 	add.w	r3, r4, r3, lsl #5
  40143a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	for (i = 0; i < cfg->ch_num; i++) {
  40143e:	3001      	adds	r0, #1
  401440:	b240      	sxtb	r0, r0
  401442:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
  401444:	4298      	cmp	r0, r3
  401446:	d3c9      	bcc.n	4013dc <_pwm_init+0x50>
  401448:	2300      	movs	r3, #0
  40144a:	e014      	b.n	401476 <_pwm_init+0xea>
	}
	/* Init comparison */
	for (i = 0; i < cfg->comp_num; i++) {
		comp = cfg->comp + i;
  40144c:	6ba9      	ldr	r1, [r5, #56]	; 0x38
  40144e:	eb03 0043 	add.w	r0, r3, r3, lsl #1
  401452:	0082      	lsls	r2, r0, #2
  401454:	eb01 0e02 	add.w	lr, r1, r2
		hri_pwm_write_CMPM_reg(hw, comp->index, comp->comp_cmpm);
  401458:	5c88      	ldrb	r0, [r1, r2]
  40145a:	f8de 7004 	ldr.w	r7, [lr, #4]
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPM = data;
  40145e:	eb04 1000 	add.w	r0, r4, r0, lsl #4
  401462:	f8c0 7138 	str.w	r7, [r0, #312]	; 0x138
		hri_pwm_write_CMPV_reg(hw, comp->index, comp->comp_cmpv);
  401466:	5c8a      	ldrb	r2, [r1, r2]
  401468:	f8de 1008 	ldr.w	r1, [lr, #8]
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPV = data;
  40146c:	3213      	adds	r2, #19
  40146e:	0112      	lsls	r2, r2, #4
  401470:	50a1      	str	r1, [r4, r2]
	for (i = 0; i < cfg->comp_num; i++) {
  401472:	3301      	adds	r3, #1
  401474:	b25b      	sxtb	r3, r3
  401476:	6b6a      	ldr	r2, [r5, #52]	; 0x34
  401478:	4293      	cmp	r3, r2
  40147a:	d3e7      	bcc.n	40144c <_pwm_init+0xc0>
	}

	_pwm_init_irq_param(hw, device);
  40147c:	4631      	mov	r1, r6
  40147e:	4620      	mov	r0, r4
  401480:	4b1b      	ldr	r3, [pc, #108]	; (4014f0 <_pwm_init+0x164>)
  401482:	4798      	blx	r3
	NVIC_DisableIRQ(cfg->irq);
  401484:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  401488:	2b00      	cmp	r3, #0
  40148a:	db0d      	blt.n	4014a8 <_pwm_init+0x11c>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40148c:	095a      	lsrs	r2, r3, #5
  40148e:	f003 031f 	and.w	r3, r3, #31
  401492:	2101      	movs	r1, #1
  401494:	fa01 f303 	lsl.w	r3, r1, r3
  401498:	3220      	adds	r2, #32
  40149a:	4916      	ldr	r1, [pc, #88]	; (4014f4 <_pwm_init+0x168>)
  40149c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  4014a0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4014a4:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(cfg->irq);
  4014a8:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  4014ac:	2b00      	cmp	r3, #0
  4014ae:	db09      	blt.n	4014c4 <_pwm_init+0x138>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4014b0:	095a      	lsrs	r2, r3, #5
  4014b2:	f003 031f 	and.w	r3, r3, #31
  4014b6:	2101      	movs	r1, #1
  4014b8:	fa01 f303 	lsl.w	r3, r1, r3
  4014bc:	3260      	adds	r2, #96	; 0x60
  4014be:	490d      	ldr	r1, [pc, #52]	; (4014f4 <_pwm_init+0x168>)
  4014c0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	NVIC_EnableIRQ(cfg->irq);
  4014c4:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  4014c8:	2b00      	cmp	r3, #0
  4014ca:	db08      	blt.n	4014de <_pwm_init+0x152>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4014cc:	0959      	lsrs	r1, r3, #5
  4014ce:	f003 031f 	and.w	r3, r3, #31
  4014d2:	2201      	movs	r2, #1
  4014d4:	fa02 f303 	lsl.w	r3, r2, r3
  4014d8:	4a06      	ldr	r2, [pc, #24]	; (4014f4 <_pwm_init+0x168>)
  4014da:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	return ERR_NONE;
}
  4014de:	2000      	movs	r0, #0
  4014e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4014e2:	bf00      	nop
  4014e4:	004062d0 	.word	0x004062d0
  4014e8:	00400d65 	.word	0x00400d65
  4014ec:	004012fd 	.word	0x004012fd
  4014f0:	0040132d 	.word	0x0040132d
  4014f4:	e000e100 	.word	0xe000e100

004014f8 <_pwm_enable>:

	hri_pwm_write_DIS_reg(device->hw, PWM_DIS_MASK);
}

void _pwm_enable(struct _pwm_device *const device)
{
  4014f8:	b538      	push	{r3, r4, r5, lr}
	ASSERT(device);
  4014fa:	4604      	mov	r4, r0
  4014fc:	f44f 72df 	mov.w	r2, #446	; 0x1be
  401500:	490b      	ldr	r1, [pc, #44]	; (401530 <_pwm_enable+0x38>)
  401502:	3000      	adds	r0, #0
  401504:	bf18      	it	ne
  401506:	2001      	movne	r0, #1
  401508:	4b0a      	ldr	r3, [pc, #40]	; (401534 <_pwm_enable+0x3c>)
  40150a:	4798      	blx	r3
	int8_t                 i;
	const struct _pwm_cfg *cfg;

	cfg = _pwm_get_cfg(device->hw);
  40150c:	6920      	ldr	r0, [r4, #16]
  40150e:	4b0a      	ldr	r3, [pc, #40]	; (401538 <_pwm_enable+0x40>)
  401510:	4798      	blx	r3

	for (i = 0; i < cfg->ch_num; i++) {
  401512:	2300      	movs	r3, #0
  401514:	e008      	b.n	401528 <_pwm_enable+0x30>
		hri_pwm_write_ENA_reg(device->hw, 0x1u << cfg->ch[i].index);
  401516:	6921      	ldr	r1, [r4, #16]
  401518:	6b05      	ldr	r5, [r0, #48]	; 0x30
  40151a:	011a      	lsls	r2, r3, #4
  40151c:	5cad      	ldrb	r5, [r5, r2]
  40151e:	2201      	movs	r2, #1
  401520:	40aa      	lsls	r2, r5
}

static inline void hri_pwm_write_ENA_reg(const void *const hw, hri_pwm_ena_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ENA = data;
  401522:	604a      	str	r2, [r1, #4]
	for (i = 0; i < cfg->ch_num; i++) {
  401524:	3301      	adds	r3, #1
  401526:	b25b      	sxtb	r3, r3
  401528:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  40152a:	4293      	cmp	r3, r2
  40152c:	d3f3      	bcc.n	401516 <_pwm_enable+0x1e>
	}
}
  40152e:	bd38      	pop	{r3, r4, r5, pc}
  401530:	004062d0 	.word	0x004062d0
  401534:	00400d65 	.word	0x00400d65
  401538:	004012fd 	.word	0x004012fd

0040153c <_pwm_set_param>:
		hri_pwm_write_DIS_reg(device->hw, 0x1u << cfg->ch[i].index);
	}
}

void _pwm_set_param(struct _pwm_device *const device, const pwm_period_t period, const pwm_period_t duty_cycle)
{
  40153c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40153e:	460d      	mov	r5, r1
  401540:	4616      	mov	r6, r2
	uint8_t                i;
	const struct _pwm_cfg *cfg;

	ASSERT(device && (duty_cycle < period));
  401542:	4604      	mov	r4, r0
  401544:	f240 12db 	movw	r2, #475	; 0x1db
  401548:	4911      	ldr	r1, [pc, #68]	; (401590 <_pwm_set_param+0x54>)
  40154a:	2800      	cmp	r0, #0
  40154c:	bf18      	it	ne
  40154e:	42ae      	cmpne	r6, r5
  401550:	bf34      	ite	cc
  401552:	2001      	movcc	r0, #1
  401554:	2000      	movcs	r0, #0
  401556:	4b0f      	ldr	r3, [pc, #60]	; (401594 <_pwm_set_param+0x58>)
  401558:	4798      	blx	r3

	cfg = _pwm_get_cfg(device->hw);
  40155a:	6920      	ldr	r0, [r4, #16]
  40155c:	4b0e      	ldr	r3, [pc, #56]	; (401598 <_pwm_set_param+0x5c>)
  40155e:	4798      	blx	r3

	for (i = 0; i < cfg->ch_num; i++) {
  401560:	2300      	movs	r3, #0
  401562:	e010      	b.n	401586 <_pwm_set_param+0x4a>
		hri_pwm_write_CDTYUPD_reg(device->hw, cfg->ch[i].index, duty_cycle);
  401564:	6922      	ldr	r2, [r4, #16]
  401566:	6b07      	ldr	r7, [r0, #48]	; 0x30
  401568:	0119      	lsls	r1, r3, #4
  40156a:	5c7f      	ldrb	r7, [r7, r1]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CDTYUPD = data;
  40156c:	eb02 1247 	add.w	r2, r2, r7, lsl #5
  401570:	f8c2 6208 	str.w	r6, [r2, #520]	; 0x208
		hri_pwm_write_CPRDUPD_reg(device->hw, cfg->ch[i].index, period);
  401574:	6922      	ldr	r2, [r4, #16]
  401576:	6b07      	ldr	r7, [r0, #48]	; 0x30
  401578:	5c79      	ldrb	r1, [r7, r1]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CPRDUPD = data;
  40157a:	eb02 1241 	add.w	r2, r2, r1, lsl #5
  40157e:	f8c2 5210 	str.w	r5, [r2, #528]	; 0x210
	for (i = 0; i < cfg->ch_num; i++) {
  401582:	3301      	adds	r3, #1
  401584:	b2db      	uxtb	r3, r3
  401586:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  401588:	4293      	cmp	r3, r2
  40158a:	d3eb      	bcc.n	401564 <_pwm_set_param+0x28>
	}
}
  40158c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40158e:	bf00      	nop
  401590:	004062d0 	.word	0x004062d0
  401594:	00400d65 	.word	0x00400d65
  401598:	004012fd 	.word	0x004012fd

0040159c <_pwm_is_enabled>:

bool _pwm_is_enabled(const struct _pwm_device *const device)
{
  40159c:	b510      	push	{r4, lr}
	ASSERT(device);
  40159e:	4604      	mov	r4, r0
  4015a0:	f240 12e7 	movw	r2, #487	; 0x1e7
  4015a4:	4907      	ldr	r1, [pc, #28]	; (4015c4 <_pwm_is_enabled+0x28>)
  4015a6:	3000      	adds	r0, #0
  4015a8:	bf18      	it	ne
  4015aa:	2001      	movne	r0, #1
  4015ac:	4b06      	ldr	r3, [pc, #24]	; (4015c8 <_pwm_is_enabled+0x2c>)
  4015ae:	4798      	blx	r3
	uint8_t status = hri_pwm_get_SR_reg(device->hw, 0x0F);
  4015b0:	6923      	ldr	r3, [r4, #16]
	tmp = ((Pwm *)hw)->PWM_SR;
  4015b2:	68db      	ldr	r3, [r3, #12]
	if (status == 0) {
  4015b4:	f013 0f0f 	tst.w	r3, #15
  4015b8:	d001      	beq.n	4015be <_pwm_is_enabled+0x22>
		return false;
	} else {
		return true;
  4015ba:	2001      	movs	r0, #1
	}
}
  4015bc:	bd10      	pop	{r4, pc}
		return false;
  4015be:	2000      	movs	r0, #0
  4015c0:	bd10      	pop	{r4, pc}
  4015c2:	bf00      	nop
  4015c4:	004062d0 	.word	0x004062d0
  4015c8:	00400d65 	.word	0x00400d65

004015cc <_pwm_get_pwm>:
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_pwm_get_pwm(void)
{
	return NULL;
}
  4015cc:	2000      	movs	r0, #0
  4015ce:	4770      	bx	lr

004015d0 <_system_time_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
  4015d0:	4b03      	ldr	r3, [pc, #12]	; (4015e0 <_system_time_init+0x10>)
  4015d2:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
  4015d6:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
  4015d8:	2205      	movs	r2, #5
  4015da:	601a      	str	r2, [r3, #0]
  4015dc:	4770      	bx	lr
  4015de:	bf00      	nop
  4015e0:	e000e010 	.word	0xe000e010

004015e4 <_delay_init>:
}
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
  4015e4:	b508      	push	{r3, lr}
	_system_time_init(hw);
  4015e6:	4b01      	ldr	r3, [pc, #4]	; (4015ec <_delay_init+0x8>)
  4015e8:	4798      	blx	r3
  4015ea:	bd08      	pop	{r3, pc}
  4015ec:	004015d1 	.word	0x004015d1

004015f0 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
  4015f0:	0e08      	lsrs	r0, r1, #24
	uint32_t buf = cycles;

	while (n--) {
  4015f2:	e00d      	b.n	401610 <_delay_cycles+0x20>
		SysTick->LOAD = 0xFFFFFF;
  4015f4:	4b0d      	ldr	r3, [pc, #52]	; (40162c <_delay_cycles+0x3c>)
  4015f6:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
  4015fa:	6058      	str	r0, [r3, #4]
		SysTick->VAL  = 0xFFFFFF;
  4015fc:	6098      	str	r0, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
  4015fe:	4b0b      	ldr	r3, [pc, #44]	; (40162c <_delay_cycles+0x3c>)
  401600:	681b      	ldr	r3, [r3, #0]
  401602:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  401606:	d0fa      	beq.n	4015fe <_delay_cycles+0xe>
			;
		buf -= 0xFFFFFF;
  401608:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
  40160c:	3101      	adds	r1, #1
	while (n--) {
  40160e:	4610      	mov	r0, r2
  401610:	1e43      	subs	r3, r0, #1
  401612:	b2da      	uxtb	r2, r3
  401614:	2800      	cmp	r0, #0
  401616:	d1ed      	bne.n	4015f4 <_delay_cycles+0x4>
	}

	SysTick->LOAD = buf;
  401618:	4b04      	ldr	r3, [pc, #16]	; (40162c <_delay_cycles+0x3c>)
  40161a:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
  40161c:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
  40161e:	4b03      	ldr	r3, [pc, #12]	; (40162c <_delay_cycles+0x3c>)
  401620:	681b      	ldr	r3, [r3, #0]
  401622:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  401626:	d0fa      	beq.n	40161e <_delay_cycles+0x2e>
		;
}
  401628:	4770      	bx	lr
  40162a:	bf00      	nop
  40162c:	e000e010 	.word	0xe000e010

00401630 <_usart_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given usart hardware instance
 */
static uint8_t _usart_get_hardware_index(const void *const hw)
{
  401630:	b510      	push	{r4, lr}
	ASSERT(hw);
  401632:	4604      	mov	r4, r0
  401634:	f240 222b 	movw	r2, #555	; 0x22b
  401638:	4905      	ldr	r1, [pc, #20]	; (401650 <_usart_get_hardware_index+0x20>)
  40163a:	3000      	adds	r0, #0
  40163c:	bf18      	it	ne
  40163e:	2001      	movne	r0, #1
  401640:	4b04      	ldr	r3, [pc, #16]	; (401654 <_usart_get_hardware_index+0x24>)
  401642:	4798      	blx	r3

#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)USART0) / sizeof(Usart);
#endif

	return ((uint32_t)hw - (uint32_t)USART0) >> 14;
  401644:	4804      	ldr	r0, [pc, #16]	; (401658 <_usart_get_hardware_index+0x28>)
  401646:	4420      	add	r0, r4
}
  401648:	f3c0 3087 	ubfx	r0, r0, #14, #8
  40164c:	bd10      	pop	{r4, pc}
  40164e:	bf00      	nop
  401650:	004062f4 	.word	0x004062f4
  401654:	00400d65 	.word	0x00400d65
  401658:	bffdc000 	.word	0xbffdc000

0040165c <_get_usart_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given usart hardware instance
 */
static uint8_t _get_usart_index(const void *const hw)
{
  40165c:	b510      	push	{r4, lr}
	ASSERT(hw);
  40165e:	4604      	mov	r4, r0
  401660:	f240 2287 	movw	r2, #647	; 0x287
  401664:	490e      	ldr	r1, [pc, #56]	; (4016a0 <_get_usart_index+0x44>)
  401666:	3000      	adds	r0, #0
  401668:	bf18      	it	ne
  40166a:	2001      	movne	r0, #1
  40166c:	4b0d      	ldr	r3, [pc, #52]	; (4016a4 <_get_usart_index+0x48>)
  40166e:	4798      	blx	r3
	uint8_t usart_offset = _usart_get_hardware_index(hw);
  401670:	4620      	mov	r0, r4
  401672:	4b0d      	ldr	r3, [pc, #52]	; (4016a8 <_get_usart_index+0x4c>)
  401674:	4798      	blx	r3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
  401676:	2300      	movs	r3, #0
  401678:	b143      	cbz	r3, 40168c <_get_usart_index+0x30>
		if (_usarts[i].number == usart_offset) {
			return i;
		}
	}

	ASSERT(false);
  40167a:	f240 2291 	movw	r2, #657	; 0x291
  40167e:	4908      	ldr	r1, [pc, #32]	; (4016a0 <_get_usart_index+0x44>)
  401680:	2000      	movs	r0, #0
  401682:	4b08      	ldr	r3, [pc, #32]	; (4016a4 <_get_usart_index+0x48>)
  401684:	4798      	blx	r3
	return 0;
  401686:	2300      	movs	r3, #0
}
  401688:	4618      	mov	r0, r3
  40168a:	bd10      	pop	{r4, pc}
		if (_usarts[i].number == usart_offset) {
  40168c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  401690:	008a      	lsls	r2, r1, #2
  401692:	4906      	ldr	r1, [pc, #24]	; (4016ac <_get_usart_index+0x50>)
  401694:	5c8a      	ldrb	r2, [r1, r2]
  401696:	4290      	cmp	r0, r2
  401698:	d0f6      	beq.n	401688 <_get_usart_index+0x2c>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
  40169a:	3301      	adds	r3, #1
  40169c:	b2db      	uxtb	r3, r3
  40169e:	e7eb      	b.n	401678 <_get_usart_index+0x1c>
  4016a0:	004062f4 	.word	0x004062f4
  4016a4:	00400d65 	.word	0x00400d65
  4016a8:	00401631 	.word	0x00401631
  4016ac:	004062e8 	.word	0x004062e8

004016b0 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
  4016b0:	b510      	push	{r4, lr}
	ASSERT(hw);
  4016b2:	4604      	mov	r4, r0
  4016b4:	f240 229e 	movw	r2, #670	; 0x29e
  4016b8:	4911      	ldr	r1, [pc, #68]	; (401700 <_usart_init+0x50>)
  4016ba:	3000      	adds	r0, #0
  4016bc:	bf18      	it	ne
  4016be:	2001      	movne	r0, #1
  4016c0:	4b10      	ldr	r3, [pc, #64]	; (401704 <_usart_init+0x54>)
  4016c2:	4798      	blx	r3
	uint8_t i = _get_usart_index(hw);
  4016c4:	4620      	mov	r0, r4
  4016c6:	4b10      	ldr	r3, [pc, #64]	; (401708 <_usart_init+0x58>)
  4016c8:	4798      	blx	r3
}

static inline void hri_usart_write_US_WPMR_reg(const void *const hw, hri_usart_us_wpmr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_WPMR = data;
  4016ca:	4b10      	ldr	r3, [pc, #64]	; (40170c <_usart_init+0x5c>)
  4016cc:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
	((Usart *)hw)->US_MR = data;
  4016d0:	2300      	movs	r3, #0
  4016d2:	6063      	str	r3, [r4, #4]
	((Usart *)hw)->US_RTOR = data;
  4016d4:	6263      	str	r3, [r4, #36]	; 0x24
	((Usart *)hw)->US_TTGR = data;
  4016d6:	62a3      	str	r3, [r4, #40]	; 0x28
}

static inline void hri_usart_write_US_CR_reg(const void *const hw, hri_usart_us_cr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_CR = data;
  4016d8:	22ac      	movs	r2, #172	; 0xac
  4016da:	6022      	str	r2, [r4, #0]
  4016dc:	f44f 7280 	mov.w	r2, #256	; 0x100
  4016e0:	6022      	str	r2, [r4, #0]
  4016e2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4016e6:	6022      	str	r2, [r4, #0]
	/* Reset status bits. */
	hri_usart_write_US_CR_reg(hw, US_CR_RSTSTA);
	/* Turn off RTS and DTR if exist. */
	hri_usart_write_US_CR_reg(hw, US_CR_USART_RTSDIS);

	hri_usart_write_US_MR_reg(hw, _usarts[i].us_mr);
  4016e8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  4016ec:	0081      	lsls	r1, r0, #2
  4016ee:	4a08      	ldr	r2, [pc, #32]	; (401710 <_usart_init+0x60>)
  4016f0:	440a      	add	r2, r1
  4016f2:	6852      	ldr	r2, [r2, #4]
	((Usart *)hw)->US_MR = data;
  4016f4:	6062      	str	r2, [r4, #4]
	((Usart *)hw)->US_BRGR = data;
  4016f6:	4a07      	ldr	r2, [pc, #28]	; (401714 <_usart_init+0x64>)
  4016f8:	6222      	str	r2, [r4, #32]
	hri_usart_write_US_BRGR_reg(hw, _usarts[i].us_brgr);

	return ERR_NONE;
}
  4016fa:	4618      	mov	r0, r3
  4016fc:	bd10      	pop	{r4, pc}
  4016fe:	bf00      	nop
  401700:	004062f4 	.word	0x004062f4
  401704:	00400d65 	.word	0x00400d65
  401708:	0040165d 	.word	0x0040165d
  40170c:	55534100 	.word	0x55534100
  401710:	004062e8 	.word	0x004062e8
  401714:	000100f4 	.word	0x000100f4

00401718 <_usart_sync_init>:
{
  401718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40171a:	460c      	mov	r4, r1
	ASSERT(device);
  40171c:	4e09      	ldr	r6, [pc, #36]	; (401744 <_usart_sync_init+0x2c>)
  40171e:	4607      	mov	r7, r0
  401720:	22bd      	movs	r2, #189	; 0xbd
  401722:	4631      	mov	r1, r6
  401724:	3000      	adds	r0, #0
  401726:	bf18      	it	ne
  401728:	2001      	movne	r0, #1
  40172a:	4d07      	ldr	r5, [pc, #28]	; (401748 <_usart_sync_init+0x30>)
  40172c:	47a8      	blx	r5
	ASSERT(hw);
  40172e:	22be      	movs	r2, #190	; 0xbe
  401730:	4631      	mov	r1, r6
  401732:	1c20      	adds	r0, r4, #0
  401734:	bf18      	it	ne
  401736:	2001      	movne	r0, #1
  401738:	47a8      	blx	r5
	device->hw = hw;
  40173a:	603c      	str	r4, [r7, #0]
	return _usart_init(hw);
  40173c:	4620      	mov	r0, r4
  40173e:	4b03      	ldr	r3, [pc, #12]	; (40174c <_usart_sync_init+0x34>)
  401740:	4798      	blx	r3
}
  401742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401744:	004062f4 	.word	0x004062f4
  401748:	00400d65 	.word	0x00400d65
  40174c:	004016b1 	.word	0x004016b1

00401750 <_usart_sync_enable>:
{
  401750:	b570      	push	{r4, r5, r6, lr}
	ASSERT(device);
  401752:	4e0a      	ldr	r6, [pc, #40]	; (40177c <_usart_sync_enable+0x2c>)
  401754:	4604      	mov	r4, r0
  401756:	f240 1205 	movw	r2, #261	; 0x105
  40175a:	4631      	mov	r1, r6
  40175c:	3000      	adds	r0, #0
  40175e:	bf18      	it	ne
  401760:	2001      	movne	r0, #1
  401762:	4d07      	ldr	r5, [pc, #28]	; (401780 <_usart_sync_enable+0x30>)
  401764:	47a8      	blx	r5
	_usart_enable(device->hw);
  401766:	6824      	ldr	r4, [r4, #0]
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline void _usart_enable(void *const hw)
{
	ASSERT(hw);
  401768:	f240 22c7 	movw	r2, #711	; 0x2c7
  40176c:	4631      	mov	r1, r6
  40176e:	1c20      	adds	r0, r4, #0
  401770:	bf18      	it	ne
  401772:	2001      	movne	r0, #1
  401774:	47a8      	blx	r5
	((Usart *)hw)->US_CR = data;
  401776:	2350      	movs	r3, #80	; 0x50
  401778:	6023      	str	r3, [r4, #0]
  40177a:	bd70      	pop	{r4, r5, r6, pc}
  40177c:	004062f4 	.word	0x004062f4
  401780:	00400d65 	.word	0x00400d65

00401784 <_usart_sync_write_byte>:
{
  401784:	b538      	push	{r3, r4, r5, lr}
  401786:	460c      	mov	r4, r1
	ASSERT(device);
  401788:	4605      	mov	r5, r0
  40178a:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
  40178e:	4904      	ldr	r1, [pc, #16]	; (4017a0 <_usart_sync_write_byte+0x1c>)
  401790:	3000      	adds	r0, #0
  401792:	bf18      	it	ne
  401794:	2001      	movne	r0, #1
  401796:	4b03      	ldr	r3, [pc, #12]	; (4017a4 <_usart_sync_write_byte+0x20>)
  401798:	4798      	blx	r3
	hri_usart_write_US_THR_reg(device->hw, (hri_usart_us_thr_reg_t)data);
  40179a:	682b      	ldr	r3, [r5, #0]
}

static inline void hri_usart_write_US_THR_reg(const void *const hw, hri_usart_us_thr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_THR = data;
  40179c:	61dc      	str	r4, [r3, #28]
  40179e:	bd38      	pop	{r3, r4, r5, pc}
  4017a0:	004062f4 	.word	0x004062f4
  4017a4:	00400d65 	.word	0x00400d65

004017a8 <_usart_sync_read_byte>:
{
  4017a8:	b510      	push	{r4, lr}
	ASSERT(device);
  4017aa:	4604      	mov	r4, r0
  4017ac:	f44f 72dd 	mov.w	r2, #442	; 0x1ba
  4017b0:	4904      	ldr	r1, [pc, #16]	; (4017c4 <_usart_sync_read_byte+0x1c>)
  4017b2:	3000      	adds	r0, #0
  4017b4:	bf18      	it	ne
  4017b6:	2001      	movne	r0, #1
  4017b8:	4b03      	ldr	r3, [pc, #12]	; (4017c8 <_usart_sync_read_byte+0x20>)
  4017ba:	4798      	blx	r3
	return (uint8_t)(hri_usart_read_US_RHR_reg(device->hw) & 0xff);
  4017bc:	6823      	ldr	r3, [r4, #0]
	return ((Usart *)hw)->US_RHR;
  4017be:	6998      	ldr	r0, [r3, #24]
}
  4017c0:	b2c0      	uxtb	r0, r0
  4017c2:	bd10      	pop	{r4, pc}
  4017c4:	004062f4 	.word	0x004062f4
  4017c8:	00400d65 	.word	0x00400d65

004017cc <_usart_sync_is_ready_to_send>:
{
  4017cc:	b510      	push	{r4, lr}
	ASSERT(device);
  4017ce:	4604      	mov	r4, r0
  4017d0:	f240 12c3 	movw	r2, #451	; 0x1c3
  4017d4:	4905      	ldr	r1, [pc, #20]	; (4017ec <_usart_sync_is_ready_to_send+0x20>)
  4017d6:	3000      	adds	r0, #0
  4017d8:	bf18      	it	ne
  4017da:	2001      	movne	r0, #1
  4017dc:	4b04      	ldr	r3, [pc, #16]	; (4017f0 <_usart_sync_is_ready_to_send+0x24>)
  4017de:	4798      	blx	r3
	return hri_usart_get_US_CSR_TXRDY_bit(device->hw);
  4017e0:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_TXRDY) > 0;
  4017e2:	6958      	ldr	r0, [r3, #20]
}
  4017e4:	f3c0 0040 	ubfx	r0, r0, #1, #1
  4017e8:	bd10      	pop	{r4, pc}
  4017ea:	bf00      	nop
  4017ec:	004062f4 	.word	0x004062f4
  4017f0:	00400d65 	.word	0x00400d65

004017f4 <_usart_sync_is_transmit_done>:
{
  4017f4:	b510      	push	{r4, lr}
	ASSERT(device);
  4017f6:	4604      	mov	r4, r0
  4017f8:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
  4017fc:	4905      	ldr	r1, [pc, #20]	; (401814 <_usart_sync_is_transmit_done+0x20>)
  4017fe:	3000      	adds	r0, #0
  401800:	bf18      	it	ne
  401802:	2001      	movne	r0, #1
  401804:	4b04      	ldr	r3, [pc, #16]	; (401818 <_usart_sync_is_transmit_done+0x24>)
  401806:	4798      	blx	r3
	return hri_usart_get_US_CSR_TXEMPTY_bit(device->hw);
  401808:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_TXEMPTY) > 0;
  40180a:	6958      	ldr	r0, [r3, #20]
}
  40180c:	f3c0 2040 	ubfx	r0, r0, #9, #1
  401810:	bd10      	pop	{r4, pc}
  401812:	bf00      	nop
  401814:	004062f4 	.word	0x004062f4
  401818:	00400d65 	.word	0x00400d65

0040181c <_usart_sync_is_byte_received>:
{
  40181c:	b510      	push	{r4, lr}
	ASSERT(device);
  40181e:	4604      	mov	r4, r0
  401820:	f44f 72ef 	mov.w	r2, #478	; 0x1de
  401824:	4905      	ldr	r1, [pc, #20]	; (40183c <_usart_sync_is_byte_received+0x20>)
  401826:	3000      	adds	r0, #0
  401828:	bf18      	it	ne
  40182a:	2001      	movne	r0, #1
  40182c:	4b04      	ldr	r3, [pc, #16]	; (401840 <_usart_sync_is_byte_received+0x24>)
  40182e:	4798      	blx	r3
	return hri_usart_get_US_CSR_RXRDY_bit(device->hw);
  401830:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_RXRDY) > 0;
  401832:	6958      	ldr	r0, [r3, #20]
  401834:	f000 0001 	and.w	r0, r0, #1
}
  401838:	bd10      	pop	{r4, pc}
  40183a:	bf00      	nop
  40183c:	004062f4 	.word	0x004062f4
  401840:	00400d65 	.word	0x00400d65

00401844 <_usart_get_usart_sync>:
}
  401844:	2000      	movs	r0, #0
  401846:	4770      	bx	lr

00401848 <main>:
#include "arm_math.h"



int main(void)
{
  401848:	b508      	push	{r3, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
  40184a:	4b0a      	ldr	r3, [pc, #40]	; (401874 <main+0x2c>)
  40184c:	4798      	blx	r3
	//CAN is currently disabled
	//Temp 3 currently disabled as pin is shared with edbg com
	
	
	//Initialise dead time on PWMs 
	pwm_deadtime_init();	
  40184e:	4b0a      	ldr	r3, [pc, #40]	; (401878 <main+0x30>)
  401850:	4798      	blx	r3
	
	
	pwm_enable_all();
  401852:	4b0a      	ldr	r3, [pc, #40]	; (40187c <main+0x34>)
  401854:	4798      	blx	r3
	adc_enable_all();
  401856:	4b0a      	ldr	r3, [pc, #40]	; (401880 <main+0x38>)
  401858:	4798      	blx	r3
	((Pio *)hw)->PIO_SODR = mask;
  40185a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  40185e:	4b09      	ldr	r3, [pc, #36]	; (401884 <main+0x3c>)
  401860:	631a      	str	r2, [r3, #48]	; 0x30
	
	
	//Runs first slow spin test of motor slowly increasing the angle so the rotor can catch up
	
	
	first_slow_spin();
  401862:	4b09      	ldr	r3, [pc, #36]	; (401888 <main+0x40>)
  401864:	4798      	blx	r3

	/* Replace with your application code */
	while (1) {
		
		
		Current_Voltage_Inital_Test();
  401866:	4b09      	ldr	r3, [pc, #36]	; (40188c <main+0x44>)
  401868:	4798      	blx	r3
		delay_ms(500);
  40186a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  40186e:	4b08      	ldr	r3, [pc, #32]	; (401890 <main+0x48>)
  401870:	4798      	blx	r3
  401872:	e7f8      	b.n	401866 <main+0x1e>
  401874:	004001d5 	.word	0x004001d5
  401878:	004002a1 	.word	0x004002a1
  40187c:	00400259 	.word	0x00400259
  401880:	004001e9 	.word	0x004001e9
  401884:	400e0e00 	.word	0x400e0e00
  401888:	00400349 	.word	0x00400349
  40188c:	004002dd 	.word	0x004002dd
  401890:	00400a65 	.word	0x00400a65

00401894 <_read>:

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
	int n = 0;

	if (file != 0) {
  401894:	b958      	cbnz	r0, 4018ae <_read+0x1a>
{
  401896:	b508      	push	{r3, lr}
  401898:	460b      	mov	r3, r1
  40189a:	4611      	mov	r1, r2
  40189c:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
  40189e:	4b05      	ldr	r3, [pc, #20]	; (4018b4 <_read+0x20>)
  4018a0:	4798      	blx	r3
	if (n < 0) {
  4018a2:	2800      	cmp	r0, #0
  4018a4:	db00      	blt.n	4018a8 <_read+0x14>
		return -1;
	}

	return n;
}
  4018a6:	bd08      	pop	{r3, pc}
		return -1;
  4018a8:	f04f 30ff 	mov.w	r0, #4294967295
  4018ac:	bd08      	pop	{r3, pc}
		return -1;
  4018ae:	f04f 30ff 	mov.w	r0, #4294967295
  4018b2:	4770      	bx	lr
  4018b4:	0040190d 	.word	0x0040190d

004018b8 <_write>:

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
  4018b8:	3801      	subs	r0, #1
  4018ba:	2802      	cmp	r0, #2
  4018bc:	d80b      	bhi.n	4018d6 <_write+0x1e>
{
  4018be:	b508      	push	{r3, lr}
  4018c0:	460b      	mov	r3, r1
  4018c2:	4611      	mov	r1, r2
  4018c4:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
  4018c6:	4b05      	ldr	r3, [pc, #20]	; (4018dc <_write+0x24>)
  4018c8:	4798      	blx	r3
	if (n < 0) {
  4018ca:	2800      	cmp	r0, #0
  4018cc:	db00      	blt.n	4018d0 <_write+0x18>
		return -1;
	}

	return n;
}
  4018ce:	bd08      	pop	{r3, pc}
		return -1;
  4018d0:	f04f 30ff 	mov.w	r0, #4294967295
  4018d4:	bd08      	pop	{r3, pc}
		return -1;
  4018d6:	f04f 30ff 	mov.w	r0, #4294967295
  4018da:	4770      	bx	lr
  4018dc:	00401931 	.word	0x00401931

004018e0 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
  4018e0:	b570      	push	{r4, r5, r6, lr}
  4018e2:	4606      	mov	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
  4018e4:	4d06      	ldr	r5, [pc, #24]	; (401900 <stdio_io_init+0x20>)
  4018e6:	682b      	ldr	r3, [r5, #0]
  4018e8:	2100      	movs	r1, #0
  4018ea:	6898      	ldr	r0, [r3, #8]
  4018ec:	4c05      	ldr	r4, [pc, #20]	; (401904 <stdio_io_init+0x24>)
  4018ee:	47a0      	blx	r4
	setbuf(stdin, NULL);
  4018f0:	682b      	ldr	r3, [r5, #0]
  4018f2:	2100      	movs	r1, #0
  4018f4:	6858      	ldr	r0, [r3, #4]
  4018f6:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
  4018f8:	4b03      	ldr	r3, [pc, #12]	; (401908 <stdio_io_init+0x28>)
  4018fa:	601e      	str	r6, [r3, #0]
  4018fc:	bd70      	pop	{r4, r5, r6, pc}
  4018fe:	bf00      	nop
  401900:	20400000 	.word	0x20400000
  401904:	00403fad 	.word	0x00403fad
  401908:	2040025c 	.word	0x2040025c

0040190c <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
  40190c:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
  40190e:	4b06      	ldr	r3, [pc, #24]	; (401928 <stdio_io_read+0x1c>)
  401910:	681b      	ldr	r3, [r3, #0]
  401912:	b133      	cbz	r3, 401922 <stdio_io_read+0x16>
  401914:	460a      	mov	r2, r1
  401916:	4601      	mov	r1, r0
		return 0;
	}
	return io_read(stdio_io, buf, len);
  401918:	b292      	uxth	r2, r2
  40191a:	4618      	mov	r0, r3
  40191c:	4b03      	ldr	r3, [pc, #12]	; (40192c <stdio_io_read+0x20>)
  40191e:	4798      	blx	r3
  401920:	bd08      	pop	{r3, pc}
		return 0;
  401922:	2000      	movs	r0, #0
}
  401924:	bd08      	pop	{r3, pc}
  401926:	bf00      	nop
  401928:	2040025c 	.word	0x2040025c
  40192c:	00400b2d 	.word	0x00400b2d

00401930 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
  401930:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
  401932:	4b06      	ldr	r3, [pc, #24]	; (40194c <stdio_io_write+0x1c>)
  401934:	681b      	ldr	r3, [r3, #0]
  401936:	b133      	cbz	r3, 401946 <stdio_io_write+0x16>
  401938:	460a      	mov	r2, r1
  40193a:	4601      	mov	r1, r0
		return 0;
	}
	return io_write(stdio_io, buf, len);
  40193c:	b292      	uxth	r2, r2
  40193e:	4618      	mov	r0, r3
  401940:	4b03      	ldr	r3, [pc, #12]	; (401950 <stdio_io_write+0x20>)
  401942:	4798      	blx	r3
  401944:	bd08      	pop	{r3, pc}
		return 0;
  401946:	2000      	movs	r0, #0
}
  401948:	bd08      	pop	{r3, pc}
  40194a:	bf00      	nop
  40194c:	2040025c 	.word	0x2040025c
  401950:	00400afd 	.word	0x00400afd

00401954 <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
  401954:	b510      	push	{r4, lr}

	usart_sync_enable(&EDBG_COM);
  401956:	4c04      	ldr	r4, [pc, #16]	; (401968 <stdio_redirect_init+0x14>)
  401958:	4620      	mov	r0, r4
  40195a:	4b04      	ldr	r3, [pc, #16]	; (40196c <stdio_redirect_init+0x18>)
  40195c:	4798      	blx	r3
	stdio_io_init(&EDBG_COM.io);
  40195e:	4620      	mov	r0, r4
  401960:	4b03      	ldr	r3, [pc, #12]	; (401970 <stdio_redirect_init+0x1c>)
  401962:	4798      	blx	r3
  401964:	bd10      	pop	{r4, pc}
  401966:	bf00      	nop
  401968:	204002ac 	.word	0x204002ac
  40196c:	00400d39 	.word	0x00400d39
  401970:	004018e1 	.word	0x004018e1

00401974 <sin>:
  401974:	b530      	push	{r4, r5, lr}
  401976:	4a1f      	ldr	r2, [pc, #124]	; (4019f4 <sin+0x80>)
  401978:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  40197c:	4293      	cmp	r3, r2
  40197e:	b087      	sub	sp, #28
  401980:	dd1b      	ble.n	4019ba <sin+0x46>
  401982:	4a1d      	ldr	r2, [pc, #116]	; (4019f8 <sin+0x84>)
  401984:	4293      	cmp	r3, r2
  401986:	dd05      	ble.n	401994 <sin+0x20>
  401988:	4602      	mov	r2, r0
  40198a:	460b      	mov	r3, r1
  40198c:	f001 f99a 	bl	402cc4 <__aeabi_dsub>
  401990:	b007      	add	sp, #28
  401992:	bd30      	pop	{r4, r5, pc}
  401994:	aa02      	add	r2, sp, #8
  401996:	f000 f833 	bl	401a00 <__ieee754_rem_pio2>
  40199a:	f000 0003 	and.w	r0, r0, #3
  40199e:	2801      	cmp	r0, #1
  4019a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  4019a4:	d01a      	beq.n	4019dc <sin+0x68>
  4019a6:	2802      	cmp	r0, #2
  4019a8:	d00f      	beq.n	4019ca <sin+0x56>
  4019aa:	b1e0      	cbz	r0, 4019e6 <sin+0x72>
  4019ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4019b0:	f000 fa4a 	bl	401e48 <__kernel_cos>
  4019b4:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  4019b8:	e7ea      	b.n	401990 <sin+0x1c>
  4019ba:	2300      	movs	r3, #0
  4019bc:	9300      	str	r3, [sp, #0]
  4019be:	2200      	movs	r2, #0
  4019c0:	2300      	movs	r3, #0
  4019c2:	f000 ffad 	bl	402920 <__kernel_sin>
  4019c6:	b007      	add	sp, #28
  4019c8:	bd30      	pop	{r4, r5, pc}
  4019ca:	2401      	movs	r4, #1
  4019cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4019d0:	9400      	str	r4, [sp, #0]
  4019d2:	f000 ffa5 	bl	402920 <__kernel_sin>
  4019d6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  4019da:	e7d9      	b.n	401990 <sin+0x1c>
  4019dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4019e0:	f000 fa32 	bl	401e48 <__kernel_cos>
  4019e4:	e7d4      	b.n	401990 <sin+0x1c>
  4019e6:	2401      	movs	r4, #1
  4019e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4019ec:	9400      	str	r4, [sp, #0]
  4019ee:	f000 ff97 	bl	402920 <__kernel_sin>
  4019f2:	e7cd      	b.n	401990 <sin+0x1c>
  4019f4:	3fe921fb 	.word	0x3fe921fb
  4019f8:	7fefffff 	.word	0x7fefffff
  4019fc:	00000000 	.word	0x00000000

00401a00 <__ieee754_rem_pio2>:
  401a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401a04:	4e9a      	ldr	r6, [pc, #616]	; (401c70 <__ieee754_rem_pio2+0x270>)
  401a06:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
  401a0a:	42b7      	cmp	r7, r6
  401a0c:	b091      	sub	sp, #68	; 0x44
  401a0e:	f340 808e 	ble.w	401b2e <__ieee754_rem_pio2+0x12e>
  401a12:	4692      	mov	sl, r2
  401a14:	4a97      	ldr	r2, [pc, #604]	; (401c74 <__ieee754_rem_pio2+0x274>)
  401a16:	4297      	cmp	r7, r2
  401a18:	460c      	mov	r4, r1
  401a1a:	dc26      	bgt.n	401a6a <__ieee754_rem_pio2+0x6a>
  401a1c:	2900      	cmp	r1, #0
  401a1e:	a38a      	add	r3, pc, #552	; (adr r3, 401c48 <__ieee754_rem_pio2+0x248>)
  401a20:	e9d3 2300 	ldrd	r2, r3, [r3]
  401a24:	f340 81b4 	ble.w	401d90 <__ieee754_rem_pio2+0x390>
  401a28:	f001 f94c 	bl	402cc4 <__aeabi_dsub>
  401a2c:	4b92      	ldr	r3, [pc, #584]	; (401c78 <__ieee754_rem_pio2+0x278>)
  401a2e:	429f      	cmp	r7, r3
  401a30:	4604      	mov	r4, r0
  401a32:	460d      	mov	r5, r1
  401a34:	f000 8090 	beq.w	401b58 <__ieee754_rem_pio2+0x158>
  401a38:	a385      	add	r3, pc, #532	; (adr r3, 401c50 <__ieee754_rem_pio2+0x250>)
  401a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
  401a3e:	f001 f941 	bl	402cc4 <__aeabi_dsub>
  401a42:	4602      	mov	r2, r0
  401a44:	460b      	mov	r3, r1
  401a46:	e9ca 2300 	strd	r2, r3, [sl]
  401a4a:	4620      	mov	r0, r4
  401a4c:	4629      	mov	r1, r5
  401a4e:	f001 f939 	bl	402cc4 <__aeabi_dsub>
  401a52:	a37f      	add	r3, pc, #508	; (adr r3, 401c50 <__ieee754_rem_pio2+0x250>)
  401a54:	e9d3 2300 	ldrd	r2, r3, [r3]
  401a58:	f001 f934 	bl	402cc4 <__aeabi_dsub>
  401a5c:	2501      	movs	r5, #1
  401a5e:	e9ca 0102 	strd	r0, r1, [sl, #8]
  401a62:	4628      	mov	r0, r5
  401a64:	b011      	add	sp, #68	; 0x44
  401a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401a6a:	4a84      	ldr	r2, [pc, #528]	; (401c7c <__ieee754_rem_pio2+0x27c>)
  401a6c:	4297      	cmp	r7, r2
  401a6e:	f340 8090 	ble.w	401b92 <__ieee754_rem_pio2+0x192>
  401a72:	4a83      	ldr	r2, [pc, #524]	; (401c80 <__ieee754_rem_pio2+0x280>)
  401a74:	4297      	cmp	r7, r2
  401a76:	dc65      	bgt.n	401b44 <__ieee754_rem_pio2+0x144>
  401a78:	153d      	asrs	r5, r7, #20
  401a7a:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
  401a7e:	eba7 5305 	sub.w	r3, r7, r5, lsl #20
  401a82:	4619      	mov	r1, r3
  401a84:	461f      	mov	r7, r3
  401a86:	4606      	mov	r6, r0
  401a88:	f001 fd6a 	bl	403560 <__aeabi_d2iz>
  401a8c:	f001 fa68 	bl	402f60 <__aeabi_i2d>
  401a90:	4680      	mov	r8, r0
  401a92:	4689      	mov	r9, r1
  401a94:	4602      	mov	r2, r0
  401a96:	460b      	mov	r3, r1
  401a98:	4630      	mov	r0, r6
  401a9a:	4639      	mov	r1, r7
  401a9c:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
  401aa0:	f001 f910 	bl	402cc4 <__aeabi_dsub>
  401aa4:	2200      	movs	r2, #0
  401aa6:	4b77      	ldr	r3, [pc, #476]	; (401c84 <__ieee754_rem_pio2+0x284>)
  401aa8:	f001 fac0 	bl	40302c <__aeabi_dmul>
  401aac:	4689      	mov	r9, r1
  401aae:	4680      	mov	r8, r0
  401ab0:	f001 fd56 	bl	403560 <__aeabi_d2iz>
  401ab4:	f001 fa54 	bl	402f60 <__aeabi_i2d>
  401ab8:	4602      	mov	r2, r0
  401aba:	460b      	mov	r3, r1
  401abc:	4606      	mov	r6, r0
  401abe:	460f      	mov	r7, r1
  401ac0:	4640      	mov	r0, r8
  401ac2:	4649      	mov	r1, r9
  401ac4:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
  401ac8:	f001 f8fc 	bl	402cc4 <__aeabi_dsub>
  401acc:	2200      	movs	r2, #0
  401ace:	4b6d      	ldr	r3, [pc, #436]	; (401c84 <__ieee754_rem_pio2+0x284>)
  401ad0:	f001 faac 	bl	40302c <__aeabi_dmul>
  401ad4:	2200      	movs	r2, #0
  401ad6:	2300      	movs	r3, #0
  401ad8:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
  401adc:	f001 fd0e 	bl	4034fc <__aeabi_dcmpeq>
  401ae0:	2800      	cmp	r0, #0
  401ae2:	f000 8173 	beq.w	401dcc <__ieee754_rem_pio2+0x3cc>
  401ae6:	2300      	movs	r3, #0
  401ae8:	4630      	mov	r0, r6
  401aea:	4639      	mov	r1, r7
  401aec:	2200      	movs	r2, #0
  401aee:	f001 fd05 	bl	4034fc <__aeabi_dcmpeq>
  401af2:	2800      	cmp	r0, #0
  401af4:	bf14      	ite	ne
  401af6:	2301      	movne	r3, #1
  401af8:	2302      	moveq	r3, #2
  401afa:	4a63      	ldr	r2, [pc, #396]	; (401c88 <__ieee754_rem_pio2+0x288>)
  401afc:	9201      	str	r2, [sp, #4]
  401afe:	2102      	movs	r1, #2
  401b00:	462a      	mov	r2, r5
  401b02:	9100      	str	r1, [sp, #0]
  401b04:	a80a      	add	r0, sp, #40	; 0x28
  401b06:	4651      	mov	r1, sl
  401b08:	f000 fac2 	bl	402090 <__kernel_rem_pio2>
  401b0c:	2c00      	cmp	r4, #0
  401b0e:	4605      	mov	r5, r0
  401b10:	da14      	bge.n	401b3c <__ieee754_rem_pio2+0x13c>
  401b12:	f8da 2004 	ldr.w	r2, [sl, #4]
  401b16:	f8da 300c 	ldr.w	r3, [sl, #12]
  401b1a:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
  401b1e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  401b22:	4245      	negs	r5, r0
  401b24:	f8ca 2004 	str.w	r2, [sl, #4]
  401b28:	f8ca 300c 	str.w	r3, [sl, #12]
  401b2c:	e006      	b.n	401b3c <__ieee754_rem_pio2+0x13c>
  401b2e:	e9c2 0100 	strd	r0, r1, [r2]
  401b32:	2500      	movs	r5, #0
  401b34:	2400      	movs	r4, #0
  401b36:	e9c2 4502 	strd	r4, r5, [r2, #8]
  401b3a:	2500      	movs	r5, #0
  401b3c:	4628      	mov	r0, r5
  401b3e:	b011      	add	sp, #68	; 0x44
  401b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401b44:	4602      	mov	r2, r0
  401b46:	460b      	mov	r3, r1
  401b48:	f001 f8bc 	bl	402cc4 <__aeabi_dsub>
  401b4c:	2500      	movs	r5, #0
  401b4e:	e9ca 0102 	strd	r0, r1, [sl, #8]
  401b52:	e9ca 0100 	strd	r0, r1, [sl]
  401b56:	e7f1      	b.n	401b3c <__ieee754_rem_pio2+0x13c>
  401b58:	a33f      	add	r3, pc, #252	; (adr r3, 401c58 <__ieee754_rem_pio2+0x258>)
  401b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
  401b5e:	f001 f8b1 	bl	402cc4 <__aeabi_dsub>
  401b62:	a33f      	add	r3, pc, #252	; (adr r3, 401c60 <__ieee754_rem_pio2+0x260>)
  401b64:	e9d3 2300 	ldrd	r2, r3, [r3]
  401b68:	460d      	mov	r5, r1
  401b6a:	4604      	mov	r4, r0
  401b6c:	f001 f8aa 	bl	402cc4 <__aeabi_dsub>
  401b70:	4602      	mov	r2, r0
  401b72:	460b      	mov	r3, r1
  401b74:	e9ca 2300 	strd	r2, r3, [sl]
  401b78:	4629      	mov	r1, r5
  401b7a:	4620      	mov	r0, r4
  401b7c:	f001 f8a2 	bl	402cc4 <__aeabi_dsub>
  401b80:	a337      	add	r3, pc, #220	; (adr r3, 401c60 <__ieee754_rem_pio2+0x260>)
  401b82:	e9d3 2300 	ldrd	r2, r3, [r3]
  401b86:	f001 f89d 	bl	402cc4 <__aeabi_dsub>
  401b8a:	2501      	movs	r5, #1
  401b8c:	e9ca 0102 	strd	r0, r1, [sl, #8]
  401b90:	e7d4      	b.n	401b3c <__ieee754_rem_pio2+0x13c>
  401b92:	f000 ff7b 	bl	402a8c <fabs>
  401b96:	a334      	add	r3, pc, #208	; (adr r3, 401c68 <__ieee754_rem_pio2+0x268>)
  401b98:	e9d3 2300 	ldrd	r2, r3, [r3]
  401b9c:	4680      	mov	r8, r0
  401b9e:	4689      	mov	r9, r1
  401ba0:	f001 fa44 	bl	40302c <__aeabi_dmul>
  401ba4:	2200      	movs	r2, #0
  401ba6:	4b39      	ldr	r3, [pc, #228]	; (401c8c <__ieee754_rem_pio2+0x28c>)
  401ba8:	f001 f88e 	bl	402cc8 <__adddf3>
  401bac:	f001 fcd8 	bl	403560 <__aeabi_d2iz>
  401bb0:	4605      	mov	r5, r0
  401bb2:	f001 f9d5 	bl	402f60 <__aeabi_i2d>
  401bb6:	a324      	add	r3, pc, #144	; (adr r3, 401c48 <__ieee754_rem_pio2+0x248>)
  401bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
  401bbc:	e9cd 0104 	strd	r0, r1, [sp, #16]
  401bc0:	f001 fa34 	bl	40302c <__aeabi_dmul>
  401bc4:	4602      	mov	r2, r0
  401bc6:	460b      	mov	r3, r1
  401bc8:	4640      	mov	r0, r8
  401bca:	4649      	mov	r1, r9
  401bcc:	f001 f87a 	bl	402cc4 <__aeabi_dsub>
  401bd0:	a31f      	add	r3, pc, #124	; (adr r3, 401c50 <__ieee754_rem_pio2+0x250>)
  401bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
  401bd6:	4680      	mov	r8, r0
  401bd8:	4689      	mov	r9, r1
  401bda:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  401bde:	f001 fa25 	bl	40302c <__aeabi_dmul>
  401be2:	2d1f      	cmp	r5, #31
  401be4:	e9cd 0102 	strd	r0, r1, [sp, #8]
  401be8:	dc54      	bgt.n	401c94 <__ieee754_rem_pio2+0x294>
  401bea:	4b29      	ldr	r3, [pc, #164]	; (401c90 <__ieee754_rem_pio2+0x290>)
  401bec:	1e6a      	subs	r2, r5, #1
  401bee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  401bf2:	429f      	cmp	r7, r3
  401bf4:	d04e      	beq.n	401c94 <__ieee754_rem_pio2+0x294>
  401bf6:	4602      	mov	r2, r0
  401bf8:	460b      	mov	r3, r1
  401bfa:	4640      	mov	r0, r8
  401bfc:	4649      	mov	r1, r9
  401bfe:	f001 f861 	bl	402cc4 <__aeabi_dsub>
  401c02:	4602      	mov	r2, r0
  401c04:	460b      	mov	r3, r1
  401c06:	e9ca 2300 	strd	r2, r3, [sl]
  401c0a:	4683      	mov	fp, r0
  401c0c:	460e      	mov	r6, r1
  401c0e:	465a      	mov	r2, fp
  401c10:	4633      	mov	r3, r6
  401c12:	4640      	mov	r0, r8
  401c14:	4649      	mov	r1, r9
  401c16:	f001 f855 	bl	402cc4 <__aeabi_dsub>
  401c1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  401c1e:	f001 f851 	bl	402cc4 <__aeabi_dsub>
  401c22:	2c00      	cmp	r4, #0
  401c24:	4602      	mov	r2, r0
  401c26:	460b      	mov	r3, r1
  401c28:	e9ca 2302 	strd	r2, r3, [sl, #8]
  401c2c:	da86      	bge.n	401b3c <__ieee754_rem_pio2+0x13c>
  401c2e:	465b      	mov	r3, fp
  401c30:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  401c34:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  401c38:	e88a 0048 	stmia.w	sl, {r3, r6}
  401c3c:	f8ca 100c 	str.w	r1, [sl, #12]
  401c40:	f8ca 0008 	str.w	r0, [sl, #8]
  401c44:	426d      	negs	r5, r5
  401c46:	e779      	b.n	401b3c <__ieee754_rem_pio2+0x13c>
  401c48:	54400000 	.word	0x54400000
  401c4c:	3ff921fb 	.word	0x3ff921fb
  401c50:	1a626331 	.word	0x1a626331
  401c54:	3dd0b461 	.word	0x3dd0b461
  401c58:	1a600000 	.word	0x1a600000
  401c5c:	3dd0b461 	.word	0x3dd0b461
  401c60:	2e037073 	.word	0x2e037073
  401c64:	3ba3198a 	.word	0x3ba3198a
  401c68:	6dc9c883 	.word	0x6dc9c883
  401c6c:	3fe45f30 	.word	0x3fe45f30
  401c70:	3fe921fb 	.word	0x3fe921fb
  401c74:	4002d97b 	.word	0x4002d97b
  401c78:	3ff921fb 	.word	0x3ff921fb
  401c7c:	413921fb 	.word	0x413921fb
  401c80:	7fefffff 	.word	0x7fefffff
  401c84:	41700000 	.word	0x41700000
  401c88:	00406390 	.word	0x00406390
  401c8c:	3fe00000 	.word	0x3fe00000
  401c90:	00406310 	.word	0x00406310
  401c94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  401c98:	4640      	mov	r0, r8
  401c9a:	4649      	mov	r1, r9
  401c9c:	f001 f812 	bl	402cc4 <__aeabi_dsub>
  401ca0:	153a      	asrs	r2, r7, #20
  401ca2:	f3c1 530a 	ubfx	r3, r1, #20, #11
  401ca6:	1ad3      	subs	r3, r2, r3
  401ca8:	2b10      	cmp	r3, #16
  401caa:	4683      	mov	fp, r0
  401cac:	460e      	mov	r6, r1
  401cae:	9209      	str	r2, [sp, #36]	; 0x24
  401cb0:	e9ca 0100 	strd	r0, r1, [sl]
  401cb4:	ddab      	ble.n	401c0e <__ieee754_rem_pio2+0x20e>
  401cb6:	a358      	add	r3, pc, #352	; (adr r3, 401e18 <__ieee754_rem_pio2+0x418>)
  401cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
  401cbc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  401cc0:	f001 f9b4 	bl	40302c <__aeabi_dmul>
  401cc4:	4606      	mov	r6, r0
  401cc6:	460f      	mov	r7, r1
  401cc8:	4602      	mov	r2, r0
  401cca:	460b      	mov	r3, r1
  401ccc:	4640      	mov	r0, r8
  401cce:	4649      	mov	r1, r9
  401cd0:	f000 fff8 	bl	402cc4 <__aeabi_dsub>
  401cd4:	e9cd 0106 	strd	r0, r1, [sp, #24]
  401cd8:	4602      	mov	r2, r0
  401cda:	460b      	mov	r3, r1
  401cdc:	4640      	mov	r0, r8
  401cde:	4649      	mov	r1, r9
  401ce0:	f000 fff0 	bl	402cc4 <__aeabi_dsub>
  401ce4:	4632      	mov	r2, r6
  401ce6:	463b      	mov	r3, r7
  401ce8:	f000 ffec 	bl	402cc4 <__aeabi_dsub>
  401cec:	a34c      	add	r3, pc, #304	; (adr r3, 401e20 <__ieee754_rem_pio2+0x420>)
  401cee:	e9d3 2300 	ldrd	r2, r3, [r3]
  401cf2:	4606      	mov	r6, r0
  401cf4:	460f      	mov	r7, r1
  401cf6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  401cfa:	f001 f997 	bl	40302c <__aeabi_dmul>
  401cfe:	4632      	mov	r2, r6
  401d00:	463b      	mov	r3, r7
  401d02:	f000 ffdf 	bl	402cc4 <__aeabi_dsub>
  401d06:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
  401d0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  401d0e:	4602      	mov	r2, r0
  401d10:	460b      	mov	r3, r1
  401d12:	4640      	mov	r0, r8
  401d14:	4649      	mov	r1, r9
  401d16:	f000 ffd5 	bl	402cc4 <__aeabi_dsub>
  401d1a:	460b      	mov	r3, r1
  401d1c:	f3c1 570a 	ubfx	r7, r1, #20, #11
  401d20:	460e      	mov	r6, r1
  401d22:	9909      	ldr	r1, [sp, #36]	; 0x24
  401d24:	1bcf      	subs	r7, r1, r7
  401d26:	4602      	mov	r2, r0
  401d28:	2f31      	cmp	r7, #49	; 0x31
  401d2a:	4683      	mov	fp, r0
  401d2c:	e9ca 2300 	strd	r2, r3, [sl]
  401d30:	dd6c      	ble.n	401e0c <__ieee754_rem_pio2+0x40c>
  401d32:	a33d      	add	r3, pc, #244	; (adr r3, 401e28 <__ieee754_rem_pio2+0x428>)
  401d34:	e9d3 2300 	ldrd	r2, r3, [r3]
  401d38:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  401d3c:	f001 f976 	bl	40302c <__aeabi_dmul>
  401d40:	4606      	mov	r6, r0
  401d42:	460f      	mov	r7, r1
  401d44:	4602      	mov	r2, r0
  401d46:	460b      	mov	r3, r1
  401d48:	4640      	mov	r0, r8
  401d4a:	4649      	mov	r1, r9
  401d4c:	e9cd 8906 	strd	r8, r9, [sp, #24]
  401d50:	f000 ffb8 	bl	402cc4 <__aeabi_dsub>
  401d54:	4602      	mov	r2, r0
  401d56:	460b      	mov	r3, r1
  401d58:	4680      	mov	r8, r0
  401d5a:	4689      	mov	r9, r1
  401d5c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  401d60:	f000 ffb0 	bl	402cc4 <__aeabi_dsub>
  401d64:	4632      	mov	r2, r6
  401d66:	463b      	mov	r3, r7
  401d68:	f000 ffac 	bl	402cc4 <__aeabi_dsub>
  401d6c:	a330      	add	r3, pc, #192	; (adr r3, 401e30 <__ieee754_rem_pio2+0x430>)
  401d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
  401d72:	4606      	mov	r6, r0
  401d74:	460f      	mov	r7, r1
  401d76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  401d7a:	f001 f957 	bl	40302c <__aeabi_dmul>
  401d7e:	4632      	mov	r2, r6
  401d80:	463b      	mov	r3, r7
  401d82:	f000 ff9f 	bl	402cc4 <__aeabi_dsub>
  401d86:	4602      	mov	r2, r0
  401d88:	460b      	mov	r3, r1
  401d8a:	e9cd 2302 	strd	r2, r3, [sp, #8]
  401d8e:	e734      	b.n	401bfa <__ieee754_rem_pio2+0x1fa>
  401d90:	f000 ff9a 	bl	402cc8 <__adddf3>
  401d94:	4b2a      	ldr	r3, [pc, #168]	; (401e40 <__ieee754_rem_pio2+0x440>)
  401d96:	429f      	cmp	r7, r3
  401d98:	4604      	mov	r4, r0
  401d9a:	460d      	mov	r5, r1
  401d9c:	d018      	beq.n	401dd0 <__ieee754_rem_pio2+0x3d0>
  401d9e:	a326      	add	r3, pc, #152	; (adr r3, 401e38 <__ieee754_rem_pio2+0x438>)
  401da0:	e9d3 2300 	ldrd	r2, r3, [r3]
  401da4:	f000 ff90 	bl	402cc8 <__adddf3>
  401da8:	4602      	mov	r2, r0
  401daa:	460b      	mov	r3, r1
  401dac:	e9ca 2300 	strd	r2, r3, [sl]
  401db0:	4629      	mov	r1, r5
  401db2:	4620      	mov	r0, r4
  401db4:	f000 ff86 	bl	402cc4 <__aeabi_dsub>
  401db8:	a31f      	add	r3, pc, #124	; (adr r3, 401e38 <__ieee754_rem_pio2+0x438>)
  401dba:	e9d3 2300 	ldrd	r2, r3, [r3]
  401dbe:	f000 ff83 	bl	402cc8 <__adddf3>
  401dc2:	f04f 35ff 	mov.w	r5, #4294967295
  401dc6:	e9ca 0102 	strd	r0, r1, [sl, #8]
  401dca:	e6b7      	b.n	401b3c <__ieee754_rem_pio2+0x13c>
  401dcc:	2303      	movs	r3, #3
  401dce:	e694      	b.n	401afa <__ieee754_rem_pio2+0xfa>
  401dd0:	a311      	add	r3, pc, #68	; (adr r3, 401e18 <__ieee754_rem_pio2+0x418>)
  401dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
  401dd6:	f000 ff77 	bl	402cc8 <__adddf3>
  401dda:	a311      	add	r3, pc, #68	; (adr r3, 401e20 <__ieee754_rem_pio2+0x420>)
  401ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
  401de0:	460d      	mov	r5, r1
  401de2:	4604      	mov	r4, r0
  401de4:	f000 ff70 	bl	402cc8 <__adddf3>
  401de8:	4602      	mov	r2, r0
  401dea:	460b      	mov	r3, r1
  401dec:	e9ca 2300 	strd	r2, r3, [sl]
  401df0:	4629      	mov	r1, r5
  401df2:	4620      	mov	r0, r4
  401df4:	f000 ff66 	bl	402cc4 <__aeabi_dsub>
  401df8:	a309      	add	r3, pc, #36	; (adr r3, 401e20 <__ieee754_rem_pio2+0x420>)
  401dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
  401dfe:	f000 ff63 	bl	402cc8 <__adddf3>
  401e02:	f04f 35ff 	mov.w	r5, #4294967295
  401e06:	e9ca 0102 	strd	r0, r1, [sl, #8]
  401e0a:	e697      	b.n	401b3c <__ieee754_rem_pio2+0x13c>
  401e0c:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
  401e10:	e6fd      	b.n	401c0e <__ieee754_rem_pio2+0x20e>
  401e12:	bf00      	nop
  401e14:	f3af 8000 	nop.w
  401e18:	1a600000 	.word	0x1a600000
  401e1c:	3dd0b461 	.word	0x3dd0b461
  401e20:	2e037073 	.word	0x2e037073
  401e24:	3ba3198a 	.word	0x3ba3198a
  401e28:	2e000000 	.word	0x2e000000
  401e2c:	3ba3198a 	.word	0x3ba3198a
  401e30:	252049c1 	.word	0x252049c1
  401e34:	397b839a 	.word	0x397b839a
  401e38:	1a626331 	.word	0x1a626331
  401e3c:	3dd0b461 	.word	0x3dd0b461
  401e40:	3ff921fb 	.word	0x3ff921fb
  401e44:	00000000 	.word	0x00000000

00401e48 <__kernel_cos>:
  401e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401e4c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  401e50:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
  401e54:	b085      	sub	sp, #20
  401e56:	460c      	mov	r4, r1
  401e58:	4692      	mov	sl, r2
  401e5a:	469b      	mov	fp, r3
  401e5c:	4605      	mov	r5, r0
  401e5e:	da6b      	bge.n	401f38 <__kernel_cos+0xf0>
  401e60:	f001 fb7e 	bl	403560 <__aeabi_d2iz>
  401e64:	2800      	cmp	r0, #0
  401e66:	f000 80e8 	beq.w	40203a <__kernel_cos+0x1f2>
  401e6a:	462a      	mov	r2, r5
  401e6c:	4623      	mov	r3, r4
  401e6e:	4628      	mov	r0, r5
  401e70:	4621      	mov	r1, r4
  401e72:	f001 f8db 	bl	40302c <__aeabi_dmul>
  401e76:	a374      	add	r3, pc, #464	; (adr r3, 402048 <__kernel_cos+0x200>)
  401e78:	e9d3 2300 	ldrd	r2, r3, [r3]
  401e7c:	4680      	mov	r8, r0
  401e7e:	4689      	mov	r9, r1
  401e80:	f001 f8d4 	bl	40302c <__aeabi_dmul>
  401e84:	a372      	add	r3, pc, #456	; (adr r3, 402050 <__kernel_cos+0x208>)
  401e86:	e9d3 2300 	ldrd	r2, r3, [r3]
  401e8a:	f000 ff1d 	bl	402cc8 <__adddf3>
  401e8e:	4642      	mov	r2, r8
  401e90:	464b      	mov	r3, r9
  401e92:	f001 f8cb 	bl	40302c <__aeabi_dmul>
  401e96:	a370      	add	r3, pc, #448	; (adr r3, 402058 <__kernel_cos+0x210>)
  401e98:	e9d3 2300 	ldrd	r2, r3, [r3]
  401e9c:	f000 ff12 	bl	402cc4 <__aeabi_dsub>
  401ea0:	4642      	mov	r2, r8
  401ea2:	464b      	mov	r3, r9
  401ea4:	f001 f8c2 	bl	40302c <__aeabi_dmul>
  401ea8:	a36d      	add	r3, pc, #436	; (adr r3, 402060 <__kernel_cos+0x218>)
  401eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
  401eae:	f000 ff0b 	bl	402cc8 <__adddf3>
  401eb2:	4642      	mov	r2, r8
  401eb4:	464b      	mov	r3, r9
  401eb6:	f001 f8b9 	bl	40302c <__aeabi_dmul>
  401eba:	a36b      	add	r3, pc, #428	; (adr r3, 402068 <__kernel_cos+0x220>)
  401ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
  401ec0:	f000 ff00 	bl	402cc4 <__aeabi_dsub>
  401ec4:	4642      	mov	r2, r8
  401ec6:	464b      	mov	r3, r9
  401ec8:	f001 f8b0 	bl	40302c <__aeabi_dmul>
  401ecc:	a368      	add	r3, pc, #416	; (adr r3, 402070 <__kernel_cos+0x228>)
  401ece:	e9d3 2300 	ldrd	r2, r3, [r3]
  401ed2:	f000 fef9 	bl	402cc8 <__adddf3>
  401ed6:	4642      	mov	r2, r8
  401ed8:	464b      	mov	r3, r9
  401eda:	f001 f8a7 	bl	40302c <__aeabi_dmul>
  401ede:	e9cd 0100 	strd	r0, r1, [sp]
  401ee2:	2200      	movs	r2, #0
  401ee4:	4b64      	ldr	r3, [pc, #400]	; (402078 <__kernel_cos+0x230>)
  401ee6:	4640      	mov	r0, r8
  401ee8:	4649      	mov	r1, r9
  401eea:	f001 f89f 	bl	40302c <__aeabi_dmul>
  401eee:	e9dd 2300 	ldrd	r2, r3, [sp]
  401ef2:	4606      	mov	r6, r0
  401ef4:	460f      	mov	r7, r1
  401ef6:	4640      	mov	r0, r8
  401ef8:	4649      	mov	r1, r9
  401efa:	f001 f897 	bl	40302c <__aeabi_dmul>
  401efe:	4652      	mov	r2, sl
  401f00:	4680      	mov	r8, r0
  401f02:	4689      	mov	r9, r1
  401f04:	465b      	mov	r3, fp
  401f06:	4628      	mov	r0, r5
  401f08:	4621      	mov	r1, r4
  401f0a:	f001 f88f 	bl	40302c <__aeabi_dmul>
  401f0e:	4602      	mov	r2, r0
  401f10:	460b      	mov	r3, r1
  401f12:	4640      	mov	r0, r8
  401f14:	4649      	mov	r1, r9
  401f16:	f000 fed5 	bl	402cc4 <__aeabi_dsub>
  401f1a:	4602      	mov	r2, r0
  401f1c:	460b      	mov	r3, r1
  401f1e:	4630      	mov	r0, r6
  401f20:	4639      	mov	r1, r7
  401f22:	f000 fecf 	bl	402cc4 <__aeabi_dsub>
  401f26:	4602      	mov	r2, r0
  401f28:	460b      	mov	r3, r1
  401f2a:	2000      	movs	r0, #0
  401f2c:	4953      	ldr	r1, [pc, #332]	; (40207c <__kernel_cos+0x234>)
  401f2e:	f000 fec9 	bl	402cc4 <__aeabi_dsub>
  401f32:	b005      	add	sp, #20
  401f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401f38:	4602      	mov	r2, r0
  401f3a:	460b      	mov	r3, r1
  401f3c:	f001 f876 	bl	40302c <__aeabi_dmul>
  401f40:	a341      	add	r3, pc, #260	; (adr r3, 402048 <__kernel_cos+0x200>)
  401f42:	e9d3 2300 	ldrd	r2, r3, [r3]
  401f46:	4680      	mov	r8, r0
  401f48:	4689      	mov	r9, r1
  401f4a:	f001 f86f 	bl	40302c <__aeabi_dmul>
  401f4e:	a340      	add	r3, pc, #256	; (adr r3, 402050 <__kernel_cos+0x208>)
  401f50:	e9d3 2300 	ldrd	r2, r3, [r3]
  401f54:	f000 feb8 	bl	402cc8 <__adddf3>
  401f58:	4642      	mov	r2, r8
  401f5a:	464b      	mov	r3, r9
  401f5c:	f001 f866 	bl	40302c <__aeabi_dmul>
  401f60:	a33d      	add	r3, pc, #244	; (adr r3, 402058 <__kernel_cos+0x210>)
  401f62:	e9d3 2300 	ldrd	r2, r3, [r3]
  401f66:	f000 fead 	bl	402cc4 <__aeabi_dsub>
  401f6a:	4642      	mov	r2, r8
  401f6c:	464b      	mov	r3, r9
  401f6e:	f001 f85d 	bl	40302c <__aeabi_dmul>
  401f72:	a33b      	add	r3, pc, #236	; (adr r3, 402060 <__kernel_cos+0x218>)
  401f74:	e9d3 2300 	ldrd	r2, r3, [r3]
  401f78:	f000 fea6 	bl	402cc8 <__adddf3>
  401f7c:	4642      	mov	r2, r8
  401f7e:	464b      	mov	r3, r9
  401f80:	f001 f854 	bl	40302c <__aeabi_dmul>
  401f84:	a338      	add	r3, pc, #224	; (adr r3, 402068 <__kernel_cos+0x220>)
  401f86:	e9d3 2300 	ldrd	r2, r3, [r3]
  401f8a:	f000 fe9b 	bl	402cc4 <__aeabi_dsub>
  401f8e:	4642      	mov	r2, r8
  401f90:	464b      	mov	r3, r9
  401f92:	f001 f84b 	bl	40302c <__aeabi_dmul>
  401f96:	a336      	add	r3, pc, #216	; (adr r3, 402070 <__kernel_cos+0x228>)
  401f98:	e9d3 2300 	ldrd	r2, r3, [r3]
  401f9c:	f000 fe94 	bl	402cc8 <__adddf3>
  401fa0:	464b      	mov	r3, r9
  401fa2:	4642      	mov	r2, r8
  401fa4:	f001 f842 	bl	40302c <__aeabi_dmul>
  401fa8:	4b35      	ldr	r3, [pc, #212]	; (402080 <__kernel_cos+0x238>)
  401faa:	429e      	cmp	r6, r3
  401fac:	e9cd 0100 	strd	r0, r1, [sp]
  401fb0:	dd97      	ble.n	401ee2 <__kernel_cos+0x9a>
  401fb2:	4b34      	ldr	r3, [pc, #208]	; (402084 <__kernel_cos+0x23c>)
  401fb4:	429e      	cmp	r6, r3
  401fb6:	f04f 0200 	mov.w	r2, #0
  401fba:	dc38      	bgt.n	40202e <__kernel_cos+0x1e6>
  401fbc:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
  401fc0:	2000      	movs	r0, #0
  401fc2:	492e      	ldr	r1, [pc, #184]	; (40207c <__kernel_cos+0x234>)
  401fc4:	4616      	mov	r6, r2
  401fc6:	461f      	mov	r7, r3
  401fc8:	f000 fe7c 	bl	402cc4 <__aeabi_dsub>
  401fcc:	e9cd 0102 	strd	r0, r1, [sp, #8]
  401fd0:	2200      	movs	r2, #0
  401fd2:	4b29      	ldr	r3, [pc, #164]	; (402078 <__kernel_cos+0x230>)
  401fd4:	4640      	mov	r0, r8
  401fd6:	4649      	mov	r1, r9
  401fd8:	f001 f828 	bl	40302c <__aeabi_dmul>
  401fdc:	4632      	mov	r2, r6
  401fde:	463b      	mov	r3, r7
  401fe0:	f000 fe70 	bl	402cc4 <__aeabi_dsub>
  401fe4:	e9dd 2300 	ldrd	r2, r3, [sp]
  401fe8:	4606      	mov	r6, r0
  401fea:	460f      	mov	r7, r1
  401fec:	4640      	mov	r0, r8
  401fee:	4649      	mov	r1, r9
  401ff0:	f001 f81c 	bl	40302c <__aeabi_dmul>
  401ff4:	4652      	mov	r2, sl
  401ff6:	4680      	mov	r8, r0
  401ff8:	4689      	mov	r9, r1
  401ffa:	465b      	mov	r3, fp
  401ffc:	4628      	mov	r0, r5
  401ffe:	4621      	mov	r1, r4
  402000:	f001 f814 	bl	40302c <__aeabi_dmul>
  402004:	4602      	mov	r2, r0
  402006:	460b      	mov	r3, r1
  402008:	4640      	mov	r0, r8
  40200a:	4649      	mov	r1, r9
  40200c:	f000 fe5a 	bl	402cc4 <__aeabi_dsub>
  402010:	4602      	mov	r2, r0
  402012:	460b      	mov	r3, r1
  402014:	4630      	mov	r0, r6
  402016:	4639      	mov	r1, r7
  402018:	f000 fe54 	bl	402cc4 <__aeabi_dsub>
  40201c:	4602      	mov	r2, r0
  40201e:	460b      	mov	r3, r1
  402020:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  402024:	f000 fe4e 	bl	402cc4 <__aeabi_dsub>
  402028:	b005      	add	sp, #20
  40202a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40202e:	4b16      	ldr	r3, [pc, #88]	; (402088 <__kernel_cos+0x240>)
  402030:	4f16      	ldr	r7, [pc, #88]	; (40208c <__kernel_cos+0x244>)
  402032:	e9cd 2302 	strd	r2, r3, [sp, #8]
  402036:	2600      	movs	r6, #0
  402038:	e7ca      	b.n	401fd0 <__kernel_cos+0x188>
  40203a:	4910      	ldr	r1, [pc, #64]	; (40207c <__kernel_cos+0x234>)
  40203c:	2000      	movs	r0, #0
  40203e:	b005      	add	sp, #20
  402040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402044:	f3af 8000 	nop.w
  402048:	be8838d4 	.word	0xbe8838d4
  40204c:	bda8fae9 	.word	0xbda8fae9
  402050:	bdb4b1c4 	.word	0xbdb4b1c4
  402054:	3e21ee9e 	.word	0x3e21ee9e
  402058:	809c52ad 	.word	0x809c52ad
  40205c:	3e927e4f 	.word	0x3e927e4f
  402060:	19cb1590 	.word	0x19cb1590
  402064:	3efa01a0 	.word	0x3efa01a0
  402068:	16c15177 	.word	0x16c15177
  40206c:	3f56c16c 	.word	0x3f56c16c
  402070:	5555554c 	.word	0x5555554c
  402074:	3fa55555 	.word	0x3fa55555
  402078:	3fe00000 	.word	0x3fe00000
  40207c:	3ff00000 	.word	0x3ff00000
  402080:	3fd33332 	.word	0x3fd33332
  402084:	3fe90000 	.word	0x3fe90000
  402088:	3fe70000 	.word	0x3fe70000
  40208c:	3fd20000 	.word	0x3fd20000

00402090 <__kernel_rem_pio2>:
  402090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402094:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
  402098:	4c9c      	ldr	r4, [pc, #624]	; (40230c <__kernel_rem_pio2+0x27c>)
  40209a:	9ea2      	ldr	r6, [sp, #648]	; 0x288
  40209c:	4d9c      	ldr	r5, [pc, #624]	; (402310 <__kernel_rem_pio2+0x280>)
  40209e:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
  4020a2:	9405      	str	r4, [sp, #20]
  4020a4:	4626      	mov	r6, r4
  4020a6:	1ed4      	subs	r4, r2, #3
  4020a8:	fb85 7504 	smull	r7, r5, r5, r4
  4020ac:	17e4      	asrs	r4, r4, #31
  4020ae:	ebc4 04a5 	rsb	r4, r4, r5, asr #2
  4020b2:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
  4020b6:	461d      	mov	r5, r3
  4020b8:	9308      	str	r3, [sp, #32]
  4020ba:	1c63      	adds	r3, r4, #1
  4020bc:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
  4020c0:	3d01      	subs	r5, #1
  4020c2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  4020c6:	9304      	str	r3, [sp, #16]
  4020c8:	462b      	mov	r3, r5
  4020ca:	9409      	str	r4, [sp, #36]	; 0x24
  4020cc:	9502      	str	r5, [sp, #8]
  4020ce:	1b65      	subs	r5, r4, r5
  4020d0:	18f4      	adds	r4, r6, r3
  4020d2:	9003      	str	r0, [sp, #12]
  4020d4:	9106      	str	r1, [sp, #24]
  4020d6:	d41a      	bmi.n	40210e <__kernel_rem_pio2+0x7e>
  4020d8:	442c      	add	r4, r5
  4020da:	3401      	adds	r4, #1
  4020dc:	f10d 0878 	add.w	r8, sp, #120	; 0x78
  4020e0:	2600      	movs	r6, #0
  4020e2:	2700      	movs	r7, #0
  4020e4:	f8dd 928c 	ldr.w	r9, [sp, #652]	; 0x28c
  4020e8:	e008      	b.n	4020fc <__kernel_rem_pio2+0x6c>
  4020ea:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
  4020ee:	f000 ff37 	bl	402f60 <__aeabi_i2d>
  4020f2:	3501      	adds	r5, #1
  4020f4:	42a5      	cmp	r5, r4
  4020f6:	e9e8 0102 	strd	r0, r1, [r8, #8]!
  4020fa:	d008      	beq.n	40210e <__kernel_rem_pio2+0x7e>
  4020fc:	2d00      	cmp	r5, #0
  4020fe:	daf4      	bge.n	4020ea <__kernel_rem_pio2+0x5a>
  402100:	3501      	adds	r5, #1
  402102:	4630      	mov	r0, r6
  402104:	4639      	mov	r1, r7
  402106:	42a5      	cmp	r5, r4
  402108:	e9e8 0102 	strd	r0, r1, [r8, #8]!
  40210c:	d1f6      	bne.n	4020fc <__kernel_rem_pio2+0x6c>
  40210e:	9b05      	ldr	r3, [sp, #20]
  402110:	2b00      	cmp	r3, #0
  402112:	db2e      	blt.n	402172 <__kernel_rem_pio2+0xe2>
  402114:	9b08      	ldr	r3, [sp, #32]
  402116:	ea4f 09c3 	mov.w	r9, r3, lsl #3
  40211a:	9b03      	ldr	r3, [sp, #12]
  40211c:	f1a9 0808 	sub.w	r8, r9, #8
  402120:	4498      	add	r8, r3
  402122:	ab20      	add	r3, sp, #128	; 0x80
  402124:	4499      	add	r9, r3
  402126:	9b05      	ldr	r3, [sp, #20]
  402128:	aa70      	add	r2, sp, #448	; 0x1c0
  40212a:	eb02 0bc3 	add.w	fp, r2, r3, lsl #3
  40212e:	f50d 7adc 	add.w	sl, sp, #440	; 0x1b8
  402132:	9b02      	ldr	r3, [sp, #8]
  402134:	2b00      	cmp	r3, #0
  402136:	f2c0 830f 	blt.w	402758 <__kernel_rem_pio2+0x6c8>
  40213a:	9b03      	ldr	r3, [sp, #12]
  40213c:	464d      	mov	r5, r9
  40213e:	f1a3 0408 	sub.w	r4, r3, #8
  402142:	2600      	movs	r6, #0
  402144:	2700      	movs	r7, #0
  402146:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
  40214a:	e9f4 0102 	ldrd	r0, r1, [r4, #8]!
  40214e:	f000 ff6d 	bl	40302c <__aeabi_dmul>
  402152:	4602      	mov	r2, r0
  402154:	460b      	mov	r3, r1
  402156:	4630      	mov	r0, r6
  402158:	4639      	mov	r1, r7
  40215a:	f000 fdb5 	bl	402cc8 <__adddf3>
  40215e:	4544      	cmp	r4, r8
  402160:	4606      	mov	r6, r0
  402162:	460f      	mov	r7, r1
  402164:	d1ef      	bne.n	402146 <__kernel_rem_pio2+0xb6>
  402166:	e9ea 6702 	strd	r6, r7, [sl, #8]!
  40216a:	45da      	cmp	sl, fp
  40216c:	f109 0908 	add.w	r9, r9, #8
  402170:	d1df      	bne.n	402132 <__kernel_rem_pio2+0xa2>
  402172:	9805      	ldr	r0, [sp, #20]
  402174:	9a08      	ldr	r2, [sp, #32]
  402176:	9000      	str	r0, [sp, #0]
  402178:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
  40217c:	3b01      	subs	r3, #1
  40217e:	009b      	lsls	r3, r3, #2
  402180:	ac0c      	add	r4, sp, #48	; 0x30
  402182:	1f19      	subs	r1, r3, #4
  402184:	4423      	add	r3, r4
  402186:	f102 5200 	add.w	r2, r2, #536870912	; 0x20000000
  40218a:	930b      	str	r3, [sp, #44]	; 0x2c
  40218c:	9b03      	ldr	r3, [sp, #12]
  40218e:	3a01      	subs	r2, #1
  402190:	4421      	add	r1, r4
  402192:	910a      	str	r1, [sp, #40]	; 0x28
  402194:	eb03 0bc2 	add.w	fp, r3, r2, lsl #3
  402198:	9a00      	ldr	r2, [sp, #0]
  40219a:	a998      	add	r1, sp, #608	; 0x260
  40219c:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
  4021a0:	2a00      	cmp	r2, #0
  4021a2:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
  4021a6:	4613      	mov	r3, r2
  4021a8:	dd2b      	ble.n	402202 <__kernel_rem_pio2+0x172>
  4021aa:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
  4021ae:	f1a8 08a8 	sub.w	r8, r8, #168	; 0xa8
  4021b2:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
  4021b6:	f50d 7adc 	add.w	sl, sp, #440	; 0x1b8
  4021ba:	2200      	movs	r2, #0
  4021bc:	4b55      	ldr	r3, [pc, #340]	; (402314 <__kernel_rem_pio2+0x284>)
  4021be:	4620      	mov	r0, r4
  4021c0:	4629      	mov	r1, r5
  4021c2:	f000 ff33 	bl	40302c <__aeabi_dmul>
  4021c6:	f001 f9cb 	bl	403560 <__aeabi_d2iz>
  4021ca:	f000 fec9 	bl	402f60 <__aeabi_i2d>
  4021ce:	2200      	movs	r2, #0
  4021d0:	4b51      	ldr	r3, [pc, #324]	; (402318 <__kernel_rem_pio2+0x288>)
  4021d2:	4606      	mov	r6, r0
  4021d4:	460f      	mov	r7, r1
  4021d6:	f000 ff29 	bl	40302c <__aeabi_dmul>
  4021da:	4602      	mov	r2, r0
  4021dc:	460b      	mov	r3, r1
  4021de:	4620      	mov	r0, r4
  4021e0:	4629      	mov	r1, r5
  4021e2:	f000 fd6f 	bl	402cc4 <__aeabi_dsub>
  4021e6:	f001 f9bb 	bl	403560 <__aeabi_d2iz>
  4021ea:	e878 2302 	ldrd	r2, r3, [r8], #-8
  4021ee:	f849 0f04 	str.w	r0, [r9, #4]!
  4021f2:	4639      	mov	r1, r7
  4021f4:	4630      	mov	r0, r6
  4021f6:	f000 fd67 	bl	402cc8 <__adddf3>
  4021fa:	45d0      	cmp	r8, sl
  4021fc:	4604      	mov	r4, r0
  4021fe:	460d      	mov	r5, r1
  402200:	d1db      	bne.n	4021ba <__kernel_rem_pio2+0x12a>
  402202:	f8dd 9010 	ldr.w	r9, [sp, #16]
  402206:	4620      	mov	r0, r4
  402208:	4629      	mov	r1, r5
  40220a:	464a      	mov	r2, r9
  40220c:	f000 fcd0 	bl	402bb0 <scalbn>
  402210:	2200      	movs	r2, #0
  402212:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
  402216:	4604      	mov	r4, r0
  402218:	460d      	mov	r5, r1
  40221a:	f000 ff07 	bl	40302c <__aeabi_dmul>
  40221e:	f000 fc3b 	bl	402a98 <floor>
  402222:	2200      	movs	r2, #0
  402224:	4b3d      	ldr	r3, [pc, #244]	; (40231c <__kernel_rem_pio2+0x28c>)
  402226:	f000 ff01 	bl	40302c <__aeabi_dmul>
  40222a:	4602      	mov	r2, r0
  40222c:	460b      	mov	r3, r1
  40222e:	4620      	mov	r0, r4
  402230:	4629      	mov	r1, r5
  402232:	f000 fd47 	bl	402cc4 <__aeabi_dsub>
  402236:	460d      	mov	r5, r1
  402238:	4604      	mov	r4, r0
  40223a:	f001 f991 	bl	403560 <__aeabi_d2iz>
  40223e:	4680      	mov	r8, r0
  402240:	f000 fe8e 	bl	402f60 <__aeabi_i2d>
  402244:	460b      	mov	r3, r1
  402246:	4602      	mov	r2, r0
  402248:	4629      	mov	r1, r5
  40224a:	4620      	mov	r0, r4
  40224c:	f000 fd3a 	bl	402cc4 <__aeabi_dsub>
  402250:	464b      	mov	r3, r9
  402252:	2b00      	cmp	r3, #0
  402254:	4606      	mov	r6, r0
  402256:	460f      	mov	r7, r1
  402258:	f340 80f7 	ble.w	40244a <__kernel_rem_pio2+0x3ba>
  40225c:	9a00      	ldr	r2, [sp, #0]
  40225e:	a90c      	add	r1, sp, #48	; 0x30
  402260:	3a01      	subs	r2, #1
  402262:	f1c9 0318 	rsb	r3, r9, #24
  402266:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
  40226a:	fa45 f103 	asr.w	r1, r5, r3
  40226e:	fa01 f303 	lsl.w	r3, r1, r3
  402272:	a80c      	add	r0, sp, #48	; 0x30
  402274:	1aeb      	subs	r3, r5, r3
  402276:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  40227a:	f1c9 0517 	rsb	r5, r9, #23
  40227e:	4488      	add	r8, r1
  402280:	fa43 f505 	asr.w	r5, r3, r5
  402284:	2d00      	cmp	r5, #0
  402286:	dd63      	ble.n	402350 <__kernel_rem_pio2+0x2c0>
  402288:	9b00      	ldr	r3, [sp, #0]
  40228a:	2b00      	cmp	r3, #0
  40228c:	f108 0801 	add.w	r8, r8, #1
  402290:	f340 8281 	ble.w	402796 <__kernel_rem_pio2+0x706>
  402294:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  402296:	2c00      	cmp	r4, #0
  402298:	f000 8318 	beq.w	4028cc <__kernel_rem_pio2+0x83c>
  40229c:	2001      	movs	r0, #1
  40229e:	2300      	movs	r3, #0
  4022a0:	aa0c      	add	r2, sp, #48	; 0x30
  4022a2:	f1c4 7480 	rsb	r4, r4, #16777216	; 0x1000000
  4022a6:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
  4022aa:	9a00      	ldr	r2, [sp, #0]
  4022ac:	4282      	cmp	r2, r0
  4022ae:	dd19      	ble.n	4022e4 <__kernel_rem_pio2+0x254>
  4022b0:	aa0c      	add	r2, sp, #48	; 0x30
  4022b2:	ac0c      	add	r4, sp, #48	; 0x30
  4022b4:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
  4022b8:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
  4022bc:	1a51      	subs	r1, r2, r1
  4022be:	f844 1020 	str.w	r1, [r4, r0, lsl #2]
  4022c2:	9900      	ldr	r1, [sp, #0]
  4022c4:	3302      	adds	r3, #2
  4022c6:	4299      	cmp	r1, r3
  4022c8:	dd0c      	ble.n	4022e4 <__kernel_rem_pio2+0x254>
  4022ca:	4610      	mov	r0, r2
  4022cc:	9a00      	ldr	r2, [sp, #0]
  4022ce:	a90c      	add	r1, sp, #48	; 0x30
  4022d0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  4022d4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
  4022d8:	681a      	ldr	r2, [r3, #0]
  4022da:	1a82      	subs	r2, r0, r2
  4022dc:	f843 2b04 	str.w	r2, [r3], #4
  4022e0:	428b      	cmp	r3, r1
  4022e2:	d1f9      	bne.n	4022d8 <__kernel_rem_pio2+0x248>
  4022e4:	9b04      	ldr	r3, [sp, #16]
  4022e6:	2b00      	cmp	r3, #0
  4022e8:	dd1a      	ble.n	402320 <__kernel_rem_pio2+0x290>
  4022ea:	9b04      	ldr	r3, [sp, #16]
  4022ec:	2b01      	cmp	r3, #1
  4022ee:	f04f 0401 	mov.w	r4, #1
  4022f2:	f040 8258 	bne.w	4027a6 <__kernel_rem_pio2+0x716>
  4022f6:	9b00      	ldr	r3, [sp, #0]
  4022f8:	1e5a      	subs	r2, r3, #1
  4022fa:	ab0c      	add	r3, sp, #48	; 0x30
  4022fc:	a90c      	add	r1, sp, #48	; 0x30
  4022fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  402302:	f3c3 0316 	ubfx	r3, r3, #0, #23
  402306:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  40230a:	e258      	b.n	4027be <__kernel_rem_pio2+0x72e>
  40230c:	004064d8 	.word	0x004064d8
  402310:	2aaaaaab 	.word	0x2aaaaaab
  402314:	3e700000 	.word	0x3e700000
  402318:	41700000 	.word	0x41700000
  40231c:	40200000 	.word	0x40200000
  402320:	2d02      	cmp	r5, #2
  402322:	d115      	bne.n	402350 <__kernel_rem_pio2+0x2c0>
  402324:	4632      	mov	r2, r6
  402326:	463b      	mov	r3, r7
  402328:	2000      	movs	r0, #0
  40232a:	4997      	ldr	r1, [pc, #604]	; (402588 <__kernel_rem_pio2+0x4f8>)
  40232c:	f000 fcca 	bl	402cc4 <__aeabi_dsub>
  402330:	4606      	mov	r6, r0
  402332:	460f      	mov	r7, r1
  402334:	9a04      	ldr	r2, [sp, #16]
  402336:	4994      	ldr	r1, [pc, #592]	; (402588 <__kernel_rem_pio2+0x4f8>)
  402338:	2000      	movs	r0, #0
  40233a:	f000 fc39 	bl	402bb0 <scalbn>
  40233e:	4602      	mov	r2, r0
  402340:	460b      	mov	r3, r1
  402342:	4630      	mov	r0, r6
  402344:	4639      	mov	r1, r7
  402346:	f000 fcbd 	bl	402cc4 <__aeabi_dsub>
  40234a:	2502      	movs	r5, #2
  40234c:	4606      	mov	r6, r0
  40234e:	460f      	mov	r7, r1
  402350:	2200      	movs	r2, #0
  402352:	2300      	movs	r3, #0
  402354:	4630      	mov	r0, r6
  402356:	4639      	mov	r1, r7
  402358:	f001 f8d0 	bl	4034fc <__aeabi_dcmpeq>
  40235c:	2800      	cmp	r0, #0
  40235e:	f000 8252 	beq.w	402806 <__kernel_rem_pio2+0x776>
  402362:	9a00      	ldr	r2, [sp, #0]
  402364:	9b05      	ldr	r3, [sp, #20]
  402366:	1e50      	subs	r0, r2, #1
  402368:	4283      	cmp	r3, r0
  40236a:	dc0f      	bgt.n	40238c <__kernel_rem_pio2+0x2fc>
  40236c:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
  402370:	3b01      	subs	r3, #1
  402372:	aa0c      	add	r2, sp, #48	; 0x30
  402374:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  402376:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  40237a:	2200      	movs	r2, #0
  40237c:	f853 1904 	ldr.w	r1, [r3], #-4
  402380:	42a3      	cmp	r3, r4
  402382:	ea42 0201 	orr.w	r2, r2, r1
  402386:	d1f9      	bne.n	40237c <__kernel_rem_pio2+0x2ec>
  402388:	2a00      	cmp	r2, #0
  40238a:	d16f      	bne.n	40246c <__kernel_rem_pio2+0x3dc>
  40238c:	9b05      	ldr	r3, [sp, #20]
  40238e:	aa0c      	add	r2, sp, #48	; 0x30
  402390:	3b01      	subs	r3, #1
  402392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  402396:	2b00      	cmp	r3, #0
  402398:	f040 8233 	bne.w	402802 <__kernel_rem_pio2+0x772>
  40239c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40239e:	2301      	movs	r3, #1
  4023a0:	f852 1904 	ldr.w	r1, [r2], #-4
  4023a4:	3301      	adds	r3, #1
  4023a6:	2900      	cmp	r1, #0
  4023a8:	d0fa      	beq.n	4023a0 <__kernel_rem_pio2+0x310>
  4023aa:	9a00      	ldr	r2, [sp, #0]
  4023ac:	18d3      	adds	r3, r2, r3
  4023ae:	f102 0a01 	add.w	sl, r2, #1
  4023b2:	459a      	cmp	sl, r3
  4023b4:	9307      	str	r3, [sp, #28]
  4023b6:	dc3d      	bgt.n	402434 <__kernel_rem_pio2+0x3a4>
  4023b8:	9b00      	ldr	r3, [sp, #0]
  4023ba:	9908      	ldr	r1, [sp, #32]
  4023bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4023be:	440b      	add	r3, r1
  4023c0:	9907      	ldr	r1, [sp, #28]
  4023c2:	eb0a 0802 	add.w	r8, sl, r2
  4023c6:	4699      	mov	r9, r3
  4023c8:	ab20      	add	r3, sp, #128	; 0x80
  4023ca:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
  4023ce:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
  4023d2:	188b      	adds	r3, r1, r2
  4023d4:	9aa3      	ldr	r2, [sp, #652]	; 0x28c
  4023d6:	f108 38ff 	add.w	r8, r8, #4294967295
  4023da:	eb02 0888 	add.w	r8, r2, r8, lsl #2
  4023de:	aa70      	add	r2, sp, #448	; 0x1c0
  4023e0:	eb02 0aca 	add.w	sl, r2, sl, lsl #3
  4023e4:	9aa3      	ldr	r2, [sp, #652]	; 0x28c
  4023e6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4023ea:	9300      	str	r3, [sp, #0]
  4023ec:	f858 0f04 	ldr.w	r0, [r8, #4]!
  4023f0:	f000 fdb6 	bl	402f60 <__aeabi_i2d>
  4023f4:	9b02      	ldr	r3, [sp, #8]
  4023f6:	2b00      	cmp	r3, #0
  4023f8:	e8e9 0102 	strd	r0, r1, [r9], #8
  4023fc:	db1d      	blt.n	40243a <__kernel_rem_pio2+0x3aa>
  4023fe:	9b03      	ldr	r3, [sp, #12]
  402400:	464d      	mov	r5, r9
  402402:	f1a3 0408 	sub.w	r4, r3, #8
  402406:	2600      	movs	r6, #0
  402408:	2700      	movs	r7, #0
  40240a:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
  40240e:	e9f4 0102 	ldrd	r0, r1, [r4, #8]!
  402412:	f000 fe0b 	bl	40302c <__aeabi_dmul>
  402416:	4602      	mov	r2, r0
  402418:	460b      	mov	r3, r1
  40241a:	4630      	mov	r0, r6
  40241c:	4639      	mov	r1, r7
  40241e:	f000 fc53 	bl	402cc8 <__adddf3>
  402422:	455c      	cmp	r4, fp
  402424:	4606      	mov	r6, r0
  402426:	460f      	mov	r7, r1
  402428:	d1ef      	bne.n	40240a <__kernel_rem_pio2+0x37a>
  40242a:	9b00      	ldr	r3, [sp, #0]
  40242c:	4598      	cmp	r8, r3
  40242e:	e8ea 6702 	strd	r6, r7, [sl], #8
  402432:	d1db      	bne.n	4023ec <__kernel_rem_pio2+0x35c>
  402434:	9b07      	ldr	r3, [sp, #28]
  402436:	9300      	str	r3, [sp, #0]
  402438:	e6ae      	b.n	402198 <__kernel_rem_pio2+0x108>
  40243a:	9b00      	ldr	r3, [sp, #0]
  40243c:	2600      	movs	r6, #0
  40243e:	2700      	movs	r7, #0
  402440:	4598      	cmp	r8, r3
  402442:	e8ea 6702 	strd	r6, r7, [sl], #8
  402446:	d1d1      	bne.n	4023ec <__kernel_rem_pio2+0x35c>
  402448:	e7f4      	b.n	402434 <__kernel_rem_pio2+0x3a4>
  40244a:	d106      	bne.n	40245a <__kernel_rem_pio2+0x3ca>
  40244c:	9b00      	ldr	r3, [sp, #0]
  40244e:	aa0c      	add	r2, sp, #48	; 0x30
  402450:	3b01      	subs	r3, #1
  402452:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
  402456:	15ed      	asrs	r5, r5, #23
  402458:	e714      	b.n	402284 <__kernel_rem_pio2+0x1f4>
  40245a:	2200      	movs	r2, #0
  40245c:	4b4b      	ldr	r3, [pc, #300]	; (40258c <__kernel_rem_pio2+0x4fc>)
  40245e:	f001 f86b 	bl	403538 <__aeabi_dcmpge>
  402462:	2800      	cmp	r0, #0
  402464:	f040 8182 	bne.w	40276c <__kernel_rem_pio2+0x6dc>
  402468:	4605      	mov	r5, r0
  40246a:	e771      	b.n	402350 <__kernel_rem_pio2+0x2c0>
  40246c:	a90c      	add	r1, sp, #48	; 0x30
  40246e:	9502      	str	r5, [sp, #8]
  402470:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
  402474:	9904      	ldr	r1, [sp, #16]
  402476:	f8cd 801c 	str.w	r8, [sp, #28]
  40247a:	3918      	subs	r1, #24
  40247c:	4602      	mov	r2, r0
  40247e:	9000      	str	r0, [sp, #0]
  402480:	9104      	str	r1, [sp, #16]
  402482:	b96b      	cbnz	r3, 4024a0 <__kernel_rem_pio2+0x410>
  402484:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
  402488:	3b01      	subs	r3, #1
  40248a:	a80c      	add	r0, sp, #48	; 0x30
  40248c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
  402490:	f853 0904 	ldr.w	r0, [r3], #-4
  402494:	3a01      	subs	r2, #1
  402496:	3918      	subs	r1, #24
  402498:	2800      	cmp	r0, #0
  40249a:	d0f9      	beq.n	402490 <__kernel_rem_pio2+0x400>
  40249c:	9200      	str	r2, [sp, #0]
  40249e:	9104      	str	r1, [sp, #16]
  4024a0:	9a04      	ldr	r2, [sp, #16]
  4024a2:	4939      	ldr	r1, [pc, #228]	; (402588 <__kernel_rem_pio2+0x4f8>)
  4024a4:	2000      	movs	r0, #0
  4024a6:	f000 fb83 	bl	402bb0 <scalbn>
  4024aa:	9b00      	ldr	r3, [sp, #0]
  4024ac:	2b00      	cmp	r3, #0
  4024ae:	4604      	mov	r4, r0
  4024b0:	460d      	mov	r5, r1
  4024b2:	f2c0 8203 	blt.w	4028bc <__kernel_rem_pio2+0x82c>
  4024b6:	00da      	lsls	r2, r3, #3
  4024b8:	a970      	add	r1, sp, #448	; 0x1c0
  4024ba:	eb01 0b02 	add.w	fp, r1, r2
  4024be:	9204      	str	r2, [sp, #16]
  4024c0:	aa0c      	add	r2, sp, #48	; 0x30
  4024c2:	eb02 0683 	add.w	r6, r2, r3, lsl #2
  4024c6:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 402590 <__kernel_rem_pio2+0x500>
  4024ca:	f10b 0708 	add.w	r7, fp, #8
  4024ce:	3604      	adds	r6, #4
  4024d0:	f04f 0800 	mov.w	r8, #0
  4024d4:	f856 0d04 	ldr.w	r0, [r6, #-4]!
  4024d8:	f000 fd42 	bl	402f60 <__aeabi_i2d>
  4024dc:	4622      	mov	r2, r4
  4024de:	462b      	mov	r3, r5
  4024e0:	f000 fda4 	bl	40302c <__aeabi_dmul>
  4024e4:	464b      	mov	r3, r9
  4024e6:	e967 0102 	strd	r0, r1, [r7, #-8]!
  4024ea:	4642      	mov	r2, r8
  4024ec:	4620      	mov	r0, r4
  4024ee:	4629      	mov	r1, r5
  4024f0:	f000 fd9c 	bl	40302c <__aeabi_dmul>
  4024f4:	ab0c      	add	r3, sp, #48	; 0x30
  4024f6:	429e      	cmp	r6, r3
  4024f8:	4604      	mov	r4, r0
  4024fa:	460d      	mov	r5, r1
  4024fc:	d1ea      	bne.n	4024d4 <__kernel_rem_pio2+0x444>
  4024fe:	f50d 7a90 	add.w	sl, sp, #288	; 0x120
  402502:	f8cd a00c 	str.w	sl, [sp, #12]
  402506:	f8dd a014 	ldr.w	sl, [sp, #20]
  40250a:	f04f 0900 	mov.w	r9, #0
  40250e:	f1ba 0f00 	cmp.w	sl, #0
  402512:	f2c0 813d 	blt.w	402790 <__kernel_rem_pio2+0x700>
  402516:	f8df 807c 	ldr.w	r8, [pc, #124]	; 402594 <__kernel_rem_pio2+0x504>
  40251a:	465d      	mov	r5, fp
  40251c:	a118      	add	r1, pc, #96	; (adr r1, 402580 <__kernel_rem_pio2+0x4f0>)
  40251e:	e9d1 0100 	ldrd	r0, r1, [r1]
  402522:	2600      	movs	r6, #0
  402524:	2700      	movs	r7, #0
  402526:	2400      	movs	r4, #0
  402528:	e003      	b.n	402532 <__kernel_rem_pio2+0x4a2>
  40252a:	454c      	cmp	r4, r9
  40252c:	dc10      	bgt.n	402550 <__kernel_rem_pio2+0x4c0>
  40252e:	e8f8 0102 	ldrd	r0, r1, [r8], #8
  402532:	e8f5 2302 	ldrd	r2, r3, [r5], #8
  402536:	f000 fd79 	bl	40302c <__aeabi_dmul>
  40253a:	4602      	mov	r2, r0
  40253c:	460b      	mov	r3, r1
  40253e:	4630      	mov	r0, r6
  402540:	4639      	mov	r1, r7
  402542:	f000 fbc1 	bl	402cc8 <__adddf3>
  402546:	3401      	adds	r4, #1
  402548:	45a2      	cmp	sl, r4
  40254a:	4606      	mov	r6, r0
  40254c:	460f      	mov	r7, r1
  40254e:	daec      	bge.n	40252a <__kernel_rem_pio2+0x49a>
  402550:	9b03      	ldr	r3, [sp, #12]
  402552:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
  402556:	f1ab 0b08 	sub.w	fp, fp, #8
  40255a:	e9c3 6700 	strd	r6, r7, [r3]
  40255e:	ab6e      	add	r3, sp, #440	; 0x1b8
  402560:	455b      	cmp	r3, fp
  402562:	f109 0901 	add.w	r9, r9, #1
  402566:	d1d2      	bne.n	40250e <__kernel_rem_pio2+0x47e>
  402568:	9ba2      	ldr	r3, [sp, #648]	; 0x288
  40256a:	f8dd a00c 	ldr.w	sl, [sp, #12]
  40256e:	2b03      	cmp	r3, #3
  402570:	f200 808b 	bhi.w	40268a <__kernel_rem_pio2+0x5fa>
  402574:	e8df f013 	tbh	[pc, r3, lsl #1]
  402578:	009000d1 	.word	0x009000d1
  40257c:	00100090 	.word	0x00100090
  402580:	40000000 	.word	0x40000000
  402584:	3ff921fb 	.word	0x3ff921fb
  402588:	3ff00000 	.word	0x3ff00000
  40258c:	3fe00000 	.word	0x3fe00000
  402590:	3e700000 	.word	0x3e700000
  402594:	004064a0 	.word	0x004064a0
  402598:	9b00      	ldr	r3, [sp, #0]
  40259a:	2b00      	cmp	r3, #0
  40259c:	f340 81a4 	ble.w	4028e8 <__kernel_rem_pio2+0x858>
  4025a0:	9b04      	ldr	r3, [sp, #16]
  4025a2:	eb0a 0803 	add.w	r8, sl, r3
  4025a6:	e9d8 6700 	ldrd	r6, r7, [r8]
  4025aa:	46d3      	mov	fp, sl
  4025ac:	e958 9a02 	ldrd	r9, sl, [r8, #-8]
  4025b0:	4632      	mov	r2, r6
  4025b2:	463b      	mov	r3, r7
  4025b4:	4648      	mov	r0, r9
  4025b6:	4651      	mov	r1, sl
  4025b8:	f000 fb86 	bl	402cc8 <__adddf3>
  4025bc:	4604      	mov	r4, r0
  4025be:	460d      	mov	r5, r1
  4025c0:	4602      	mov	r2, r0
  4025c2:	460b      	mov	r3, r1
  4025c4:	4648      	mov	r0, r9
  4025c6:	4651      	mov	r1, sl
  4025c8:	f000 fb7c 	bl	402cc4 <__aeabi_dsub>
  4025cc:	4632      	mov	r2, r6
  4025ce:	463b      	mov	r3, r7
  4025d0:	f000 fb7a 	bl	402cc8 <__adddf3>
  4025d4:	e9c8 0100 	strd	r0, r1, [r8]
  4025d8:	e968 4502 	strd	r4, r5, [r8, #-8]!
  4025dc:	45c3      	cmp	fp, r8
  4025de:	4626      	mov	r6, r4
  4025e0:	462f      	mov	r7, r5
  4025e2:	d1e3      	bne.n	4025ac <__kernel_rem_pio2+0x51c>
  4025e4:	9b00      	ldr	r3, [sp, #0]
  4025e6:	2b01      	cmp	r3, #1
  4025e8:	46da      	mov	sl, fp
  4025ea:	f340 817d 	ble.w	4028e8 <__kernel_rem_pio2+0x858>
  4025ee:	9b04      	ldr	r3, [sp, #16]
  4025f0:	445b      	add	r3, fp
  4025f2:	e9d3 6700 	ldrd	r6, r7, [r3]
  4025f6:	4698      	mov	r8, r3
  4025f8:	4699      	mov	r9, r3
  4025fa:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
  4025fe:	e959 3402 	ldrd	r3, r4, [r9, #-8]
  402602:	4632      	mov	r2, r6
  402604:	4618      	mov	r0, r3
  402606:	4621      	mov	r1, r4
  402608:	463b      	mov	r3, r7
  40260a:	e9cd 0100 	strd	r0, r1, [sp]
  40260e:	f000 fb5b 	bl	402cc8 <__adddf3>
  402612:	4604      	mov	r4, r0
  402614:	460d      	mov	r5, r1
  402616:	4602      	mov	r2, r0
  402618:	460b      	mov	r3, r1
  40261a:	e9dd 0100 	ldrd	r0, r1, [sp]
  40261e:	f000 fb51 	bl	402cc4 <__aeabi_dsub>
  402622:	4632      	mov	r2, r6
  402624:	463b      	mov	r3, r7
  402626:	f000 fb4f 	bl	402cc8 <__adddf3>
  40262a:	e9c9 0100 	strd	r0, r1, [r9]
  40262e:	e969 4502 	strd	r4, r5, [r9, #-8]!
  402632:	45cb      	cmp	fp, r9
  402634:	4626      	mov	r6, r4
  402636:	462f      	mov	r7, r5
  402638:	d1e1      	bne.n	4025fe <__kernel_rem_pio2+0x56e>
  40263a:	2300      	movs	r3, #0
  40263c:	f108 0808 	add.w	r8, r8, #8
  402640:	461d      	mov	r5, r3
  402642:	ac4c      	add	r4, sp, #304	; 0x130
  402644:	4618      	mov	r0, r3
  402646:	4629      	mov	r1, r5
  402648:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
  40264c:	f000 fb3c 	bl	402cc8 <__adddf3>
  402650:	4544      	cmp	r4, r8
  402652:	4603      	mov	r3, r0
  402654:	460d      	mov	r5, r1
  402656:	d1f5      	bne.n	402644 <__kernel_rem_pio2+0x5b4>
  402658:	9a02      	ldr	r2, [sp, #8]
  40265a:	2a00      	cmp	r2, #0
  40265c:	f000 8120 	beq.w	4028a0 <__kernel_rem_pio2+0x810>
  402660:	f8da 4004 	ldr.w	r4, [sl, #4]
  402664:	f8da 200c 	ldr.w	r2, [sl, #12]
  402668:	9f06      	ldr	r7, [sp, #24]
  40266a:	f8da 1000 	ldr.w	r1, [sl]
  40266e:	f8da 0008 	ldr.w	r0, [sl, #8]
  402672:	613b      	str	r3, [r7, #16]
  402674:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
  402678:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
  40267c:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
  402680:	617d      	str	r5, [r7, #20]
  402682:	607c      	str	r4, [r7, #4]
  402684:	60fa      	str	r2, [r7, #12]
  402686:	6039      	str	r1, [r7, #0]
  402688:	60b8      	str	r0, [r7, #8]
  40268a:	9b07      	ldr	r3, [sp, #28]
  40268c:	f003 0007 	and.w	r0, r3, #7
  402690:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
  402694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402698:	9c04      	ldr	r4, [sp, #16]
  40269a:	2600      	movs	r6, #0
  40269c:	3408      	adds	r4, #8
  40269e:	4454      	add	r4, sl
  4026a0:	4633      	mov	r3, r6
  4026a2:	4630      	mov	r0, r6
  4026a4:	4619      	mov	r1, r3
  4026a6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
  4026aa:	f000 fb0d 	bl	402cc8 <__adddf3>
  4026ae:	4554      	cmp	r4, sl
  4026b0:	4606      	mov	r6, r0
  4026b2:	460b      	mov	r3, r1
  4026b4:	d1f5      	bne.n	4026a2 <__kernel_rem_pio2+0x612>
  4026b6:	9a02      	ldr	r2, [sp, #8]
  4026b8:	4630      	mov	r0, r6
  4026ba:	4619      	mov	r1, r3
  4026bc:	2a00      	cmp	r2, #0
  4026be:	f000 80da 	beq.w	402876 <__kernel_rem_pio2+0x7e6>
  4026c2:	9806      	ldr	r0, [sp, #24]
  4026c4:	f103 4400 	add.w	r4, r3, #2147483648	; 0x80000000
  4026c8:	4632      	mov	r2, r6
  4026ca:	6044      	str	r4, [r0, #4]
  4026cc:	6006      	str	r6, [r0, #0]
  4026ce:	e9da 0100 	ldrd	r0, r1, [sl]
  4026d2:	f000 faf7 	bl	402cc4 <__aeabi_dsub>
  4026d6:	460b      	mov	r3, r1
  4026d8:	9900      	ldr	r1, [sp, #0]
  4026da:	2900      	cmp	r1, #0
  4026dc:	4602      	mov	r2, r0
  4026de:	dd0e      	ble.n	4026fe <__kernel_rem_pio2+0x66e>
  4026e0:	2401      	movs	r4, #1
  4026e2:	4610      	mov	r0, r2
  4026e4:	4619      	mov	r1, r3
  4026e6:	e9fa 2302 	ldrd	r2, r3, [sl, #8]!
  4026ea:	f000 faed 	bl	402cc8 <__adddf3>
  4026ee:	460b      	mov	r3, r1
  4026f0:	9900      	ldr	r1, [sp, #0]
  4026f2:	3401      	adds	r4, #1
  4026f4:	42a1      	cmp	r1, r4
  4026f6:	4602      	mov	r2, r0
  4026f8:	daf3      	bge.n	4026e2 <__kernel_rem_pio2+0x652>
  4026fa:	9902      	ldr	r1, [sp, #8]
  4026fc:	b109      	cbz	r1, 402702 <__kernel_rem_pio2+0x672>
  4026fe:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  402702:	4619      	mov	r1, r3
  402704:	9b06      	ldr	r3, [sp, #24]
  402706:	4610      	mov	r0, r2
  402708:	e9c3 0102 	strd	r0, r1, [r3, #8]
  40270c:	9b07      	ldr	r3, [sp, #28]
  40270e:	f003 0007 	and.w	r0, r3, #7
  402712:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
  402716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40271a:	9c04      	ldr	r4, [sp, #16]
  40271c:	2200      	movs	r2, #0
  40271e:	3408      	adds	r4, #8
  402720:	4454      	add	r4, sl
  402722:	4613      	mov	r3, r2
  402724:	4610      	mov	r0, r2
  402726:	4619      	mov	r1, r3
  402728:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
  40272c:	f000 facc 	bl	402cc8 <__adddf3>
  402730:	45a2      	cmp	sl, r4
  402732:	4602      	mov	r2, r0
  402734:	460b      	mov	r3, r1
  402736:	d1f5      	bne.n	402724 <__kernel_rem_pio2+0x694>
  402738:	9902      	ldr	r1, [sp, #8]
  40273a:	b109      	cbz	r1, 402740 <__kernel_rem_pio2+0x6b0>
  40273c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  402740:	4619      	mov	r1, r3
  402742:	9b06      	ldr	r3, [sp, #24]
  402744:	4610      	mov	r0, r2
  402746:	e9c3 0100 	strd	r0, r1, [r3]
  40274a:	9b07      	ldr	r3, [sp, #28]
  40274c:	f003 0007 	and.w	r0, r3, #7
  402750:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
  402754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402758:	2600      	movs	r6, #0
  40275a:	2700      	movs	r7, #0
  40275c:	e9ea 6702 	strd	r6, r7, [sl, #8]!
  402760:	45da      	cmp	sl, fp
  402762:	f109 0908 	add.w	r9, r9, #8
  402766:	f47f ace4 	bne.w	402132 <__kernel_rem_pio2+0xa2>
  40276a:	e502      	b.n	402172 <__kernel_rem_pio2+0xe2>
  40276c:	9b00      	ldr	r3, [sp, #0]
  40276e:	2b00      	cmp	r3, #0
  402770:	f108 0801 	add.w	r8, r8, #1
  402774:	bfc8      	it	gt
  402776:	2502      	movgt	r5, #2
  402778:	f73f ad8c 	bgt.w	402294 <__kernel_rem_pio2+0x204>
  40277c:	4632      	mov	r2, r6
  40277e:	463b      	mov	r3, r7
  402780:	2000      	movs	r0, #0
  402782:	4963      	ldr	r1, [pc, #396]	; (402910 <__kernel_rem_pio2+0x880>)
  402784:	f000 fa9e 	bl	402cc4 <__aeabi_dsub>
  402788:	2502      	movs	r5, #2
  40278a:	4606      	mov	r6, r0
  40278c:	460f      	mov	r7, r1
  40278e:	e5df      	b.n	402350 <__kernel_rem_pio2+0x2c0>
  402790:	2600      	movs	r6, #0
  402792:	2700      	movs	r7, #0
  402794:	e6dc      	b.n	402550 <__kernel_rem_pio2+0x4c0>
  402796:	9b04      	ldr	r3, [sp, #16]
  402798:	2b00      	cmp	r3, #0
  40279a:	dd26      	ble.n	4027ea <__kernel_rem_pio2+0x75a>
  40279c:	2400      	movs	r4, #0
  40279e:	9b04      	ldr	r3, [sp, #16]
  4027a0:	2b01      	cmp	r3, #1
  4027a2:	f43f ada8 	beq.w	4022f6 <__kernel_rem_pio2+0x266>
  4027a6:	2b02      	cmp	r3, #2
  4027a8:	d109      	bne.n	4027be <__kernel_rem_pio2+0x72e>
  4027aa:	9b00      	ldr	r3, [sp, #0]
  4027ac:	1e5a      	subs	r2, r3, #1
  4027ae:	ab0c      	add	r3, sp, #48	; 0x30
  4027b0:	a90c      	add	r1, sp, #48	; 0x30
  4027b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4027b6:	f3c3 0315 	ubfx	r3, r3, #0, #22
  4027ba:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  4027be:	2d02      	cmp	r5, #2
  4027c0:	f47f adc6 	bne.w	402350 <__kernel_rem_pio2+0x2c0>
  4027c4:	4632      	mov	r2, r6
  4027c6:	463b      	mov	r3, r7
  4027c8:	2000      	movs	r0, #0
  4027ca:	4951      	ldr	r1, [pc, #324]	; (402910 <__kernel_rem_pio2+0x880>)
  4027cc:	f000 fa7a 	bl	402cc4 <__aeabi_dsub>
  4027d0:	4606      	mov	r6, r0
  4027d2:	460f      	mov	r7, r1
  4027d4:	2c00      	cmp	r4, #0
  4027d6:	f43f adbb 	beq.w	402350 <__kernel_rem_pio2+0x2c0>
  4027da:	e5ab      	b.n	402334 <__kernel_rem_pio2+0x2a4>
  4027dc:	9900      	ldr	r1, [sp, #0]
  4027de:	3301      	adds	r3, #1
  4027e0:	4299      	cmp	r1, r3
  4027e2:	d178      	bne.n	4028d6 <__kernel_rem_pio2+0x846>
  4027e4:	9b04      	ldr	r3, [sp, #16]
  4027e6:	2b00      	cmp	r3, #0
  4027e8:	dcd9      	bgt.n	40279e <__kernel_rem_pio2+0x70e>
  4027ea:	2d02      	cmp	r5, #2
  4027ec:	f47f adb0 	bne.w	402350 <__kernel_rem_pio2+0x2c0>
  4027f0:	4632      	mov	r2, r6
  4027f2:	463b      	mov	r3, r7
  4027f4:	2000      	movs	r0, #0
  4027f6:	4946      	ldr	r1, [pc, #280]	; (402910 <__kernel_rem_pio2+0x880>)
  4027f8:	f000 fa64 	bl	402cc4 <__aeabi_dsub>
  4027fc:	4606      	mov	r6, r0
  4027fe:	460f      	mov	r7, r1
  402800:	e5a6      	b.n	402350 <__kernel_rem_pio2+0x2c0>
  402802:	2301      	movs	r3, #1
  402804:	e5d1      	b.n	4023aa <__kernel_rem_pio2+0x31a>
  402806:	4639      	mov	r1, r7
  402808:	9f04      	ldr	r7, [sp, #16]
  40280a:	9502      	str	r5, [sp, #8]
  40280c:	427a      	negs	r2, r7
  40280e:	4630      	mov	r0, r6
  402810:	f8cd 801c 	str.w	r8, [sp, #28]
  402814:	f000 f9cc 	bl	402bb0 <scalbn>
  402818:	2200      	movs	r2, #0
  40281a:	4b3e      	ldr	r3, [pc, #248]	; (402914 <__kernel_rem_pio2+0x884>)
  40281c:	4604      	mov	r4, r0
  40281e:	460d      	mov	r5, r1
  402820:	f000 fe8a 	bl	403538 <__aeabi_dcmpge>
  402824:	2800      	cmp	r0, #0
  402826:	d062      	beq.n	4028ee <__kernel_rem_pio2+0x85e>
  402828:	2200      	movs	r2, #0
  40282a:	4b3b      	ldr	r3, [pc, #236]	; (402918 <__kernel_rem_pio2+0x888>)
  40282c:	4620      	mov	r0, r4
  40282e:	4629      	mov	r1, r5
  402830:	f000 fbfc 	bl	40302c <__aeabi_dmul>
  402834:	f000 fe94 	bl	403560 <__aeabi_d2iz>
  402838:	4606      	mov	r6, r0
  40283a:	f000 fb91 	bl	402f60 <__aeabi_i2d>
  40283e:	2200      	movs	r2, #0
  402840:	4b34      	ldr	r3, [pc, #208]	; (402914 <__kernel_rem_pio2+0x884>)
  402842:	f000 fbf3 	bl	40302c <__aeabi_dmul>
  402846:	4602      	mov	r2, r0
  402848:	460b      	mov	r3, r1
  40284a:	4620      	mov	r0, r4
  40284c:	4629      	mov	r1, r5
  40284e:	f000 fa39 	bl	402cc4 <__aeabi_dsub>
  402852:	f000 fe85 	bl	403560 <__aeabi_d2iz>
  402856:	9900      	ldr	r1, [sp, #0]
  402858:	460b      	mov	r3, r1
  40285a:	3301      	adds	r3, #1
  40285c:	461a      	mov	r2, r3
  40285e:	9300      	str	r3, [sp, #0]
  402860:	463b      	mov	r3, r7
  402862:	3318      	adds	r3, #24
  402864:	9304      	str	r3, [sp, #16]
  402866:	460b      	mov	r3, r1
  402868:	a90c      	add	r1, sp, #48	; 0x30
  40286a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  40286e:	4613      	mov	r3, r2
  402870:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
  402874:	e614      	b.n	4024a0 <__kernel_rem_pio2+0x410>
  402876:	9b06      	ldr	r3, [sp, #24]
  402878:	4632      	mov	r2, r6
  40287a:	e9c3 0100 	strd	r0, r1, [r3]
  40287e:	460b      	mov	r3, r1
  402880:	e9da 0100 	ldrd	r0, r1, [sl]
  402884:	f000 fa1e 	bl	402cc4 <__aeabi_dsub>
  402888:	460b      	mov	r3, r1
  40288a:	9900      	ldr	r1, [sp, #0]
  40288c:	2900      	cmp	r1, #0
  40288e:	4602      	mov	r2, r0
  402890:	f73f af26 	bgt.w	4026e0 <__kernel_rem_pio2+0x650>
  402894:	4619      	mov	r1, r3
  402896:	9b06      	ldr	r3, [sp, #24]
  402898:	4610      	mov	r0, r2
  40289a:	e9c3 0102 	strd	r0, r1, [r3, #8]
  40289e:	e735      	b.n	40270c <__kernel_rem_pio2+0x67c>
  4028a0:	4618      	mov	r0, r3
  4028a2:	4629      	mov	r1, r5
  4028a4:	e9da 2300 	ldrd	r2, r3, [sl]
  4028a8:	e9da 4502 	ldrd	r4, r5, [sl, #8]
  4028ac:	9f06      	ldr	r7, [sp, #24]
  4028ae:	e9c7 0104 	strd	r0, r1, [r7, #16]
  4028b2:	e9c7 2300 	strd	r2, r3, [r7]
  4028b6:	e9c7 4502 	strd	r4, r5, [r7, #8]
  4028ba:	e6e6      	b.n	40268a <__kernel_rem_pio2+0x5fa>
  4028bc:	9ba2      	ldr	r3, [sp, #648]	; 0x288
  4028be:	2b03      	cmp	r3, #3
  4028c0:	f63f aee3 	bhi.w	40268a <__kernel_rem_pio2+0x5fa>
  4028c4:	e8df f003 	tbb	[pc, r3]
  4028c8:	0e1c1c21 	.word	0x0e1c1c21
  4028cc:	9b00      	ldr	r3, [sp, #0]
  4028ce:	2b01      	cmp	r3, #1
  4028d0:	dd88      	ble.n	4027e4 <__kernel_rem_pio2+0x754>
  4028d2:	aa0c      	add	r2, sp, #48	; 0x30
  4028d4:	2301      	movs	r3, #1
  4028d6:	f852 4f04 	ldr.w	r4, [r2, #4]!
  4028da:	2c00      	cmp	r4, #0
  4028dc:	f43f af7e 	beq.w	4027dc <__kernel_rem_pio2+0x74c>
  4028e0:	1c58      	adds	r0, r3, #1
  4028e2:	e4dd      	b.n	4022a0 <__kernel_rem_pio2+0x210>
  4028e4:	f50d 7a90 	add.w	sl, sp, #288	; 0x120
  4028e8:	2300      	movs	r3, #0
  4028ea:	461d      	mov	r5, r3
  4028ec:	e6b4      	b.n	402658 <__kernel_rem_pio2+0x5c8>
  4028ee:	4629      	mov	r1, r5
  4028f0:	4620      	mov	r0, r4
  4028f2:	f000 fe35 	bl	403560 <__aeabi_d2iz>
  4028f6:	9a00      	ldr	r2, [sp, #0]
  4028f8:	a90c      	add	r1, sp, #48	; 0x30
  4028fa:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
  4028fe:	e5cf      	b.n	4024a0 <__kernel_rem_pio2+0x410>
  402900:	2600      	movs	r6, #0
  402902:	4633      	mov	r3, r6
  402904:	f50d 7a90 	add.w	sl, sp, #288	; 0x120
  402908:	e6d5      	b.n	4026b6 <__kernel_rem_pio2+0x626>
  40290a:	2200      	movs	r2, #0
  40290c:	4613      	mov	r3, r2
  40290e:	e713      	b.n	402738 <__kernel_rem_pio2+0x6a8>
  402910:	3ff00000 	.word	0x3ff00000
  402914:	41700000 	.word	0x41700000
  402918:	3e700000 	.word	0x3e700000
  40291c:	00000000 	.word	0x00000000

00402920 <__kernel_sin>:
  402920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402924:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  402928:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
  40292c:	b085      	sub	sp, #20
  40292e:	460c      	mov	r4, r1
  402930:	4690      	mov	r8, r2
  402932:	4699      	mov	r9, r3
  402934:	4605      	mov	r5, r0
  402936:	da04      	bge.n	402942 <__kernel_sin+0x22>
  402938:	f000 fe12 	bl	403560 <__aeabi_d2iz>
  40293c:	2800      	cmp	r0, #0
  40293e:	f000 8085 	beq.w	402a4c <__kernel_sin+0x12c>
  402942:	462a      	mov	r2, r5
  402944:	4623      	mov	r3, r4
  402946:	4628      	mov	r0, r5
  402948:	4621      	mov	r1, r4
  40294a:	f000 fb6f 	bl	40302c <__aeabi_dmul>
  40294e:	4606      	mov	r6, r0
  402950:	460f      	mov	r7, r1
  402952:	4602      	mov	r2, r0
  402954:	460b      	mov	r3, r1
  402956:	4628      	mov	r0, r5
  402958:	4621      	mov	r1, r4
  40295a:	f000 fb67 	bl	40302c <__aeabi_dmul>
  40295e:	a33e      	add	r3, pc, #248	; (adr r3, 402a58 <__kernel_sin+0x138>)
  402960:	e9d3 2300 	ldrd	r2, r3, [r3]
  402964:	4682      	mov	sl, r0
  402966:	468b      	mov	fp, r1
  402968:	4630      	mov	r0, r6
  40296a:	4639      	mov	r1, r7
  40296c:	f000 fb5e 	bl	40302c <__aeabi_dmul>
  402970:	a33b      	add	r3, pc, #236	; (adr r3, 402a60 <__kernel_sin+0x140>)
  402972:	e9d3 2300 	ldrd	r2, r3, [r3]
  402976:	f000 f9a5 	bl	402cc4 <__aeabi_dsub>
  40297a:	4632      	mov	r2, r6
  40297c:	463b      	mov	r3, r7
  40297e:	f000 fb55 	bl	40302c <__aeabi_dmul>
  402982:	a339      	add	r3, pc, #228	; (adr r3, 402a68 <__kernel_sin+0x148>)
  402984:	e9d3 2300 	ldrd	r2, r3, [r3]
  402988:	f000 f99e 	bl	402cc8 <__adddf3>
  40298c:	4632      	mov	r2, r6
  40298e:	463b      	mov	r3, r7
  402990:	f000 fb4c 	bl	40302c <__aeabi_dmul>
  402994:	a336      	add	r3, pc, #216	; (adr r3, 402a70 <__kernel_sin+0x150>)
  402996:	e9d3 2300 	ldrd	r2, r3, [r3]
  40299a:	f000 f993 	bl	402cc4 <__aeabi_dsub>
  40299e:	4632      	mov	r2, r6
  4029a0:	463b      	mov	r3, r7
  4029a2:	f000 fb43 	bl	40302c <__aeabi_dmul>
  4029a6:	a334      	add	r3, pc, #208	; (adr r3, 402a78 <__kernel_sin+0x158>)
  4029a8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4029ac:	f000 f98c 	bl	402cc8 <__adddf3>
  4029b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4029b2:	e9cd 0100 	strd	r0, r1, [sp]
  4029b6:	b39b      	cbz	r3, 402a20 <__kernel_sin+0x100>
  4029b8:	2200      	movs	r2, #0
  4029ba:	4b33      	ldr	r3, [pc, #204]	; (402a88 <__kernel_sin+0x168>)
  4029bc:	4640      	mov	r0, r8
  4029be:	4649      	mov	r1, r9
  4029c0:	f000 fb34 	bl	40302c <__aeabi_dmul>
  4029c4:	e9dd 2300 	ldrd	r2, r3, [sp]
  4029c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4029cc:	4650      	mov	r0, sl
  4029ce:	4659      	mov	r1, fp
  4029d0:	f000 fb2c 	bl	40302c <__aeabi_dmul>
  4029d4:	4602      	mov	r2, r0
  4029d6:	460b      	mov	r3, r1
  4029d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4029dc:	f000 f972 	bl	402cc4 <__aeabi_dsub>
  4029e0:	4632      	mov	r2, r6
  4029e2:	463b      	mov	r3, r7
  4029e4:	f000 fb22 	bl	40302c <__aeabi_dmul>
  4029e8:	4642      	mov	r2, r8
  4029ea:	464b      	mov	r3, r9
  4029ec:	f000 f96a 	bl	402cc4 <__aeabi_dsub>
  4029f0:	a323      	add	r3, pc, #140	; (adr r3, 402a80 <__kernel_sin+0x160>)
  4029f2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4029f6:	4606      	mov	r6, r0
  4029f8:	460f      	mov	r7, r1
  4029fa:	4650      	mov	r0, sl
  4029fc:	4659      	mov	r1, fp
  4029fe:	f000 fb15 	bl	40302c <__aeabi_dmul>
  402a02:	4602      	mov	r2, r0
  402a04:	460b      	mov	r3, r1
  402a06:	4630      	mov	r0, r6
  402a08:	4639      	mov	r1, r7
  402a0a:	f000 f95d 	bl	402cc8 <__adddf3>
  402a0e:	4602      	mov	r2, r0
  402a10:	460b      	mov	r3, r1
  402a12:	4628      	mov	r0, r5
  402a14:	4621      	mov	r1, r4
  402a16:	f000 f955 	bl	402cc4 <__aeabi_dsub>
  402a1a:	b005      	add	sp, #20
  402a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402a20:	4602      	mov	r2, r0
  402a22:	460b      	mov	r3, r1
  402a24:	4630      	mov	r0, r6
  402a26:	4639      	mov	r1, r7
  402a28:	f000 fb00 	bl	40302c <__aeabi_dmul>
  402a2c:	a314      	add	r3, pc, #80	; (adr r3, 402a80 <__kernel_sin+0x160>)
  402a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
  402a32:	f000 f947 	bl	402cc4 <__aeabi_dsub>
  402a36:	4652      	mov	r2, sl
  402a38:	465b      	mov	r3, fp
  402a3a:	f000 faf7 	bl	40302c <__aeabi_dmul>
  402a3e:	462a      	mov	r2, r5
  402a40:	4623      	mov	r3, r4
  402a42:	f000 f941 	bl	402cc8 <__adddf3>
  402a46:	b005      	add	sp, #20
  402a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402a4c:	4628      	mov	r0, r5
  402a4e:	4621      	mov	r1, r4
  402a50:	b005      	add	sp, #20
  402a52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402a56:	bf00      	nop
  402a58:	5acfd57c 	.word	0x5acfd57c
  402a5c:	3de5d93a 	.word	0x3de5d93a
  402a60:	8a2b9ceb 	.word	0x8a2b9ceb
  402a64:	3e5ae5e6 	.word	0x3e5ae5e6
  402a68:	57b1fe7d 	.word	0x57b1fe7d
  402a6c:	3ec71de3 	.word	0x3ec71de3
  402a70:	19c161d5 	.word	0x19c161d5
  402a74:	3f2a01a0 	.word	0x3f2a01a0
  402a78:	1110f8a6 	.word	0x1110f8a6
  402a7c:	3f811111 	.word	0x3f811111
  402a80:	55555549 	.word	0x55555549
  402a84:	3fc55555 	.word	0x3fc55555
  402a88:	3fe00000 	.word	0x3fe00000

00402a8c <fabs>:
  402a8c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  402a90:	4770      	bx	lr
  402a92:	bf00      	nop
  402a94:	0000      	movs	r0, r0
	...

00402a98 <floor>:
  402a98:	f3c1 520a 	ubfx	r2, r1, #20, #11
  402a9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402aa0:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
  402aa4:	2e13      	cmp	r6, #19
  402aa6:	460b      	mov	r3, r1
  402aa8:	460d      	mov	r5, r1
  402aaa:	4604      	mov	r4, r0
  402aac:	4688      	mov	r8, r1
  402aae:	4607      	mov	r7, r0
  402ab0:	dc1d      	bgt.n	402aee <floor+0x56>
  402ab2:	2e00      	cmp	r6, #0
  402ab4:	db40      	blt.n	402b38 <floor+0xa0>
  402ab6:	4a3c      	ldr	r2, [pc, #240]	; (402ba8 <floor+0x110>)
  402ab8:	fa42 f906 	asr.w	r9, r2, r6
  402abc:	ea01 0209 	and.w	r2, r1, r9
  402ac0:	4302      	orrs	r2, r0
  402ac2:	4686      	mov	lr, r0
  402ac4:	d018      	beq.n	402af8 <floor+0x60>
  402ac6:	a336      	add	r3, pc, #216	; (adr r3, 402ba0 <floor+0x108>)
  402ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
  402acc:	f000 f8fc 	bl	402cc8 <__adddf3>
  402ad0:	2200      	movs	r2, #0
  402ad2:	2300      	movs	r3, #0
  402ad4:	f000 fd3a 	bl	40354c <__aeabi_dcmpgt>
  402ad8:	b120      	cbz	r0, 402ae4 <floor+0x4c>
  402ada:	2d00      	cmp	r5, #0
  402adc:	db42      	blt.n	402b64 <floor+0xcc>
  402ade:	ea28 0509 	bic.w	r5, r8, r9
  402ae2:	2700      	movs	r7, #0
  402ae4:	463c      	mov	r4, r7
  402ae6:	4629      	mov	r1, r5
  402ae8:	4620      	mov	r0, r4
  402aea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402aee:	2e33      	cmp	r6, #51	; 0x33
  402af0:	dd06      	ble.n	402b00 <floor+0x68>
  402af2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
  402af6:	d02f      	beq.n	402b58 <floor+0xc0>
  402af8:	4619      	mov	r1, r3
  402afa:	4620      	mov	r0, r4
  402afc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402b00:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
  402b04:	f04f 39ff 	mov.w	r9, #4294967295
  402b08:	fa29 f902 	lsr.w	r9, r9, r2
  402b0c:	ea10 0f09 	tst.w	r0, r9
  402b10:	d0f2      	beq.n	402af8 <floor+0x60>
  402b12:	a323      	add	r3, pc, #140	; (adr r3, 402ba0 <floor+0x108>)
  402b14:	e9d3 2300 	ldrd	r2, r3, [r3]
  402b18:	f000 f8d6 	bl	402cc8 <__adddf3>
  402b1c:	2200      	movs	r2, #0
  402b1e:	2300      	movs	r3, #0
  402b20:	f000 fd14 	bl	40354c <__aeabi_dcmpgt>
  402b24:	2800      	cmp	r0, #0
  402b26:	d0dd      	beq.n	402ae4 <floor+0x4c>
  402b28:	2d00      	cmp	r5, #0
  402b2a:	db21      	blt.n	402b70 <floor+0xd8>
  402b2c:	4645      	mov	r5, r8
  402b2e:	ea27 0709 	bic.w	r7, r7, r9
  402b32:	463c      	mov	r4, r7
  402b34:	4629      	mov	r1, r5
  402b36:	e7d7      	b.n	402ae8 <floor+0x50>
  402b38:	a319      	add	r3, pc, #100	; (adr r3, 402ba0 <floor+0x108>)
  402b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
  402b3e:	f000 f8c3 	bl	402cc8 <__adddf3>
  402b42:	2200      	movs	r2, #0
  402b44:	2300      	movs	r3, #0
  402b46:	f000 fd01 	bl	40354c <__aeabi_dcmpgt>
  402b4a:	2800      	cmp	r0, #0
  402b4c:	d0ca      	beq.n	402ae4 <floor+0x4c>
  402b4e:	2d00      	cmp	r5, #0
  402b50:	db19      	blt.n	402b86 <floor+0xee>
  402b52:	2700      	movs	r7, #0
  402b54:	463d      	mov	r5, r7
  402b56:	e7c5      	b.n	402ae4 <floor+0x4c>
  402b58:	4602      	mov	r2, r0
  402b5a:	460b      	mov	r3, r1
  402b5c:	f000 f8b4 	bl	402cc8 <__adddf3>
  402b60:	4604      	mov	r4, r0
  402b62:	e7ca      	b.n	402afa <floor+0x62>
  402b64:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  402b68:	fa43 f606 	asr.w	r6, r3, r6
  402b6c:	44b0      	add	r8, r6
  402b6e:	e7b6      	b.n	402ade <floor+0x46>
  402b70:	2e14      	cmp	r6, #20
  402b72:	d010      	beq.n	402b96 <floor+0xfe>
  402b74:	2301      	movs	r3, #1
  402b76:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
  402b7a:	fa03 f606 	lsl.w	r6, r3, r6
  402b7e:	1937      	adds	r7, r6, r4
  402b80:	bf28      	it	cs
  402b82:	4498      	addcs	r8, r3
  402b84:	e7d2      	b.n	402b2c <floor+0x94>
  402b86:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
  402b8a:	4b08      	ldr	r3, [pc, #32]	; (402bac <floor+0x114>)
  402b8c:	4322      	orrs	r2, r4
  402b8e:	bf18      	it	ne
  402b90:	461d      	movne	r5, r3
  402b92:	2700      	movs	r7, #0
  402b94:	e7a6      	b.n	402ae4 <floor+0x4c>
  402b96:	f105 0801 	add.w	r8, r5, #1
  402b9a:	e7c7      	b.n	402b2c <floor+0x94>
  402b9c:	f3af 8000 	nop.w
  402ba0:	8800759c 	.word	0x8800759c
  402ba4:	7e37e43c 	.word	0x7e37e43c
  402ba8:	000fffff 	.word	0x000fffff
  402bac:	bff00000 	.word	0xbff00000

00402bb0 <scalbn>:
  402bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402bb2:	f3c1 560a 	ubfx	r6, r1, #20, #11
  402bb6:	4604      	mov	r4, r0
  402bb8:	460d      	mov	r5, r1
  402bba:	460b      	mov	r3, r1
  402bbc:	4617      	mov	r7, r2
  402bbe:	bb0e      	cbnz	r6, 402c04 <scalbn+0x54>
  402bc0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  402bc4:	4303      	orrs	r3, r0
  402bc6:	4686      	mov	lr, r0
  402bc8:	d025      	beq.n	402c16 <scalbn+0x66>
  402bca:	2200      	movs	r2, #0
  402bcc:	4b34      	ldr	r3, [pc, #208]	; (402ca0 <scalbn+0xf0>)
  402bce:	f000 fa2d 	bl	40302c <__aeabi_dmul>
  402bd2:	4a34      	ldr	r2, [pc, #208]	; (402ca4 <scalbn+0xf4>)
  402bd4:	4297      	cmp	r7, r2
  402bd6:	4604      	mov	r4, r0
  402bd8:	460d      	mov	r5, r1
  402bda:	460b      	mov	r3, r1
  402bdc:	db2a      	blt.n	402c34 <scalbn+0x84>
  402bde:	f3c1 560a 	ubfx	r6, r1, #20, #11
  402be2:	3e36      	subs	r6, #54	; 0x36
  402be4:	443e      	add	r6, r7
  402be6:	f240 72fe 	movw	r2, #2046	; 0x7fe
  402bea:	4296      	cmp	r6, r2
  402bec:	dc28      	bgt.n	402c40 <scalbn+0x90>
  402bee:	2e00      	cmp	r6, #0
  402bf0:	dd12      	ble.n	402c18 <scalbn+0x68>
  402bf2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
  402bf6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
  402bfa:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
  402bfe:	4620      	mov	r0, r4
  402c00:	4629      	mov	r1, r5
  402c02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402c04:	f240 72ff 	movw	r2, #2047	; 0x7ff
  402c08:	4296      	cmp	r6, r2
  402c0a:	d1eb      	bne.n	402be4 <scalbn+0x34>
  402c0c:	4602      	mov	r2, r0
  402c0e:	460b      	mov	r3, r1
  402c10:	f000 f85a 	bl	402cc8 <__adddf3>
  402c14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402c18:	f116 0f35 	cmn.w	r6, #53	; 0x35
  402c1c:	da1d      	bge.n	402c5a <scalbn+0xaa>
  402c1e:	f24c 3350 	movw	r3, #50000	; 0xc350
  402c22:	429f      	cmp	r7, r3
  402c24:	4622      	mov	r2, r4
  402c26:	462b      	mov	r3, r5
  402c28:	dc25      	bgt.n	402c76 <scalbn+0xc6>
  402c2a:	a119      	add	r1, pc, #100	; (adr r1, 402c90 <scalbn+0xe0>)
  402c2c:	e9d1 0100 	ldrd	r0, r1, [r1]
  402c30:	f000 f83c 	bl	402cac <copysign>
  402c34:	a316      	add	r3, pc, #88	; (adr r3, 402c90 <scalbn+0xe0>)
  402c36:	e9d3 2300 	ldrd	r2, r3, [r3]
  402c3a:	f000 f9f7 	bl	40302c <__aeabi_dmul>
  402c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402c40:	4622      	mov	r2, r4
  402c42:	462b      	mov	r3, r5
  402c44:	a114      	add	r1, pc, #80	; (adr r1, 402c98 <scalbn+0xe8>)
  402c46:	e9d1 0100 	ldrd	r0, r1, [r1]
  402c4a:	f000 f82f 	bl	402cac <copysign>
  402c4e:	a312      	add	r3, pc, #72	; (adr r3, 402c98 <scalbn+0xe8>)
  402c50:	e9d3 2300 	ldrd	r2, r3, [r3]
  402c54:	f000 f9ea 	bl	40302c <__aeabi_dmul>
  402c58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402c5a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
  402c5e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
  402c62:	3636      	adds	r6, #54	; 0x36
  402c64:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
  402c68:	4620      	mov	r0, r4
  402c6a:	4629      	mov	r1, r5
  402c6c:	2200      	movs	r2, #0
  402c6e:	4b0e      	ldr	r3, [pc, #56]	; (402ca8 <scalbn+0xf8>)
  402c70:	f000 f9dc 	bl	40302c <__aeabi_dmul>
  402c74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402c76:	a108      	add	r1, pc, #32	; (adr r1, 402c98 <scalbn+0xe8>)
  402c78:	e9d1 0100 	ldrd	r0, r1, [r1]
  402c7c:	f000 f816 	bl	402cac <copysign>
  402c80:	a305      	add	r3, pc, #20	; (adr r3, 402c98 <scalbn+0xe8>)
  402c82:	e9d3 2300 	ldrd	r2, r3, [r3]
  402c86:	f000 f9d1 	bl	40302c <__aeabi_dmul>
  402c8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402c8c:	f3af 8000 	nop.w
  402c90:	c2f8f359 	.word	0xc2f8f359
  402c94:	01a56e1f 	.word	0x01a56e1f
  402c98:	8800759c 	.word	0x8800759c
  402c9c:	7e37e43c 	.word	0x7e37e43c
  402ca0:	43500000 	.word	0x43500000
  402ca4:	ffff3cb0 	.word	0xffff3cb0
  402ca8:	3c900000 	.word	0x3c900000

00402cac <copysign>:
  402cac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
  402cb0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
  402cb4:	ea42 0103 	orr.w	r1, r2, r3
  402cb8:	4770      	bx	lr
  402cba:	bf00      	nop

00402cbc <__aeabi_drsub>:
  402cbc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  402cc0:	e002      	b.n	402cc8 <__adddf3>
  402cc2:	bf00      	nop

00402cc4 <__aeabi_dsub>:
  402cc4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00402cc8 <__adddf3>:
  402cc8:	b530      	push	{r4, r5, lr}
  402cca:	ea4f 0441 	mov.w	r4, r1, lsl #1
  402cce:	ea4f 0543 	mov.w	r5, r3, lsl #1
  402cd2:	ea94 0f05 	teq	r4, r5
  402cd6:	bf08      	it	eq
  402cd8:	ea90 0f02 	teqeq	r0, r2
  402cdc:	bf1f      	itttt	ne
  402cde:	ea54 0c00 	orrsne.w	ip, r4, r0
  402ce2:	ea55 0c02 	orrsne.w	ip, r5, r2
  402ce6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  402cea:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  402cee:	f000 80e2 	beq.w	402eb6 <__adddf3+0x1ee>
  402cf2:	ea4f 5454 	mov.w	r4, r4, lsr #21
  402cf6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  402cfa:	bfb8      	it	lt
  402cfc:	426d      	neglt	r5, r5
  402cfe:	dd0c      	ble.n	402d1a <__adddf3+0x52>
  402d00:	442c      	add	r4, r5
  402d02:	ea80 0202 	eor.w	r2, r0, r2
  402d06:	ea81 0303 	eor.w	r3, r1, r3
  402d0a:	ea82 0000 	eor.w	r0, r2, r0
  402d0e:	ea83 0101 	eor.w	r1, r3, r1
  402d12:	ea80 0202 	eor.w	r2, r0, r2
  402d16:	ea81 0303 	eor.w	r3, r1, r3
  402d1a:	2d36      	cmp	r5, #54	; 0x36
  402d1c:	bf88      	it	hi
  402d1e:	bd30      	pophi	{r4, r5, pc}
  402d20:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  402d24:	ea4f 3101 	mov.w	r1, r1, lsl #12
  402d28:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  402d2c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  402d30:	d002      	beq.n	402d38 <__adddf3+0x70>
  402d32:	4240      	negs	r0, r0
  402d34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  402d38:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  402d3c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  402d40:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  402d44:	d002      	beq.n	402d4c <__adddf3+0x84>
  402d46:	4252      	negs	r2, r2
  402d48:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  402d4c:	ea94 0f05 	teq	r4, r5
  402d50:	f000 80a7 	beq.w	402ea2 <__adddf3+0x1da>
  402d54:	f1a4 0401 	sub.w	r4, r4, #1
  402d58:	f1d5 0e20 	rsbs	lr, r5, #32
  402d5c:	db0d      	blt.n	402d7a <__adddf3+0xb2>
  402d5e:	fa02 fc0e 	lsl.w	ip, r2, lr
  402d62:	fa22 f205 	lsr.w	r2, r2, r5
  402d66:	1880      	adds	r0, r0, r2
  402d68:	f141 0100 	adc.w	r1, r1, #0
  402d6c:	fa03 f20e 	lsl.w	r2, r3, lr
  402d70:	1880      	adds	r0, r0, r2
  402d72:	fa43 f305 	asr.w	r3, r3, r5
  402d76:	4159      	adcs	r1, r3
  402d78:	e00e      	b.n	402d98 <__adddf3+0xd0>
  402d7a:	f1a5 0520 	sub.w	r5, r5, #32
  402d7e:	f10e 0e20 	add.w	lr, lr, #32
  402d82:	2a01      	cmp	r2, #1
  402d84:	fa03 fc0e 	lsl.w	ip, r3, lr
  402d88:	bf28      	it	cs
  402d8a:	f04c 0c02 	orrcs.w	ip, ip, #2
  402d8e:	fa43 f305 	asr.w	r3, r3, r5
  402d92:	18c0      	adds	r0, r0, r3
  402d94:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  402d98:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  402d9c:	d507      	bpl.n	402dae <__adddf3+0xe6>
  402d9e:	f04f 0e00 	mov.w	lr, #0
  402da2:	f1dc 0c00 	rsbs	ip, ip, #0
  402da6:	eb7e 0000 	sbcs.w	r0, lr, r0
  402daa:	eb6e 0101 	sbc.w	r1, lr, r1
  402dae:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  402db2:	d31b      	bcc.n	402dec <__adddf3+0x124>
  402db4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  402db8:	d30c      	bcc.n	402dd4 <__adddf3+0x10c>
  402dba:	0849      	lsrs	r1, r1, #1
  402dbc:	ea5f 0030 	movs.w	r0, r0, rrx
  402dc0:	ea4f 0c3c 	mov.w	ip, ip, rrx
  402dc4:	f104 0401 	add.w	r4, r4, #1
  402dc8:	ea4f 5244 	mov.w	r2, r4, lsl #21
  402dcc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  402dd0:	f080 809a 	bcs.w	402f08 <__adddf3+0x240>
  402dd4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  402dd8:	bf08      	it	eq
  402dda:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  402dde:	f150 0000 	adcs.w	r0, r0, #0
  402de2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  402de6:	ea41 0105 	orr.w	r1, r1, r5
  402dea:	bd30      	pop	{r4, r5, pc}
  402dec:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  402df0:	4140      	adcs	r0, r0
  402df2:	eb41 0101 	adc.w	r1, r1, r1
  402df6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  402dfa:	f1a4 0401 	sub.w	r4, r4, #1
  402dfe:	d1e9      	bne.n	402dd4 <__adddf3+0x10c>
  402e00:	f091 0f00 	teq	r1, #0
  402e04:	bf04      	itt	eq
  402e06:	4601      	moveq	r1, r0
  402e08:	2000      	moveq	r0, #0
  402e0a:	fab1 f381 	clz	r3, r1
  402e0e:	bf08      	it	eq
  402e10:	3320      	addeq	r3, #32
  402e12:	f1a3 030b 	sub.w	r3, r3, #11
  402e16:	f1b3 0220 	subs.w	r2, r3, #32
  402e1a:	da0c      	bge.n	402e36 <__adddf3+0x16e>
  402e1c:	320c      	adds	r2, #12
  402e1e:	dd08      	ble.n	402e32 <__adddf3+0x16a>
  402e20:	f102 0c14 	add.w	ip, r2, #20
  402e24:	f1c2 020c 	rsb	r2, r2, #12
  402e28:	fa01 f00c 	lsl.w	r0, r1, ip
  402e2c:	fa21 f102 	lsr.w	r1, r1, r2
  402e30:	e00c      	b.n	402e4c <__adddf3+0x184>
  402e32:	f102 0214 	add.w	r2, r2, #20
  402e36:	bfd8      	it	le
  402e38:	f1c2 0c20 	rsble	ip, r2, #32
  402e3c:	fa01 f102 	lsl.w	r1, r1, r2
  402e40:	fa20 fc0c 	lsr.w	ip, r0, ip
  402e44:	bfdc      	itt	le
  402e46:	ea41 010c 	orrle.w	r1, r1, ip
  402e4a:	4090      	lslle	r0, r2
  402e4c:	1ae4      	subs	r4, r4, r3
  402e4e:	bfa2      	ittt	ge
  402e50:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  402e54:	4329      	orrge	r1, r5
  402e56:	bd30      	popge	{r4, r5, pc}
  402e58:	ea6f 0404 	mvn.w	r4, r4
  402e5c:	3c1f      	subs	r4, #31
  402e5e:	da1c      	bge.n	402e9a <__adddf3+0x1d2>
  402e60:	340c      	adds	r4, #12
  402e62:	dc0e      	bgt.n	402e82 <__adddf3+0x1ba>
  402e64:	f104 0414 	add.w	r4, r4, #20
  402e68:	f1c4 0220 	rsb	r2, r4, #32
  402e6c:	fa20 f004 	lsr.w	r0, r0, r4
  402e70:	fa01 f302 	lsl.w	r3, r1, r2
  402e74:	ea40 0003 	orr.w	r0, r0, r3
  402e78:	fa21 f304 	lsr.w	r3, r1, r4
  402e7c:	ea45 0103 	orr.w	r1, r5, r3
  402e80:	bd30      	pop	{r4, r5, pc}
  402e82:	f1c4 040c 	rsb	r4, r4, #12
  402e86:	f1c4 0220 	rsb	r2, r4, #32
  402e8a:	fa20 f002 	lsr.w	r0, r0, r2
  402e8e:	fa01 f304 	lsl.w	r3, r1, r4
  402e92:	ea40 0003 	orr.w	r0, r0, r3
  402e96:	4629      	mov	r1, r5
  402e98:	bd30      	pop	{r4, r5, pc}
  402e9a:	fa21 f004 	lsr.w	r0, r1, r4
  402e9e:	4629      	mov	r1, r5
  402ea0:	bd30      	pop	{r4, r5, pc}
  402ea2:	f094 0f00 	teq	r4, #0
  402ea6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  402eaa:	bf06      	itte	eq
  402eac:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  402eb0:	3401      	addeq	r4, #1
  402eb2:	3d01      	subne	r5, #1
  402eb4:	e74e      	b.n	402d54 <__adddf3+0x8c>
  402eb6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  402eba:	bf18      	it	ne
  402ebc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  402ec0:	d029      	beq.n	402f16 <__adddf3+0x24e>
  402ec2:	ea94 0f05 	teq	r4, r5
  402ec6:	bf08      	it	eq
  402ec8:	ea90 0f02 	teqeq	r0, r2
  402ecc:	d005      	beq.n	402eda <__adddf3+0x212>
  402ece:	ea54 0c00 	orrs.w	ip, r4, r0
  402ed2:	bf04      	itt	eq
  402ed4:	4619      	moveq	r1, r3
  402ed6:	4610      	moveq	r0, r2
  402ed8:	bd30      	pop	{r4, r5, pc}
  402eda:	ea91 0f03 	teq	r1, r3
  402ede:	bf1e      	ittt	ne
  402ee0:	2100      	movne	r1, #0
  402ee2:	2000      	movne	r0, #0
  402ee4:	bd30      	popne	{r4, r5, pc}
  402ee6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  402eea:	d105      	bne.n	402ef8 <__adddf3+0x230>
  402eec:	0040      	lsls	r0, r0, #1
  402eee:	4149      	adcs	r1, r1
  402ef0:	bf28      	it	cs
  402ef2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  402ef6:	bd30      	pop	{r4, r5, pc}
  402ef8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  402efc:	bf3c      	itt	cc
  402efe:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  402f02:	bd30      	popcc	{r4, r5, pc}
  402f04:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  402f08:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  402f0c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  402f10:	f04f 0000 	mov.w	r0, #0
  402f14:	bd30      	pop	{r4, r5, pc}
  402f16:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  402f1a:	bf1a      	itte	ne
  402f1c:	4619      	movne	r1, r3
  402f1e:	4610      	movne	r0, r2
  402f20:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  402f24:	bf1c      	itt	ne
  402f26:	460b      	movne	r3, r1
  402f28:	4602      	movne	r2, r0
  402f2a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  402f2e:	bf06      	itte	eq
  402f30:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  402f34:	ea91 0f03 	teqeq	r1, r3
  402f38:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  402f3c:	bd30      	pop	{r4, r5, pc}
  402f3e:	bf00      	nop

00402f40 <__aeabi_ui2d>:
  402f40:	f090 0f00 	teq	r0, #0
  402f44:	bf04      	itt	eq
  402f46:	2100      	moveq	r1, #0
  402f48:	4770      	bxeq	lr
  402f4a:	b530      	push	{r4, r5, lr}
  402f4c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  402f50:	f104 0432 	add.w	r4, r4, #50	; 0x32
  402f54:	f04f 0500 	mov.w	r5, #0
  402f58:	f04f 0100 	mov.w	r1, #0
  402f5c:	e750      	b.n	402e00 <__adddf3+0x138>
  402f5e:	bf00      	nop

00402f60 <__aeabi_i2d>:
  402f60:	f090 0f00 	teq	r0, #0
  402f64:	bf04      	itt	eq
  402f66:	2100      	moveq	r1, #0
  402f68:	4770      	bxeq	lr
  402f6a:	b530      	push	{r4, r5, lr}
  402f6c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  402f70:	f104 0432 	add.w	r4, r4, #50	; 0x32
  402f74:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  402f78:	bf48      	it	mi
  402f7a:	4240      	negmi	r0, r0
  402f7c:	f04f 0100 	mov.w	r1, #0
  402f80:	e73e      	b.n	402e00 <__adddf3+0x138>
  402f82:	bf00      	nop

00402f84 <__aeabi_f2d>:
  402f84:	0042      	lsls	r2, r0, #1
  402f86:	ea4f 01e2 	mov.w	r1, r2, asr #3
  402f8a:	ea4f 0131 	mov.w	r1, r1, rrx
  402f8e:	ea4f 7002 	mov.w	r0, r2, lsl #28
  402f92:	bf1f      	itttt	ne
  402f94:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  402f98:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  402f9c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  402fa0:	4770      	bxne	lr
  402fa2:	f092 0f00 	teq	r2, #0
  402fa6:	bf14      	ite	ne
  402fa8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  402fac:	4770      	bxeq	lr
  402fae:	b530      	push	{r4, r5, lr}
  402fb0:	f44f 7460 	mov.w	r4, #896	; 0x380
  402fb4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  402fb8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  402fbc:	e720      	b.n	402e00 <__adddf3+0x138>
  402fbe:	bf00      	nop

00402fc0 <__aeabi_ul2d>:
  402fc0:	ea50 0201 	orrs.w	r2, r0, r1
  402fc4:	bf08      	it	eq
  402fc6:	4770      	bxeq	lr
  402fc8:	b530      	push	{r4, r5, lr}
  402fca:	f04f 0500 	mov.w	r5, #0
  402fce:	e00a      	b.n	402fe6 <__aeabi_l2d+0x16>

00402fd0 <__aeabi_l2d>:
  402fd0:	ea50 0201 	orrs.w	r2, r0, r1
  402fd4:	bf08      	it	eq
  402fd6:	4770      	bxeq	lr
  402fd8:	b530      	push	{r4, r5, lr}
  402fda:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  402fde:	d502      	bpl.n	402fe6 <__aeabi_l2d+0x16>
  402fe0:	4240      	negs	r0, r0
  402fe2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  402fe6:	f44f 6480 	mov.w	r4, #1024	; 0x400
  402fea:	f104 0432 	add.w	r4, r4, #50	; 0x32
  402fee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  402ff2:	f43f aedc 	beq.w	402dae <__adddf3+0xe6>
  402ff6:	f04f 0203 	mov.w	r2, #3
  402ffa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  402ffe:	bf18      	it	ne
  403000:	3203      	addne	r2, #3
  403002:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  403006:	bf18      	it	ne
  403008:	3203      	addne	r2, #3
  40300a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40300e:	f1c2 0320 	rsb	r3, r2, #32
  403012:	fa00 fc03 	lsl.w	ip, r0, r3
  403016:	fa20 f002 	lsr.w	r0, r0, r2
  40301a:	fa01 fe03 	lsl.w	lr, r1, r3
  40301e:	ea40 000e 	orr.w	r0, r0, lr
  403022:	fa21 f102 	lsr.w	r1, r1, r2
  403026:	4414      	add	r4, r2
  403028:	e6c1      	b.n	402dae <__adddf3+0xe6>
  40302a:	bf00      	nop

0040302c <__aeabi_dmul>:
  40302c:	b570      	push	{r4, r5, r6, lr}
  40302e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  403032:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  403036:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40303a:	bf1d      	ittte	ne
  40303c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  403040:	ea94 0f0c 	teqne	r4, ip
  403044:	ea95 0f0c 	teqne	r5, ip
  403048:	f000 f8de 	bleq	403208 <__aeabi_dmul+0x1dc>
  40304c:	442c      	add	r4, r5
  40304e:	ea81 0603 	eor.w	r6, r1, r3
  403052:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  403056:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40305a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40305e:	bf18      	it	ne
  403060:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  403064:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  403068:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40306c:	d038      	beq.n	4030e0 <__aeabi_dmul+0xb4>
  40306e:	fba0 ce02 	umull	ip, lr, r0, r2
  403072:	f04f 0500 	mov.w	r5, #0
  403076:	fbe1 e502 	umlal	lr, r5, r1, r2
  40307a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40307e:	fbe0 e503 	umlal	lr, r5, r0, r3
  403082:	f04f 0600 	mov.w	r6, #0
  403086:	fbe1 5603 	umlal	r5, r6, r1, r3
  40308a:	f09c 0f00 	teq	ip, #0
  40308e:	bf18      	it	ne
  403090:	f04e 0e01 	orrne.w	lr, lr, #1
  403094:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  403098:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  40309c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  4030a0:	d204      	bcs.n	4030ac <__aeabi_dmul+0x80>
  4030a2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  4030a6:	416d      	adcs	r5, r5
  4030a8:	eb46 0606 	adc.w	r6, r6, r6
  4030ac:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  4030b0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  4030b4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  4030b8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  4030bc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  4030c0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4030c4:	bf88      	it	hi
  4030c6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4030ca:	d81e      	bhi.n	40310a <__aeabi_dmul+0xde>
  4030cc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  4030d0:	bf08      	it	eq
  4030d2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  4030d6:	f150 0000 	adcs.w	r0, r0, #0
  4030da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4030de:	bd70      	pop	{r4, r5, r6, pc}
  4030e0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  4030e4:	ea46 0101 	orr.w	r1, r6, r1
  4030e8:	ea40 0002 	orr.w	r0, r0, r2
  4030ec:	ea81 0103 	eor.w	r1, r1, r3
  4030f0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  4030f4:	bfc2      	ittt	gt
  4030f6:	ebd4 050c 	rsbsgt	r5, r4, ip
  4030fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4030fe:	bd70      	popgt	{r4, r5, r6, pc}
  403100:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  403104:	f04f 0e00 	mov.w	lr, #0
  403108:	3c01      	subs	r4, #1
  40310a:	f300 80ab 	bgt.w	403264 <__aeabi_dmul+0x238>
  40310e:	f114 0f36 	cmn.w	r4, #54	; 0x36
  403112:	bfde      	ittt	le
  403114:	2000      	movle	r0, #0
  403116:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40311a:	bd70      	pople	{r4, r5, r6, pc}
  40311c:	f1c4 0400 	rsb	r4, r4, #0
  403120:	3c20      	subs	r4, #32
  403122:	da35      	bge.n	403190 <__aeabi_dmul+0x164>
  403124:	340c      	adds	r4, #12
  403126:	dc1b      	bgt.n	403160 <__aeabi_dmul+0x134>
  403128:	f104 0414 	add.w	r4, r4, #20
  40312c:	f1c4 0520 	rsb	r5, r4, #32
  403130:	fa00 f305 	lsl.w	r3, r0, r5
  403134:	fa20 f004 	lsr.w	r0, r0, r4
  403138:	fa01 f205 	lsl.w	r2, r1, r5
  40313c:	ea40 0002 	orr.w	r0, r0, r2
  403140:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  403144:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  403148:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40314c:	fa21 f604 	lsr.w	r6, r1, r4
  403150:	eb42 0106 	adc.w	r1, r2, r6
  403154:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  403158:	bf08      	it	eq
  40315a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40315e:	bd70      	pop	{r4, r5, r6, pc}
  403160:	f1c4 040c 	rsb	r4, r4, #12
  403164:	f1c4 0520 	rsb	r5, r4, #32
  403168:	fa00 f304 	lsl.w	r3, r0, r4
  40316c:	fa20 f005 	lsr.w	r0, r0, r5
  403170:	fa01 f204 	lsl.w	r2, r1, r4
  403174:	ea40 0002 	orr.w	r0, r0, r2
  403178:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40317c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  403180:	f141 0100 	adc.w	r1, r1, #0
  403184:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  403188:	bf08      	it	eq
  40318a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40318e:	bd70      	pop	{r4, r5, r6, pc}
  403190:	f1c4 0520 	rsb	r5, r4, #32
  403194:	fa00 f205 	lsl.w	r2, r0, r5
  403198:	ea4e 0e02 	orr.w	lr, lr, r2
  40319c:	fa20 f304 	lsr.w	r3, r0, r4
  4031a0:	fa01 f205 	lsl.w	r2, r1, r5
  4031a4:	ea43 0302 	orr.w	r3, r3, r2
  4031a8:	fa21 f004 	lsr.w	r0, r1, r4
  4031ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4031b0:	fa21 f204 	lsr.w	r2, r1, r4
  4031b4:	ea20 0002 	bic.w	r0, r0, r2
  4031b8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  4031bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4031c0:	bf08      	it	eq
  4031c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4031c6:	bd70      	pop	{r4, r5, r6, pc}
  4031c8:	f094 0f00 	teq	r4, #0
  4031cc:	d10f      	bne.n	4031ee <__aeabi_dmul+0x1c2>
  4031ce:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  4031d2:	0040      	lsls	r0, r0, #1
  4031d4:	eb41 0101 	adc.w	r1, r1, r1
  4031d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4031dc:	bf08      	it	eq
  4031de:	3c01      	subeq	r4, #1
  4031e0:	d0f7      	beq.n	4031d2 <__aeabi_dmul+0x1a6>
  4031e2:	ea41 0106 	orr.w	r1, r1, r6
  4031e6:	f095 0f00 	teq	r5, #0
  4031ea:	bf18      	it	ne
  4031ec:	4770      	bxne	lr
  4031ee:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  4031f2:	0052      	lsls	r2, r2, #1
  4031f4:	eb43 0303 	adc.w	r3, r3, r3
  4031f8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  4031fc:	bf08      	it	eq
  4031fe:	3d01      	subeq	r5, #1
  403200:	d0f7      	beq.n	4031f2 <__aeabi_dmul+0x1c6>
  403202:	ea43 0306 	orr.w	r3, r3, r6
  403206:	4770      	bx	lr
  403208:	ea94 0f0c 	teq	r4, ip
  40320c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  403210:	bf18      	it	ne
  403212:	ea95 0f0c 	teqne	r5, ip
  403216:	d00c      	beq.n	403232 <__aeabi_dmul+0x206>
  403218:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40321c:	bf18      	it	ne
  40321e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  403222:	d1d1      	bne.n	4031c8 <__aeabi_dmul+0x19c>
  403224:	ea81 0103 	eor.w	r1, r1, r3
  403228:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40322c:	f04f 0000 	mov.w	r0, #0
  403230:	bd70      	pop	{r4, r5, r6, pc}
  403232:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  403236:	bf06      	itte	eq
  403238:	4610      	moveq	r0, r2
  40323a:	4619      	moveq	r1, r3
  40323c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  403240:	d019      	beq.n	403276 <__aeabi_dmul+0x24a>
  403242:	ea94 0f0c 	teq	r4, ip
  403246:	d102      	bne.n	40324e <__aeabi_dmul+0x222>
  403248:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  40324c:	d113      	bne.n	403276 <__aeabi_dmul+0x24a>
  40324e:	ea95 0f0c 	teq	r5, ip
  403252:	d105      	bne.n	403260 <__aeabi_dmul+0x234>
  403254:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  403258:	bf1c      	itt	ne
  40325a:	4610      	movne	r0, r2
  40325c:	4619      	movne	r1, r3
  40325e:	d10a      	bne.n	403276 <__aeabi_dmul+0x24a>
  403260:	ea81 0103 	eor.w	r1, r1, r3
  403264:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403268:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40326c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  403270:	f04f 0000 	mov.w	r0, #0
  403274:	bd70      	pop	{r4, r5, r6, pc}
  403276:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40327a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40327e:	bd70      	pop	{r4, r5, r6, pc}

00403280 <__aeabi_ddiv>:
  403280:	b570      	push	{r4, r5, r6, lr}
  403282:	f04f 0cff 	mov.w	ip, #255	; 0xff
  403286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40328a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40328e:	bf1d      	ittte	ne
  403290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  403294:	ea94 0f0c 	teqne	r4, ip
  403298:	ea95 0f0c 	teqne	r5, ip
  40329c:	f000 f8a7 	bleq	4033ee <__aeabi_ddiv+0x16e>
  4032a0:	eba4 0405 	sub.w	r4, r4, r5
  4032a4:	ea81 0e03 	eor.w	lr, r1, r3
  4032a8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4032ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4032b0:	f000 8088 	beq.w	4033c4 <__aeabi_ddiv+0x144>
  4032b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4032b8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  4032bc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  4032c0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  4032c4:	ea4f 2202 	mov.w	r2, r2, lsl #8
  4032c8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  4032cc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  4032d0:	ea4f 2600 	mov.w	r6, r0, lsl #8
  4032d4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  4032d8:	429d      	cmp	r5, r3
  4032da:	bf08      	it	eq
  4032dc:	4296      	cmpeq	r6, r2
  4032de:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  4032e2:	f504 7440 	add.w	r4, r4, #768	; 0x300
  4032e6:	d202      	bcs.n	4032ee <__aeabi_ddiv+0x6e>
  4032e8:	085b      	lsrs	r3, r3, #1
  4032ea:	ea4f 0232 	mov.w	r2, r2, rrx
  4032ee:	1ab6      	subs	r6, r6, r2
  4032f0:	eb65 0503 	sbc.w	r5, r5, r3
  4032f4:	085b      	lsrs	r3, r3, #1
  4032f6:	ea4f 0232 	mov.w	r2, r2, rrx
  4032fa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  4032fe:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  403302:	ebb6 0e02 	subs.w	lr, r6, r2
  403306:	eb75 0e03 	sbcs.w	lr, r5, r3
  40330a:	bf22      	ittt	cs
  40330c:	1ab6      	subcs	r6, r6, r2
  40330e:	4675      	movcs	r5, lr
  403310:	ea40 000c 	orrcs.w	r0, r0, ip
  403314:	085b      	lsrs	r3, r3, #1
  403316:	ea4f 0232 	mov.w	r2, r2, rrx
  40331a:	ebb6 0e02 	subs.w	lr, r6, r2
  40331e:	eb75 0e03 	sbcs.w	lr, r5, r3
  403322:	bf22      	ittt	cs
  403324:	1ab6      	subcs	r6, r6, r2
  403326:	4675      	movcs	r5, lr
  403328:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40332c:	085b      	lsrs	r3, r3, #1
  40332e:	ea4f 0232 	mov.w	r2, r2, rrx
  403332:	ebb6 0e02 	subs.w	lr, r6, r2
  403336:	eb75 0e03 	sbcs.w	lr, r5, r3
  40333a:	bf22      	ittt	cs
  40333c:	1ab6      	subcs	r6, r6, r2
  40333e:	4675      	movcs	r5, lr
  403340:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  403344:	085b      	lsrs	r3, r3, #1
  403346:	ea4f 0232 	mov.w	r2, r2, rrx
  40334a:	ebb6 0e02 	subs.w	lr, r6, r2
  40334e:	eb75 0e03 	sbcs.w	lr, r5, r3
  403352:	bf22      	ittt	cs
  403354:	1ab6      	subcs	r6, r6, r2
  403356:	4675      	movcs	r5, lr
  403358:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40335c:	ea55 0e06 	orrs.w	lr, r5, r6
  403360:	d018      	beq.n	403394 <__aeabi_ddiv+0x114>
  403362:	ea4f 1505 	mov.w	r5, r5, lsl #4
  403366:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40336a:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40336e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  403372:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  403376:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40337a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40337e:	d1c0      	bne.n	403302 <__aeabi_ddiv+0x82>
  403380:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403384:	d10b      	bne.n	40339e <__aeabi_ddiv+0x11e>
  403386:	ea41 0100 	orr.w	r1, r1, r0
  40338a:	f04f 0000 	mov.w	r0, #0
  40338e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  403392:	e7b6      	b.n	403302 <__aeabi_ddiv+0x82>
  403394:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403398:	bf04      	itt	eq
  40339a:	4301      	orreq	r1, r0
  40339c:	2000      	moveq	r0, #0
  40339e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4033a2:	bf88      	it	hi
  4033a4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4033a8:	f63f aeaf 	bhi.w	40310a <__aeabi_dmul+0xde>
  4033ac:	ebb5 0c03 	subs.w	ip, r5, r3
  4033b0:	bf04      	itt	eq
  4033b2:	ebb6 0c02 	subseq.w	ip, r6, r2
  4033b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4033ba:	f150 0000 	adcs.w	r0, r0, #0
  4033be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4033c2:	bd70      	pop	{r4, r5, r6, pc}
  4033c4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  4033c8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  4033cc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  4033d0:	bfc2      	ittt	gt
  4033d2:	ebd4 050c 	rsbsgt	r5, r4, ip
  4033d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4033da:	bd70      	popgt	{r4, r5, r6, pc}
  4033dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4033e0:	f04f 0e00 	mov.w	lr, #0
  4033e4:	3c01      	subs	r4, #1
  4033e6:	e690      	b.n	40310a <__aeabi_dmul+0xde>
  4033e8:	ea45 0e06 	orr.w	lr, r5, r6
  4033ec:	e68d      	b.n	40310a <__aeabi_dmul+0xde>
  4033ee:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4033f2:	ea94 0f0c 	teq	r4, ip
  4033f6:	bf08      	it	eq
  4033f8:	ea95 0f0c 	teqeq	r5, ip
  4033fc:	f43f af3b 	beq.w	403276 <__aeabi_dmul+0x24a>
  403400:	ea94 0f0c 	teq	r4, ip
  403404:	d10a      	bne.n	40341c <__aeabi_ddiv+0x19c>
  403406:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40340a:	f47f af34 	bne.w	403276 <__aeabi_dmul+0x24a>
  40340e:	ea95 0f0c 	teq	r5, ip
  403412:	f47f af25 	bne.w	403260 <__aeabi_dmul+0x234>
  403416:	4610      	mov	r0, r2
  403418:	4619      	mov	r1, r3
  40341a:	e72c      	b.n	403276 <__aeabi_dmul+0x24a>
  40341c:	ea95 0f0c 	teq	r5, ip
  403420:	d106      	bne.n	403430 <__aeabi_ddiv+0x1b0>
  403422:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  403426:	f43f aefd 	beq.w	403224 <__aeabi_dmul+0x1f8>
  40342a:	4610      	mov	r0, r2
  40342c:	4619      	mov	r1, r3
  40342e:	e722      	b.n	403276 <__aeabi_dmul+0x24a>
  403430:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  403434:	bf18      	it	ne
  403436:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40343a:	f47f aec5 	bne.w	4031c8 <__aeabi_dmul+0x19c>
  40343e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  403442:	f47f af0d 	bne.w	403260 <__aeabi_dmul+0x234>
  403446:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40344a:	f47f aeeb 	bne.w	403224 <__aeabi_dmul+0x1f8>
  40344e:	e712      	b.n	403276 <__aeabi_dmul+0x24a>

00403450 <__gedf2>:
  403450:	f04f 3cff 	mov.w	ip, #4294967295
  403454:	e006      	b.n	403464 <__cmpdf2+0x4>
  403456:	bf00      	nop

00403458 <__ledf2>:
  403458:	f04f 0c01 	mov.w	ip, #1
  40345c:	e002      	b.n	403464 <__cmpdf2+0x4>
  40345e:	bf00      	nop

00403460 <__cmpdf2>:
  403460:	f04f 0c01 	mov.w	ip, #1
  403464:	f84d cd04 	str.w	ip, [sp, #-4]!
  403468:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40346c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  403470:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  403474:	bf18      	it	ne
  403476:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40347a:	d01b      	beq.n	4034b4 <__cmpdf2+0x54>
  40347c:	b001      	add	sp, #4
  40347e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  403482:	bf0c      	ite	eq
  403484:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  403488:	ea91 0f03 	teqne	r1, r3
  40348c:	bf02      	ittt	eq
  40348e:	ea90 0f02 	teqeq	r0, r2
  403492:	2000      	moveq	r0, #0
  403494:	4770      	bxeq	lr
  403496:	f110 0f00 	cmn.w	r0, #0
  40349a:	ea91 0f03 	teq	r1, r3
  40349e:	bf58      	it	pl
  4034a0:	4299      	cmppl	r1, r3
  4034a2:	bf08      	it	eq
  4034a4:	4290      	cmpeq	r0, r2
  4034a6:	bf2c      	ite	cs
  4034a8:	17d8      	asrcs	r0, r3, #31
  4034aa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  4034ae:	f040 0001 	orr.w	r0, r0, #1
  4034b2:	4770      	bx	lr
  4034b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4034b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4034bc:	d102      	bne.n	4034c4 <__cmpdf2+0x64>
  4034be:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4034c2:	d107      	bne.n	4034d4 <__cmpdf2+0x74>
  4034c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4034c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4034cc:	d1d6      	bne.n	40347c <__cmpdf2+0x1c>
  4034ce:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  4034d2:	d0d3      	beq.n	40347c <__cmpdf2+0x1c>
  4034d4:	f85d 0b04 	ldr.w	r0, [sp], #4
  4034d8:	4770      	bx	lr
  4034da:	bf00      	nop

004034dc <__aeabi_cdrcmple>:
  4034dc:	4684      	mov	ip, r0
  4034de:	4610      	mov	r0, r2
  4034e0:	4662      	mov	r2, ip
  4034e2:	468c      	mov	ip, r1
  4034e4:	4619      	mov	r1, r3
  4034e6:	4663      	mov	r3, ip
  4034e8:	e000      	b.n	4034ec <__aeabi_cdcmpeq>
  4034ea:	bf00      	nop

004034ec <__aeabi_cdcmpeq>:
  4034ec:	b501      	push	{r0, lr}
  4034ee:	f7ff ffb7 	bl	403460 <__cmpdf2>
  4034f2:	2800      	cmp	r0, #0
  4034f4:	bf48      	it	mi
  4034f6:	f110 0f00 	cmnmi.w	r0, #0
  4034fa:	bd01      	pop	{r0, pc}

004034fc <__aeabi_dcmpeq>:
  4034fc:	f84d ed08 	str.w	lr, [sp, #-8]!
  403500:	f7ff fff4 	bl	4034ec <__aeabi_cdcmpeq>
  403504:	bf0c      	ite	eq
  403506:	2001      	moveq	r0, #1
  403508:	2000      	movne	r0, #0
  40350a:	f85d fb08 	ldr.w	pc, [sp], #8
  40350e:	bf00      	nop

00403510 <__aeabi_dcmplt>:
  403510:	f84d ed08 	str.w	lr, [sp, #-8]!
  403514:	f7ff ffea 	bl	4034ec <__aeabi_cdcmpeq>
  403518:	bf34      	ite	cc
  40351a:	2001      	movcc	r0, #1
  40351c:	2000      	movcs	r0, #0
  40351e:	f85d fb08 	ldr.w	pc, [sp], #8
  403522:	bf00      	nop

00403524 <__aeabi_dcmple>:
  403524:	f84d ed08 	str.w	lr, [sp, #-8]!
  403528:	f7ff ffe0 	bl	4034ec <__aeabi_cdcmpeq>
  40352c:	bf94      	ite	ls
  40352e:	2001      	movls	r0, #1
  403530:	2000      	movhi	r0, #0
  403532:	f85d fb08 	ldr.w	pc, [sp], #8
  403536:	bf00      	nop

00403538 <__aeabi_dcmpge>:
  403538:	f84d ed08 	str.w	lr, [sp, #-8]!
  40353c:	f7ff ffce 	bl	4034dc <__aeabi_cdrcmple>
  403540:	bf94      	ite	ls
  403542:	2001      	movls	r0, #1
  403544:	2000      	movhi	r0, #0
  403546:	f85d fb08 	ldr.w	pc, [sp], #8
  40354a:	bf00      	nop

0040354c <__aeabi_dcmpgt>:
  40354c:	f84d ed08 	str.w	lr, [sp, #-8]!
  403550:	f7ff ffc4 	bl	4034dc <__aeabi_cdrcmple>
  403554:	bf34      	ite	cc
  403556:	2001      	movcc	r0, #1
  403558:	2000      	movcs	r0, #0
  40355a:	f85d fb08 	ldr.w	pc, [sp], #8
  40355e:	bf00      	nop

00403560 <__aeabi_d2iz>:
  403560:	ea4f 0241 	mov.w	r2, r1, lsl #1
  403564:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  403568:	d215      	bcs.n	403596 <__aeabi_d2iz+0x36>
  40356a:	d511      	bpl.n	403590 <__aeabi_d2iz+0x30>
  40356c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  403570:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  403574:	d912      	bls.n	40359c <__aeabi_d2iz+0x3c>
  403576:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40357a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40357e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  403582:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  403586:	fa23 f002 	lsr.w	r0, r3, r2
  40358a:	bf18      	it	ne
  40358c:	4240      	negne	r0, r0
  40358e:	4770      	bx	lr
  403590:	f04f 0000 	mov.w	r0, #0
  403594:	4770      	bx	lr
  403596:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40359a:	d105      	bne.n	4035a8 <__aeabi_d2iz+0x48>
  40359c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  4035a0:	bf08      	it	eq
  4035a2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  4035a6:	4770      	bx	lr
  4035a8:	f04f 0000 	mov.w	r0, #0
  4035ac:	4770      	bx	lr
  4035ae:	bf00      	nop

004035b0 <__aeabi_d2f>:
  4035b0:	ea4f 0241 	mov.w	r2, r1, lsl #1
  4035b4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  4035b8:	bf24      	itt	cs
  4035ba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  4035be:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  4035c2:	d90d      	bls.n	4035e0 <__aeabi_d2f+0x30>
  4035c4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  4035c8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  4035cc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  4035d0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  4035d4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  4035d8:	bf08      	it	eq
  4035da:	f020 0001 	biceq.w	r0, r0, #1
  4035de:	4770      	bx	lr
  4035e0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  4035e4:	d121      	bne.n	40362a <__aeabi_d2f+0x7a>
  4035e6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  4035ea:	bfbc      	itt	lt
  4035ec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  4035f0:	4770      	bxlt	lr
  4035f2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4035f6:	ea4f 5252 	mov.w	r2, r2, lsr #21
  4035fa:	f1c2 0218 	rsb	r2, r2, #24
  4035fe:	f1c2 0c20 	rsb	ip, r2, #32
  403602:	fa10 f30c 	lsls.w	r3, r0, ip
  403606:	fa20 f002 	lsr.w	r0, r0, r2
  40360a:	bf18      	it	ne
  40360c:	f040 0001 	orrne.w	r0, r0, #1
  403610:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  403614:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  403618:	fa03 fc0c 	lsl.w	ip, r3, ip
  40361c:	ea40 000c 	orr.w	r0, r0, ip
  403620:	fa23 f302 	lsr.w	r3, r3, r2
  403624:	ea4f 0343 	mov.w	r3, r3, lsl #1
  403628:	e7cc      	b.n	4035c4 <__aeabi_d2f+0x14>
  40362a:	ea7f 5362 	mvns.w	r3, r2, asr #21
  40362e:	d107      	bne.n	403640 <__aeabi_d2f+0x90>
  403630:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  403634:	bf1e      	ittt	ne
  403636:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  40363a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  40363e:	4770      	bxne	lr
  403640:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  403644:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  403648:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40364c:	4770      	bx	lr
  40364e:	bf00      	nop

00403650 <__libc_init_array>:
  403650:	b570      	push	{r4, r5, r6, lr}
  403652:	4e0d      	ldr	r6, [pc, #52]	; (403688 <__libc_init_array+0x38>)
  403654:	4c0d      	ldr	r4, [pc, #52]	; (40368c <__libc_init_array+0x3c>)
  403656:	1ba4      	subs	r4, r4, r6
  403658:	10a4      	asrs	r4, r4, #2
  40365a:	2500      	movs	r5, #0
  40365c:	42a5      	cmp	r5, r4
  40365e:	d109      	bne.n	403674 <__libc_init_array+0x24>
  403660:	4e0b      	ldr	r6, [pc, #44]	; (403690 <__libc_init_array+0x40>)
  403662:	4c0c      	ldr	r4, [pc, #48]	; (403694 <__libc_init_array+0x44>)
  403664:	f003 f8a0 	bl	4067a8 <_init>
  403668:	1ba4      	subs	r4, r4, r6
  40366a:	10a4      	asrs	r4, r4, #2
  40366c:	2500      	movs	r5, #0
  40366e:	42a5      	cmp	r5, r4
  403670:	d105      	bne.n	40367e <__libc_init_array+0x2e>
  403672:	bd70      	pop	{r4, r5, r6, pc}
  403674:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  403678:	4798      	blx	r3
  40367a:	3501      	adds	r5, #1
  40367c:	e7ee      	b.n	40365c <__libc_init_array+0xc>
  40367e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  403682:	4798      	blx	r3
  403684:	3501      	adds	r5, #1
  403686:	e7f2      	b.n	40366e <__libc_init_array+0x1e>
  403688:	004067b4 	.word	0x004067b4
  40368c:	004067b4 	.word	0x004067b4
  403690:	004067b4 	.word	0x004067b4
  403694:	004067b8 	.word	0x004067b8

00403698 <memcpy>:
  403698:	b510      	push	{r4, lr}
  40369a:	1e43      	subs	r3, r0, #1
  40369c:	440a      	add	r2, r1
  40369e:	4291      	cmp	r1, r2
  4036a0:	d100      	bne.n	4036a4 <memcpy+0xc>
  4036a2:	bd10      	pop	{r4, pc}
  4036a4:	f811 4b01 	ldrb.w	r4, [r1], #1
  4036a8:	f803 4f01 	strb.w	r4, [r3, #1]!
  4036ac:	e7f7      	b.n	40369e <memcpy+0x6>

004036ae <memset>:
  4036ae:	4402      	add	r2, r0
  4036b0:	4603      	mov	r3, r0
  4036b2:	4293      	cmp	r3, r2
  4036b4:	d100      	bne.n	4036b8 <memset+0xa>
  4036b6:	4770      	bx	lr
  4036b8:	f803 1b01 	strb.w	r1, [r3], #1
  4036bc:	e7f9      	b.n	4036b2 <memset+0x4>

004036be <__cvt>:
  4036be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4036c2:	b088      	sub	sp, #32
  4036c4:	2b00      	cmp	r3, #0
  4036c6:	9f14      	ldr	r7, [sp, #80]	; 0x50
  4036c8:	9912      	ldr	r1, [sp, #72]	; 0x48
  4036ca:	9d10      	ldr	r5, [sp, #64]	; 0x40
  4036cc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
  4036d0:	461e      	mov	r6, r3
  4036d2:	f027 0720 	bic.w	r7, r7, #32
  4036d6:	bfbb      	ittet	lt
  4036d8:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
  4036dc:	461e      	movlt	r6, r3
  4036de:	2300      	movge	r3, #0
  4036e0:	232d      	movlt	r3, #45	; 0x2d
  4036e2:	2f46      	cmp	r7, #70	; 0x46
  4036e4:	4614      	mov	r4, r2
  4036e6:	700b      	strb	r3, [r1, #0]
  4036e8:	d004      	beq.n	4036f4 <__cvt+0x36>
  4036ea:	2f45      	cmp	r7, #69	; 0x45
  4036ec:	d100      	bne.n	4036f0 <__cvt+0x32>
  4036ee:	3501      	adds	r5, #1
  4036f0:	2302      	movs	r3, #2
  4036f2:	e000      	b.n	4036f6 <__cvt+0x38>
  4036f4:	2303      	movs	r3, #3
  4036f6:	aa07      	add	r2, sp, #28
  4036f8:	9204      	str	r2, [sp, #16]
  4036fa:	aa06      	add	r2, sp, #24
  4036fc:	9203      	str	r2, [sp, #12]
  4036fe:	e88d 0428 	stmia.w	sp, {r3, r5, sl}
  403702:	4622      	mov	r2, r4
  403704:	4633      	mov	r3, r6
  403706:	f000 fd9b 	bl	404240 <_dtoa_r>
  40370a:	2f47      	cmp	r7, #71	; 0x47
  40370c:	4680      	mov	r8, r0
  40370e:	d102      	bne.n	403716 <__cvt+0x58>
  403710:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403712:	07db      	lsls	r3, r3, #31
  403714:	d526      	bpl.n	403764 <__cvt+0xa6>
  403716:	2f46      	cmp	r7, #70	; 0x46
  403718:	eb08 0905 	add.w	r9, r8, r5
  40371c:	d111      	bne.n	403742 <__cvt+0x84>
  40371e:	f898 3000 	ldrb.w	r3, [r8]
  403722:	2b30      	cmp	r3, #48	; 0x30
  403724:	d10a      	bne.n	40373c <__cvt+0x7e>
  403726:	2200      	movs	r2, #0
  403728:	2300      	movs	r3, #0
  40372a:	4620      	mov	r0, r4
  40372c:	4631      	mov	r1, r6
  40372e:	f7ff fee5 	bl	4034fc <__aeabi_dcmpeq>
  403732:	b918      	cbnz	r0, 40373c <__cvt+0x7e>
  403734:	f1c5 0501 	rsb	r5, r5, #1
  403738:	f8ca 5000 	str.w	r5, [sl]
  40373c:	f8da 3000 	ldr.w	r3, [sl]
  403740:	4499      	add	r9, r3
  403742:	2200      	movs	r2, #0
  403744:	2300      	movs	r3, #0
  403746:	4620      	mov	r0, r4
  403748:	4631      	mov	r1, r6
  40374a:	f7ff fed7 	bl	4034fc <__aeabi_dcmpeq>
  40374e:	b938      	cbnz	r0, 403760 <__cvt+0xa2>
  403750:	2230      	movs	r2, #48	; 0x30
  403752:	9b07      	ldr	r3, [sp, #28]
  403754:	4599      	cmp	r9, r3
  403756:	d905      	bls.n	403764 <__cvt+0xa6>
  403758:	1c59      	adds	r1, r3, #1
  40375a:	9107      	str	r1, [sp, #28]
  40375c:	701a      	strb	r2, [r3, #0]
  40375e:	e7f8      	b.n	403752 <__cvt+0x94>
  403760:	f8cd 901c 	str.w	r9, [sp, #28]
  403764:	9b07      	ldr	r3, [sp, #28]
  403766:	9a15      	ldr	r2, [sp, #84]	; 0x54
  403768:	eba3 0308 	sub.w	r3, r3, r8
  40376c:	4640      	mov	r0, r8
  40376e:	6013      	str	r3, [r2, #0]
  403770:	b008      	add	sp, #32
  403772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00403776 <__exponent>:
  403776:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  403778:	4603      	mov	r3, r0
  40377a:	2900      	cmp	r1, #0
  40377c:	bfb8      	it	lt
  40377e:	4249      	neglt	r1, r1
  403780:	f803 2b02 	strb.w	r2, [r3], #2
  403784:	bfb4      	ite	lt
  403786:	222d      	movlt	r2, #45	; 0x2d
  403788:	222b      	movge	r2, #43	; 0x2b
  40378a:	2909      	cmp	r1, #9
  40378c:	7042      	strb	r2, [r0, #1]
  40378e:	dd20      	ble.n	4037d2 <__exponent+0x5c>
  403790:	f10d 0207 	add.w	r2, sp, #7
  403794:	4617      	mov	r7, r2
  403796:	260a      	movs	r6, #10
  403798:	fb91 f5f6 	sdiv	r5, r1, r6
  40379c:	fb06 1115 	mls	r1, r6, r5, r1
  4037a0:	3130      	adds	r1, #48	; 0x30
  4037a2:	2d09      	cmp	r5, #9
  4037a4:	f802 1c01 	strb.w	r1, [r2, #-1]
  4037a8:	f102 34ff 	add.w	r4, r2, #4294967295
  4037ac:	4629      	mov	r1, r5
  4037ae:	dc09      	bgt.n	4037c4 <__exponent+0x4e>
  4037b0:	3130      	adds	r1, #48	; 0x30
  4037b2:	3a02      	subs	r2, #2
  4037b4:	f804 1c01 	strb.w	r1, [r4, #-1]
  4037b8:	42ba      	cmp	r2, r7
  4037ba:	461c      	mov	r4, r3
  4037bc:	d304      	bcc.n	4037c8 <__exponent+0x52>
  4037be:	1a20      	subs	r0, r4, r0
  4037c0:	b003      	add	sp, #12
  4037c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4037c4:	4622      	mov	r2, r4
  4037c6:	e7e7      	b.n	403798 <__exponent+0x22>
  4037c8:	f812 1b01 	ldrb.w	r1, [r2], #1
  4037cc:	f803 1b01 	strb.w	r1, [r3], #1
  4037d0:	e7f2      	b.n	4037b8 <__exponent+0x42>
  4037d2:	2230      	movs	r2, #48	; 0x30
  4037d4:	461c      	mov	r4, r3
  4037d6:	4411      	add	r1, r2
  4037d8:	f804 2b02 	strb.w	r2, [r4], #2
  4037dc:	7059      	strb	r1, [r3, #1]
  4037de:	e7ee      	b.n	4037be <__exponent+0x48>

004037e0 <_printf_float>:
  4037e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4037e4:	b091      	sub	sp, #68	; 0x44
  4037e6:	460c      	mov	r4, r1
  4037e8:	9f1a      	ldr	r7, [sp, #104]	; 0x68
  4037ea:	4693      	mov	fp, r2
  4037ec:	461e      	mov	r6, r3
  4037ee:	4605      	mov	r5, r0
  4037f0:	f001 fc74 	bl	4050dc <_localeconv_r>
  4037f4:	6803      	ldr	r3, [r0, #0]
  4037f6:	9309      	str	r3, [sp, #36]	; 0x24
  4037f8:	4618      	mov	r0, r3
  4037fa:	f000 fc8d 	bl	404118 <strlen>
  4037fe:	2300      	movs	r3, #0
  403800:	930e      	str	r3, [sp, #56]	; 0x38
  403802:	683b      	ldr	r3, [r7, #0]
  403804:	900a      	str	r0, [sp, #40]	; 0x28
  403806:	3307      	adds	r3, #7
  403808:	f023 0307 	bic.w	r3, r3, #7
  40380c:	f103 0208 	add.w	r2, r3, #8
  403810:	f894 8018 	ldrb.w	r8, [r4, #24]
  403814:	f8d4 a000 	ldr.w	sl, [r4]
  403818:	603a      	str	r2, [r7, #0]
  40381a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40381e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
  403822:	f8d4 904c 	ldr.w	r9, [r4, #76]	; 0x4c
  403826:	6ca7      	ldr	r7, [r4, #72]	; 0x48
  403828:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
  40382c:	930b      	str	r3, [sp, #44]	; 0x2c
  40382e:	f04f 32ff 	mov.w	r2, #4294967295
  403832:	4ba6      	ldr	r3, [pc, #664]	; (403acc <_printf_float+0x2ec>)
  403834:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403836:	4638      	mov	r0, r7
  403838:	f002 fb80 	bl	405f3c <__aeabi_dcmpun>
  40383c:	2800      	cmp	r0, #0
  40383e:	f040 81f7 	bne.w	403c30 <_printf_float+0x450>
  403842:	f04f 32ff 	mov.w	r2, #4294967295
  403846:	4ba1      	ldr	r3, [pc, #644]	; (403acc <_printf_float+0x2ec>)
  403848:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40384a:	4638      	mov	r0, r7
  40384c:	f7ff fe6a 	bl	403524 <__aeabi_dcmple>
  403850:	2800      	cmp	r0, #0
  403852:	f040 81ed 	bne.w	403c30 <_printf_float+0x450>
  403856:	2200      	movs	r2, #0
  403858:	2300      	movs	r3, #0
  40385a:	4638      	mov	r0, r7
  40385c:	4649      	mov	r1, r9
  40385e:	f7ff fe57 	bl	403510 <__aeabi_dcmplt>
  403862:	b110      	cbz	r0, 40386a <_printf_float+0x8a>
  403864:	232d      	movs	r3, #45	; 0x2d
  403866:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  40386a:	4b99      	ldr	r3, [pc, #612]	; (403ad0 <_printf_float+0x2f0>)
  40386c:	4f99      	ldr	r7, [pc, #612]	; (403ad4 <_printf_float+0x2f4>)
  40386e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  403872:	bf98      	it	ls
  403874:	461f      	movls	r7, r3
  403876:	2303      	movs	r3, #3
  403878:	6123      	str	r3, [r4, #16]
  40387a:	f02a 0304 	bic.w	r3, sl, #4
  40387e:	6023      	str	r3, [r4, #0]
  403880:	f04f 0900 	mov.w	r9, #0
  403884:	9600      	str	r6, [sp, #0]
  403886:	465b      	mov	r3, fp
  403888:	aa0f      	add	r2, sp, #60	; 0x3c
  40388a:	4621      	mov	r1, r4
  40388c:	4628      	mov	r0, r5
  40388e:	f000 f9df 	bl	403c50 <_printf_common>
  403892:	3001      	adds	r0, #1
  403894:	f040 809a 	bne.w	4039cc <_printf_float+0x1ec>
  403898:	f04f 30ff 	mov.w	r0, #4294967295
  40389c:	b011      	add	sp, #68	; 0x44
  40389e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4038a2:	6862      	ldr	r2, [r4, #4]
  4038a4:	1c53      	adds	r3, r2, #1
  4038a6:	a80e      	add	r0, sp, #56	; 0x38
  4038a8:	f44a 6380 	orr.w	r3, sl, #1024	; 0x400
  4038ac:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
  4038b0:	d141      	bne.n	403936 <_printf_float+0x156>
  4038b2:	2206      	movs	r2, #6
  4038b4:	6062      	str	r2, [r4, #4]
  4038b6:	6023      	str	r3, [r4, #0]
  4038b8:	2100      	movs	r1, #0
  4038ba:	f10d 0233 	add.w	r2, sp, #51	; 0x33
  4038be:	9301      	str	r3, [sp, #4]
  4038c0:	6863      	ldr	r3, [r4, #4]
  4038c2:	9005      	str	r0, [sp, #20]
  4038c4:	9202      	str	r2, [sp, #8]
  4038c6:	9300      	str	r3, [sp, #0]
  4038c8:	463a      	mov	r2, r7
  4038ca:	464b      	mov	r3, r9
  4038cc:	9106      	str	r1, [sp, #24]
  4038ce:	f8cd 8010 	str.w	r8, [sp, #16]
  4038d2:	f8cd e00c 	str.w	lr, [sp, #12]
  4038d6:	4628      	mov	r0, r5
  4038d8:	f7ff fef1 	bl	4036be <__cvt>
  4038dc:	f008 03df 	and.w	r3, r8, #223	; 0xdf
  4038e0:	2b47      	cmp	r3, #71	; 0x47
  4038e2:	4607      	mov	r7, r0
  4038e4:	d109      	bne.n	4038fa <_printf_float+0x11a>
  4038e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4038e8:	1cd8      	adds	r0, r3, #3
  4038ea:	db02      	blt.n	4038f2 <_printf_float+0x112>
  4038ec:	6862      	ldr	r2, [r4, #4]
  4038ee:	4293      	cmp	r3, r2
  4038f0:	dd59      	ble.n	4039a6 <_printf_float+0x1c6>
  4038f2:	f1a8 0802 	sub.w	r8, r8, #2
  4038f6:	fa5f f888 	uxtb.w	r8, r8
  4038fa:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
  4038fe:	990d      	ldr	r1, [sp, #52]	; 0x34
  403900:	d836      	bhi.n	403970 <_printf_float+0x190>
  403902:	3901      	subs	r1, #1
  403904:	4642      	mov	r2, r8
  403906:	f104 0050 	add.w	r0, r4, #80	; 0x50
  40390a:	910d      	str	r1, [sp, #52]	; 0x34
  40390c:	f7ff ff33 	bl	403776 <__exponent>
  403910:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403912:	1883      	adds	r3, r0, r2
  403914:	2a01      	cmp	r2, #1
  403916:	4681      	mov	r9, r0
  403918:	6123      	str	r3, [r4, #16]
  40391a:	dc02      	bgt.n	403922 <_printf_float+0x142>
  40391c:	6822      	ldr	r2, [r4, #0]
  40391e:	07d1      	lsls	r1, r2, #31
  403920:	d501      	bpl.n	403926 <_printf_float+0x146>
  403922:	3301      	adds	r3, #1
  403924:	6123      	str	r3, [r4, #16]
  403926:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
  40392a:	2b00      	cmp	r3, #0
  40392c:	d0aa      	beq.n	403884 <_printf_float+0xa4>
  40392e:	232d      	movs	r3, #45	; 0x2d
  403930:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  403934:	e7a6      	b.n	403884 <_printf_float+0xa4>
  403936:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
  40393a:	d002      	beq.n	403942 <_printf_float+0x162>
  40393c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  403940:	d1b9      	bne.n	4038b6 <_printf_float+0xd6>
  403942:	b19a      	cbz	r2, 40396c <_printf_float+0x18c>
  403944:	2100      	movs	r1, #0
  403946:	9106      	str	r1, [sp, #24]
  403948:	f10d 0133 	add.w	r1, sp, #51	; 0x33
  40394c:	e88d 000c 	stmia.w	sp, {r2, r3}
  403950:	6023      	str	r3, [r4, #0]
  403952:	9005      	str	r0, [sp, #20]
  403954:	463a      	mov	r2, r7
  403956:	f8cd 8010 	str.w	r8, [sp, #16]
  40395a:	f8cd e00c 	str.w	lr, [sp, #12]
  40395e:	9102      	str	r1, [sp, #8]
  403960:	464b      	mov	r3, r9
  403962:	4628      	mov	r0, r5
  403964:	f7ff feab 	bl	4036be <__cvt>
  403968:	4607      	mov	r7, r0
  40396a:	e7bc      	b.n	4038e6 <_printf_float+0x106>
  40396c:	2201      	movs	r2, #1
  40396e:	e7a1      	b.n	4038b4 <_printf_float+0xd4>
  403970:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
  403974:	d119      	bne.n	4039aa <_printf_float+0x1ca>
  403976:	2900      	cmp	r1, #0
  403978:	6863      	ldr	r3, [r4, #4]
  40397a:	dd0c      	ble.n	403996 <_printf_float+0x1b6>
  40397c:	6121      	str	r1, [r4, #16]
  40397e:	b913      	cbnz	r3, 403986 <_printf_float+0x1a6>
  403980:	6822      	ldr	r2, [r4, #0]
  403982:	07d2      	lsls	r2, r2, #31
  403984:	d502      	bpl.n	40398c <_printf_float+0x1ac>
  403986:	3301      	adds	r3, #1
  403988:	440b      	add	r3, r1
  40398a:	6123      	str	r3, [r4, #16]
  40398c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40398e:	65a3      	str	r3, [r4, #88]	; 0x58
  403990:	f04f 0900 	mov.w	r9, #0
  403994:	e7c7      	b.n	403926 <_printf_float+0x146>
  403996:	b913      	cbnz	r3, 40399e <_printf_float+0x1be>
  403998:	6822      	ldr	r2, [r4, #0]
  40399a:	07d0      	lsls	r0, r2, #31
  40399c:	d501      	bpl.n	4039a2 <_printf_float+0x1c2>
  40399e:	3302      	adds	r3, #2
  4039a0:	e7f3      	b.n	40398a <_printf_float+0x1aa>
  4039a2:	2301      	movs	r3, #1
  4039a4:	e7f1      	b.n	40398a <_printf_float+0x1aa>
  4039a6:	f04f 0867 	mov.w	r8, #103	; 0x67
  4039aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4039ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4039ae:	4293      	cmp	r3, r2
  4039b0:	db05      	blt.n	4039be <_printf_float+0x1de>
  4039b2:	6822      	ldr	r2, [r4, #0]
  4039b4:	6123      	str	r3, [r4, #16]
  4039b6:	07d1      	lsls	r1, r2, #31
  4039b8:	d5e8      	bpl.n	40398c <_printf_float+0x1ac>
  4039ba:	3301      	adds	r3, #1
  4039bc:	e7e5      	b.n	40398a <_printf_float+0x1aa>
  4039be:	2b00      	cmp	r3, #0
  4039c0:	bfd4      	ite	le
  4039c2:	f1c3 0302 	rsble	r3, r3, #2
  4039c6:	2301      	movgt	r3, #1
  4039c8:	4413      	add	r3, r2
  4039ca:	e7de      	b.n	40398a <_printf_float+0x1aa>
  4039cc:	6823      	ldr	r3, [r4, #0]
  4039ce:	055a      	lsls	r2, r3, #21
  4039d0:	d407      	bmi.n	4039e2 <_printf_float+0x202>
  4039d2:	6923      	ldr	r3, [r4, #16]
  4039d4:	463a      	mov	r2, r7
  4039d6:	4659      	mov	r1, fp
  4039d8:	4628      	mov	r0, r5
  4039da:	47b0      	blx	r6
  4039dc:	3001      	adds	r0, #1
  4039de:	d12a      	bne.n	403a36 <_printf_float+0x256>
  4039e0:	e75a      	b.n	403898 <_printf_float+0xb8>
  4039e2:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
  4039e6:	f240 80dc 	bls.w	403ba2 <_printf_float+0x3c2>
  4039ea:	2200      	movs	r2, #0
  4039ec:	2300      	movs	r3, #0
  4039ee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
  4039f2:	f7ff fd83 	bl	4034fc <__aeabi_dcmpeq>
  4039f6:	2800      	cmp	r0, #0
  4039f8:	d039      	beq.n	403a6e <_printf_float+0x28e>
  4039fa:	2301      	movs	r3, #1
  4039fc:	4a36      	ldr	r2, [pc, #216]	; (403ad8 <_printf_float+0x2f8>)
  4039fe:	4659      	mov	r1, fp
  403a00:	4628      	mov	r0, r5
  403a02:	47b0      	blx	r6
  403a04:	3001      	adds	r0, #1
  403a06:	f43f af47 	beq.w	403898 <_printf_float+0xb8>
  403a0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403a0c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  403a0e:	429a      	cmp	r2, r3
  403a10:	db02      	blt.n	403a18 <_printf_float+0x238>
  403a12:	6823      	ldr	r3, [r4, #0]
  403a14:	07d8      	lsls	r0, r3, #31
  403a16:	d50e      	bpl.n	403a36 <_printf_float+0x256>
  403a18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403a1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
  403a1c:	4659      	mov	r1, fp
  403a1e:	4628      	mov	r0, r5
  403a20:	47b0      	blx	r6
  403a22:	3001      	adds	r0, #1
  403a24:	f43f af38 	beq.w	403898 <_printf_float+0xb8>
  403a28:	2700      	movs	r7, #0
  403a2a:	f104 081a 	add.w	r8, r4, #26
  403a2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403a30:	3b01      	subs	r3, #1
  403a32:	429f      	cmp	r7, r3
  403a34:	db11      	blt.n	403a5a <_printf_float+0x27a>
  403a36:	6823      	ldr	r3, [r4, #0]
  403a38:	079f      	lsls	r7, r3, #30
  403a3a:	d508      	bpl.n	403a4e <_printf_float+0x26e>
  403a3c:	2700      	movs	r7, #0
  403a3e:	f104 0819 	add.w	r8, r4, #25
  403a42:	68e3      	ldr	r3, [r4, #12]
  403a44:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403a46:	1a9b      	subs	r3, r3, r2
  403a48:	429f      	cmp	r7, r3
  403a4a:	f2c0 80e7 	blt.w	403c1c <_printf_float+0x43c>
  403a4e:	68e0      	ldr	r0, [r4, #12]
  403a50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  403a52:	4298      	cmp	r0, r3
  403a54:	bfb8      	it	lt
  403a56:	4618      	movlt	r0, r3
  403a58:	e720      	b.n	40389c <_printf_float+0xbc>
  403a5a:	2301      	movs	r3, #1
  403a5c:	4642      	mov	r2, r8
  403a5e:	4659      	mov	r1, fp
  403a60:	4628      	mov	r0, r5
  403a62:	47b0      	blx	r6
  403a64:	3001      	adds	r0, #1
  403a66:	f43f af17 	beq.w	403898 <_printf_float+0xb8>
  403a6a:	3701      	adds	r7, #1
  403a6c:	e7df      	b.n	403a2e <_printf_float+0x24e>
  403a6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403a70:	2b00      	cmp	r3, #0
  403a72:	dc33      	bgt.n	403adc <_printf_float+0x2fc>
  403a74:	2301      	movs	r3, #1
  403a76:	4a18      	ldr	r2, [pc, #96]	; (403ad8 <_printf_float+0x2f8>)
  403a78:	4659      	mov	r1, fp
  403a7a:	4628      	mov	r0, r5
  403a7c:	47b0      	blx	r6
  403a7e:	3001      	adds	r0, #1
  403a80:	f43f af0a 	beq.w	403898 <_printf_float+0xb8>
  403a84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403a86:	b923      	cbnz	r3, 403a92 <_printf_float+0x2b2>
  403a88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403a8a:	b913      	cbnz	r3, 403a92 <_printf_float+0x2b2>
  403a8c:	6823      	ldr	r3, [r4, #0]
  403a8e:	07d9      	lsls	r1, r3, #31
  403a90:	d5d1      	bpl.n	403a36 <_printf_float+0x256>
  403a92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403a94:	9a09      	ldr	r2, [sp, #36]	; 0x24
  403a96:	4659      	mov	r1, fp
  403a98:	4628      	mov	r0, r5
  403a9a:	47b0      	blx	r6
  403a9c:	3001      	adds	r0, #1
  403a9e:	f43f aefb 	beq.w	403898 <_printf_float+0xb8>
  403aa2:	f04f 0800 	mov.w	r8, #0
  403aa6:	f104 091a 	add.w	r9, r4, #26
  403aaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403aac:	425b      	negs	r3, r3
  403aae:	4598      	cmp	r8, r3
  403ab0:	db01      	blt.n	403ab6 <_printf_float+0x2d6>
  403ab2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403ab4:	e78e      	b.n	4039d4 <_printf_float+0x1f4>
  403ab6:	2301      	movs	r3, #1
  403ab8:	464a      	mov	r2, r9
  403aba:	4659      	mov	r1, fp
  403abc:	4628      	mov	r0, r5
  403abe:	47b0      	blx	r6
  403ac0:	3001      	adds	r0, #1
  403ac2:	f43f aee9 	beq.w	403898 <_printf_float+0xb8>
  403ac6:	f108 0801 	add.w	r8, r8, #1
  403aca:	e7ee      	b.n	403aaa <_printf_float+0x2ca>
  403acc:	7fefffff 	.word	0x7fefffff
  403ad0:	004064ec 	.word	0x004064ec
  403ad4:	004064f0 	.word	0x004064f0
  403ad8:	004064fc 	.word	0x004064fc
  403adc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403ade:	6da3      	ldr	r3, [r4, #88]	; 0x58
  403ae0:	429a      	cmp	r2, r3
  403ae2:	bfa8      	it	ge
  403ae4:	461a      	movge	r2, r3
  403ae6:	2a00      	cmp	r2, #0
  403ae8:	4690      	mov	r8, r2
  403aea:	dc36      	bgt.n	403b5a <_printf_float+0x37a>
  403aec:	f104 031a 	add.w	r3, r4, #26
  403af0:	f04f 0a00 	mov.w	sl, #0
  403af4:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
  403af8:	930b      	str	r3, [sp, #44]	; 0x2c
  403afa:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
  403afe:	eba9 0308 	sub.w	r3, r9, r8
  403b02:	459a      	cmp	sl, r3
  403b04:	db31      	blt.n	403b6a <_printf_float+0x38a>
  403b06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403b08:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  403b0a:	429a      	cmp	r2, r3
  403b0c:	db38      	blt.n	403b80 <_printf_float+0x3a0>
  403b0e:	6823      	ldr	r3, [r4, #0]
  403b10:	07da      	lsls	r2, r3, #31
  403b12:	d435      	bmi.n	403b80 <_printf_float+0x3a0>
  403b14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403b16:	990d      	ldr	r1, [sp, #52]	; 0x34
  403b18:	eba3 0209 	sub.w	r2, r3, r9
  403b1c:	eba3 0801 	sub.w	r8, r3, r1
  403b20:	4590      	cmp	r8, r2
  403b22:	bfa8      	it	ge
  403b24:	4690      	movge	r8, r2
  403b26:	f1b8 0f00 	cmp.w	r8, #0
  403b2a:	dc31      	bgt.n	403b90 <_printf_float+0x3b0>
  403b2c:	2700      	movs	r7, #0
  403b2e:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
  403b32:	f104 091a 	add.w	r9, r4, #26
  403b36:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  403b38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403b3a:	1a9b      	subs	r3, r3, r2
  403b3c:	eba3 0308 	sub.w	r3, r3, r8
  403b40:	429f      	cmp	r7, r3
  403b42:	f6bf af78 	bge.w	403a36 <_printf_float+0x256>
  403b46:	2301      	movs	r3, #1
  403b48:	464a      	mov	r2, r9
  403b4a:	4659      	mov	r1, fp
  403b4c:	4628      	mov	r0, r5
  403b4e:	47b0      	blx	r6
  403b50:	3001      	adds	r0, #1
  403b52:	f43f aea1 	beq.w	403898 <_printf_float+0xb8>
  403b56:	3701      	adds	r7, #1
  403b58:	e7ed      	b.n	403b36 <_printf_float+0x356>
  403b5a:	4613      	mov	r3, r2
  403b5c:	4659      	mov	r1, fp
  403b5e:	463a      	mov	r2, r7
  403b60:	4628      	mov	r0, r5
  403b62:	47b0      	blx	r6
  403b64:	3001      	adds	r0, #1
  403b66:	d1c1      	bne.n	403aec <_printf_float+0x30c>
  403b68:	e696      	b.n	403898 <_printf_float+0xb8>
  403b6a:	2301      	movs	r3, #1
  403b6c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  403b6e:	4659      	mov	r1, fp
  403b70:	4628      	mov	r0, r5
  403b72:	47b0      	blx	r6
  403b74:	3001      	adds	r0, #1
  403b76:	f43f ae8f 	beq.w	403898 <_printf_float+0xb8>
  403b7a:	f10a 0a01 	add.w	sl, sl, #1
  403b7e:	e7bc      	b.n	403afa <_printf_float+0x31a>
  403b80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403b82:	9a09      	ldr	r2, [sp, #36]	; 0x24
  403b84:	4659      	mov	r1, fp
  403b86:	4628      	mov	r0, r5
  403b88:	47b0      	blx	r6
  403b8a:	3001      	adds	r0, #1
  403b8c:	d1c2      	bne.n	403b14 <_printf_float+0x334>
  403b8e:	e683      	b.n	403898 <_printf_float+0xb8>
  403b90:	4643      	mov	r3, r8
  403b92:	eb07 0209 	add.w	r2, r7, r9
  403b96:	4659      	mov	r1, fp
  403b98:	4628      	mov	r0, r5
  403b9a:	47b0      	blx	r6
  403b9c:	3001      	adds	r0, #1
  403b9e:	d1c5      	bne.n	403b2c <_printf_float+0x34c>
  403ba0:	e67a      	b.n	403898 <_printf_float+0xb8>
  403ba2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403ba4:	2a01      	cmp	r2, #1
  403ba6:	dc01      	bgt.n	403bac <_printf_float+0x3cc>
  403ba8:	07db      	lsls	r3, r3, #31
  403baa:	d534      	bpl.n	403c16 <_printf_float+0x436>
  403bac:	2301      	movs	r3, #1
  403bae:	463a      	mov	r2, r7
  403bb0:	4659      	mov	r1, fp
  403bb2:	4628      	mov	r0, r5
  403bb4:	47b0      	blx	r6
  403bb6:	3001      	adds	r0, #1
  403bb8:	f43f ae6e 	beq.w	403898 <_printf_float+0xb8>
  403bbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403bbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
  403bc0:	4659      	mov	r1, fp
  403bc2:	4628      	mov	r0, r5
  403bc4:	47b0      	blx	r6
  403bc6:	3001      	adds	r0, #1
  403bc8:	f43f ae66 	beq.w	403898 <_printf_float+0xb8>
  403bcc:	2200      	movs	r2, #0
  403bce:	2300      	movs	r3, #0
  403bd0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
  403bd4:	f7ff fc92 	bl	4034fc <__aeabi_dcmpeq>
  403bd8:	b150      	cbz	r0, 403bf0 <_printf_float+0x410>
  403bda:	2700      	movs	r7, #0
  403bdc:	f104 081a 	add.w	r8, r4, #26
  403be0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403be2:	3b01      	subs	r3, #1
  403be4:	429f      	cmp	r7, r3
  403be6:	db0c      	blt.n	403c02 <_printf_float+0x422>
  403be8:	464b      	mov	r3, r9
  403bea:	f104 0250 	add.w	r2, r4, #80	; 0x50
  403bee:	e6f2      	b.n	4039d6 <_printf_float+0x1f6>
  403bf0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403bf2:	1c7a      	adds	r2, r7, #1
  403bf4:	3b01      	subs	r3, #1
  403bf6:	4659      	mov	r1, fp
  403bf8:	4628      	mov	r0, r5
  403bfa:	47b0      	blx	r6
  403bfc:	3001      	adds	r0, #1
  403bfe:	d1f3      	bne.n	403be8 <_printf_float+0x408>
  403c00:	e64a      	b.n	403898 <_printf_float+0xb8>
  403c02:	2301      	movs	r3, #1
  403c04:	4642      	mov	r2, r8
  403c06:	4659      	mov	r1, fp
  403c08:	4628      	mov	r0, r5
  403c0a:	47b0      	blx	r6
  403c0c:	3001      	adds	r0, #1
  403c0e:	f43f ae43 	beq.w	403898 <_printf_float+0xb8>
  403c12:	3701      	adds	r7, #1
  403c14:	e7e4      	b.n	403be0 <_printf_float+0x400>
  403c16:	2301      	movs	r3, #1
  403c18:	463a      	mov	r2, r7
  403c1a:	e7ec      	b.n	403bf6 <_printf_float+0x416>
  403c1c:	2301      	movs	r3, #1
  403c1e:	4642      	mov	r2, r8
  403c20:	4659      	mov	r1, fp
  403c22:	4628      	mov	r0, r5
  403c24:	47b0      	blx	r6
  403c26:	3001      	adds	r0, #1
  403c28:	f43f ae36 	beq.w	403898 <_printf_float+0xb8>
  403c2c:	3701      	adds	r7, #1
  403c2e:	e708      	b.n	403a42 <_printf_float+0x262>
  403c30:	463a      	mov	r2, r7
  403c32:	464b      	mov	r3, r9
  403c34:	4638      	mov	r0, r7
  403c36:	4649      	mov	r1, r9
  403c38:	f002 f980 	bl	405f3c <__aeabi_dcmpun>
  403c3c:	2800      	cmp	r0, #0
  403c3e:	f43f ae30 	beq.w	4038a2 <_printf_float+0xc2>
  403c42:	4b01      	ldr	r3, [pc, #4]	; (403c48 <_printf_float+0x468>)
  403c44:	4f01      	ldr	r7, [pc, #4]	; (403c4c <_printf_float+0x46c>)
  403c46:	e612      	b.n	40386e <_printf_float+0x8e>
  403c48:	004064f4 	.word	0x004064f4
  403c4c:	004064f8 	.word	0x004064f8

00403c50 <_printf_common>:
  403c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403c54:	4691      	mov	r9, r2
  403c56:	461f      	mov	r7, r3
  403c58:	688a      	ldr	r2, [r1, #8]
  403c5a:	690b      	ldr	r3, [r1, #16]
  403c5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
  403c60:	4293      	cmp	r3, r2
  403c62:	bfb8      	it	lt
  403c64:	4613      	movlt	r3, r2
  403c66:	f8c9 3000 	str.w	r3, [r9]
  403c6a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
  403c6e:	4606      	mov	r6, r0
  403c70:	460c      	mov	r4, r1
  403c72:	b112      	cbz	r2, 403c7a <_printf_common+0x2a>
  403c74:	3301      	adds	r3, #1
  403c76:	f8c9 3000 	str.w	r3, [r9]
  403c7a:	6823      	ldr	r3, [r4, #0]
  403c7c:	0699      	lsls	r1, r3, #26
  403c7e:	bf42      	ittt	mi
  403c80:	f8d9 3000 	ldrmi.w	r3, [r9]
  403c84:	3302      	addmi	r3, #2
  403c86:	f8c9 3000 	strmi.w	r3, [r9]
  403c8a:	6825      	ldr	r5, [r4, #0]
  403c8c:	f015 0506 	ands.w	r5, r5, #6
  403c90:	d107      	bne.n	403ca2 <_printf_common+0x52>
  403c92:	f104 0a19 	add.w	sl, r4, #25
  403c96:	68e3      	ldr	r3, [r4, #12]
  403c98:	f8d9 2000 	ldr.w	r2, [r9]
  403c9c:	1a9b      	subs	r3, r3, r2
  403c9e:	429d      	cmp	r5, r3
  403ca0:	db29      	blt.n	403cf6 <_printf_common+0xa6>
  403ca2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
  403ca6:	6822      	ldr	r2, [r4, #0]
  403ca8:	3300      	adds	r3, #0
  403caa:	bf18      	it	ne
  403cac:	2301      	movne	r3, #1
  403cae:	0692      	lsls	r2, r2, #26
  403cb0:	d42e      	bmi.n	403d10 <_printf_common+0xc0>
  403cb2:	f104 0243 	add.w	r2, r4, #67	; 0x43
  403cb6:	4639      	mov	r1, r7
  403cb8:	4630      	mov	r0, r6
  403cba:	47c0      	blx	r8
  403cbc:	3001      	adds	r0, #1
  403cbe:	d021      	beq.n	403d04 <_printf_common+0xb4>
  403cc0:	6823      	ldr	r3, [r4, #0]
  403cc2:	68e5      	ldr	r5, [r4, #12]
  403cc4:	f8d9 2000 	ldr.w	r2, [r9]
  403cc8:	f003 0306 	and.w	r3, r3, #6
  403ccc:	2b04      	cmp	r3, #4
  403cce:	bf08      	it	eq
  403cd0:	1aad      	subeq	r5, r5, r2
  403cd2:	68a3      	ldr	r3, [r4, #8]
  403cd4:	6922      	ldr	r2, [r4, #16]
  403cd6:	bf0c      	ite	eq
  403cd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
  403cdc:	2500      	movne	r5, #0
  403cde:	4293      	cmp	r3, r2
  403ce0:	bfc4      	itt	gt
  403ce2:	1a9b      	subgt	r3, r3, r2
  403ce4:	18ed      	addgt	r5, r5, r3
  403ce6:	f04f 0900 	mov.w	r9, #0
  403cea:	341a      	adds	r4, #26
  403cec:	454d      	cmp	r5, r9
  403cee:	d11b      	bne.n	403d28 <_printf_common+0xd8>
  403cf0:	2000      	movs	r0, #0
  403cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403cf6:	2301      	movs	r3, #1
  403cf8:	4652      	mov	r2, sl
  403cfa:	4639      	mov	r1, r7
  403cfc:	4630      	mov	r0, r6
  403cfe:	47c0      	blx	r8
  403d00:	3001      	adds	r0, #1
  403d02:	d103      	bne.n	403d0c <_printf_common+0xbc>
  403d04:	f04f 30ff 	mov.w	r0, #4294967295
  403d08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403d0c:	3501      	adds	r5, #1
  403d0e:	e7c2      	b.n	403c96 <_printf_common+0x46>
  403d10:	18e1      	adds	r1, r4, r3
  403d12:	1c5a      	adds	r2, r3, #1
  403d14:	2030      	movs	r0, #48	; 0x30
  403d16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
  403d1a:	4422      	add	r2, r4
  403d1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
  403d20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
  403d24:	3302      	adds	r3, #2
  403d26:	e7c4      	b.n	403cb2 <_printf_common+0x62>
  403d28:	2301      	movs	r3, #1
  403d2a:	4622      	mov	r2, r4
  403d2c:	4639      	mov	r1, r7
  403d2e:	4630      	mov	r0, r6
  403d30:	47c0      	blx	r8
  403d32:	3001      	adds	r0, #1
  403d34:	d0e6      	beq.n	403d04 <_printf_common+0xb4>
  403d36:	f109 0901 	add.w	r9, r9, #1
  403d3a:	e7d7      	b.n	403cec <_printf_common+0x9c>

00403d3c <_printf_i>:
  403d3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  403d40:	4617      	mov	r7, r2
  403d42:	7e0a      	ldrb	r2, [r1, #24]
  403d44:	b085      	sub	sp, #20
  403d46:	2a6e      	cmp	r2, #110	; 0x6e
  403d48:	4698      	mov	r8, r3
  403d4a:	4606      	mov	r6, r0
  403d4c:	460c      	mov	r4, r1
  403d4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  403d50:	f101 0e43 	add.w	lr, r1, #67	; 0x43
  403d54:	f000 80bc 	beq.w	403ed0 <_printf_i+0x194>
  403d58:	d81a      	bhi.n	403d90 <_printf_i+0x54>
  403d5a:	2a63      	cmp	r2, #99	; 0x63
  403d5c:	d02e      	beq.n	403dbc <_printf_i+0x80>
  403d5e:	d80a      	bhi.n	403d76 <_printf_i+0x3a>
  403d60:	2a00      	cmp	r2, #0
  403d62:	f000 80c8 	beq.w	403ef6 <_printf_i+0x1ba>
  403d66:	2a58      	cmp	r2, #88	; 0x58
  403d68:	f000 808a 	beq.w	403e80 <_printf_i+0x144>
  403d6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
  403d70:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  403d74:	e02a      	b.n	403dcc <_printf_i+0x90>
  403d76:	2a64      	cmp	r2, #100	; 0x64
  403d78:	d001      	beq.n	403d7e <_printf_i+0x42>
  403d7a:	2a69      	cmp	r2, #105	; 0x69
  403d7c:	d1f6      	bne.n	403d6c <_printf_i+0x30>
  403d7e:	6821      	ldr	r1, [r4, #0]
  403d80:	681a      	ldr	r2, [r3, #0]
  403d82:	f011 0f80 	tst.w	r1, #128	; 0x80
  403d86:	d023      	beq.n	403dd0 <_printf_i+0x94>
  403d88:	1d11      	adds	r1, r2, #4
  403d8a:	6019      	str	r1, [r3, #0]
  403d8c:	6813      	ldr	r3, [r2, #0]
  403d8e:	e027      	b.n	403de0 <_printf_i+0xa4>
  403d90:	2a73      	cmp	r2, #115	; 0x73
  403d92:	f000 80b4 	beq.w	403efe <_printf_i+0x1c2>
  403d96:	d808      	bhi.n	403daa <_printf_i+0x6e>
  403d98:	2a6f      	cmp	r2, #111	; 0x6f
  403d9a:	d02a      	beq.n	403df2 <_printf_i+0xb6>
  403d9c:	2a70      	cmp	r2, #112	; 0x70
  403d9e:	d1e5      	bne.n	403d6c <_printf_i+0x30>
  403da0:	680a      	ldr	r2, [r1, #0]
  403da2:	f042 0220 	orr.w	r2, r2, #32
  403da6:	600a      	str	r2, [r1, #0]
  403da8:	e003      	b.n	403db2 <_printf_i+0x76>
  403daa:	2a75      	cmp	r2, #117	; 0x75
  403dac:	d021      	beq.n	403df2 <_printf_i+0xb6>
  403dae:	2a78      	cmp	r2, #120	; 0x78
  403db0:	d1dc      	bne.n	403d6c <_printf_i+0x30>
  403db2:	2278      	movs	r2, #120	; 0x78
  403db4:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
  403db8:	496e      	ldr	r1, [pc, #440]	; (403f74 <_printf_i+0x238>)
  403dba:	e064      	b.n	403e86 <_printf_i+0x14a>
  403dbc:	681a      	ldr	r2, [r3, #0]
  403dbe:	f101 0542 	add.w	r5, r1, #66	; 0x42
  403dc2:	1d11      	adds	r1, r2, #4
  403dc4:	6019      	str	r1, [r3, #0]
  403dc6:	6813      	ldr	r3, [r2, #0]
  403dc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  403dcc:	2301      	movs	r3, #1
  403dce:	e0a3      	b.n	403f18 <_printf_i+0x1dc>
  403dd0:	f011 0f40 	tst.w	r1, #64	; 0x40
  403dd4:	f102 0104 	add.w	r1, r2, #4
  403dd8:	6019      	str	r1, [r3, #0]
  403dda:	d0d7      	beq.n	403d8c <_printf_i+0x50>
  403ddc:	f9b2 3000 	ldrsh.w	r3, [r2]
  403de0:	2b00      	cmp	r3, #0
  403de2:	da03      	bge.n	403dec <_printf_i+0xb0>
  403de4:	222d      	movs	r2, #45	; 0x2d
  403de6:	425b      	negs	r3, r3
  403de8:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
  403dec:	4962      	ldr	r1, [pc, #392]	; (403f78 <_printf_i+0x23c>)
  403dee:	220a      	movs	r2, #10
  403df0:	e017      	b.n	403e22 <_printf_i+0xe6>
  403df2:	6820      	ldr	r0, [r4, #0]
  403df4:	6819      	ldr	r1, [r3, #0]
  403df6:	f010 0f80 	tst.w	r0, #128	; 0x80
  403dfa:	d003      	beq.n	403e04 <_printf_i+0xc8>
  403dfc:	1d08      	adds	r0, r1, #4
  403dfe:	6018      	str	r0, [r3, #0]
  403e00:	680b      	ldr	r3, [r1, #0]
  403e02:	e006      	b.n	403e12 <_printf_i+0xd6>
  403e04:	f010 0f40 	tst.w	r0, #64	; 0x40
  403e08:	f101 0004 	add.w	r0, r1, #4
  403e0c:	6018      	str	r0, [r3, #0]
  403e0e:	d0f7      	beq.n	403e00 <_printf_i+0xc4>
  403e10:	880b      	ldrh	r3, [r1, #0]
  403e12:	4959      	ldr	r1, [pc, #356]	; (403f78 <_printf_i+0x23c>)
  403e14:	2a6f      	cmp	r2, #111	; 0x6f
  403e16:	bf14      	ite	ne
  403e18:	220a      	movne	r2, #10
  403e1a:	2208      	moveq	r2, #8
  403e1c:	2000      	movs	r0, #0
  403e1e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
  403e22:	6865      	ldr	r5, [r4, #4]
  403e24:	60a5      	str	r5, [r4, #8]
  403e26:	2d00      	cmp	r5, #0
  403e28:	f2c0 809c 	blt.w	403f64 <_printf_i+0x228>
  403e2c:	6820      	ldr	r0, [r4, #0]
  403e2e:	f020 0004 	bic.w	r0, r0, #4
  403e32:	6020      	str	r0, [r4, #0]
  403e34:	2b00      	cmp	r3, #0
  403e36:	d13f      	bne.n	403eb8 <_printf_i+0x17c>
  403e38:	2d00      	cmp	r5, #0
  403e3a:	f040 8095 	bne.w	403f68 <_printf_i+0x22c>
  403e3e:	4675      	mov	r5, lr
  403e40:	2a08      	cmp	r2, #8
  403e42:	d10b      	bne.n	403e5c <_printf_i+0x120>
  403e44:	6823      	ldr	r3, [r4, #0]
  403e46:	07da      	lsls	r2, r3, #31
  403e48:	d508      	bpl.n	403e5c <_printf_i+0x120>
  403e4a:	6923      	ldr	r3, [r4, #16]
  403e4c:	6862      	ldr	r2, [r4, #4]
  403e4e:	429a      	cmp	r2, r3
  403e50:	bfde      	ittt	le
  403e52:	2330      	movle	r3, #48	; 0x30
  403e54:	f805 3c01 	strble.w	r3, [r5, #-1]
  403e58:	f105 35ff 	addle.w	r5, r5, #4294967295
  403e5c:	ebae 0305 	sub.w	r3, lr, r5
  403e60:	6123      	str	r3, [r4, #16]
  403e62:	f8cd 8000 	str.w	r8, [sp]
  403e66:	463b      	mov	r3, r7
  403e68:	aa03      	add	r2, sp, #12
  403e6a:	4621      	mov	r1, r4
  403e6c:	4630      	mov	r0, r6
  403e6e:	f7ff feef 	bl	403c50 <_printf_common>
  403e72:	3001      	adds	r0, #1
  403e74:	d155      	bne.n	403f22 <_printf_i+0x1e6>
  403e76:	f04f 30ff 	mov.w	r0, #4294967295
  403e7a:	b005      	add	sp, #20
  403e7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403e80:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
  403e84:	493c      	ldr	r1, [pc, #240]	; (403f78 <_printf_i+0x23c>)
  403e86:	6822      	ldr	r2, [r4, #0]
  403e88:	6818      	ldr	r0, [r3, #0]
  403e8a:	f012 0f80 	tst.w	r2, #128	; 0x80
  403e8e:	f100 0504 	add.w	r5, r0, #4
  403e92:	601d      	str	r5, [r3, #0]
  403e94:	d001      	beq.n	403e9a <_printf_i+0x15e>
  403e96:	6803      	ldr	r3, [r0, #0]
  403e98:	e002      	b.n	403ea0 <_printf_i+0x164>
  403e9a:	0655      	lsls	r5, r2, #25
  403e9c:	d5fb      	bpl.n	403e96 <_printf_i+0x15a>
  403e9e:	8803      	ldrh	r3, [r0, #0]
  403ea0:	07d0      	lsls	r0, r2, #31
  403ea2:	bf44      	itt	mi
  403ea4:	f042 0220 	orrmi.w	r2, r2, #32
  403ea8:	6022      	strmi	r2, [r4, #0]
  403eaa:	b91b      	cbnz	r3, 403eb4 <_printf_i+0x178>
  403eac:	6822      	ldr	r2, [r4, #0]
  403eae:	f022 0220 	bic.w	r2, r2, #32
  403eb2:	6022      	str	r2, [r4, #0]
  403eb4:	2210      	movs	r2, #16
  403eb6:	e7b1      	b.n	403e1c <_printf_i+0xe0>
  403eb8:	4675      	mov	r5, lr
  403eba:	fbb3 f0f2 	udiv	r0, r3, r2
  403ebe:	fb02 3310 	mls	r3, r2, r0, r3
  403ec2:	5ccb      	ldrb	r3, [r1, r3]
  403ec4:	f805 3d01 	strb.w	r3, [r5, #-1]!
  403ec8:	4603      	mov	r3, r0
  403eca:	2800      	cmp	r0, #0
  403ecc:	d1f5      	bne.n	403eba <_printf_i+0x17e>
  403ece:	e7b7      	b.n	403e40 <_printf_i+0x104>
  403ed0:	6808      	ldr	r0, [r1, #0]
  403ed2:	681a      	ldr	r2, [r3, #0]
  403ed4:	6949      	ldr	r1, [r1, #20]
  403ed6:	f010 0f80 	tst.w	r0, #128	; 0x80
  403eda:	d004      	beq.n	403ee6 <_printf_i+0x1aa>
  403edc:	1d10      	adds	r0, r2, #4
  403ede:	6018      	str	r0, [r3, #0]
  403ee0:	6813      	ldr	r3, [r2, #0]
  403ee2:	6019      	str	r1, [r3, #0]
  403ee4:	e007      	b.n	403ef6 <_printf_i+0x1ba>
  403ee6:	f010 0f40 	tst.w	r0, #64	; 0x40
  403eea:	f102 0004 	add.w	r0, r2, #4
  403eee:	6018      	str	r0, [r3, #0]
  403ef0:	6813      	ldr	r3, [r2, #0]
  403ef2:	d0f6      	beq.n	403ee2 <_printf_i+0x1a6>
  403ef4:	8019      	strh	r1, [r3, #0]
  403ef6:	2300      	movs	r3, #0
  403ef8:	6123      	str	r3, [r4, #16]
  403efa:	4675      	mov	r5, lr
  403efc:	e7b1      	b.n	403e62 <_printf_i+0x126>
  403efe:	681a      	ldr	r2, [r3, #0]
  403f00:	1d11      	adds	r1, r2, #4
  403f02:	6019      	str	r1, [r3, #0]
  403f04:	6815      	ldr	r5, [r2, #0]
  403f06:	6862      	ldr	r2, [r4, #4]
  403f08:	2100      	movs	r1, #0
  403f0a:	4628      	mov	r0, r5
  403f0c:	f001 f960 	bl	4051d0 <memchr>
  403f10:	b108      	cbz	r0, 403f16 <_printf_i+0x1da>
  403f12:	1b40      	subs	r0, r0, r5
  403f14:	6060      	str	r0, [r4, #4]
  403f16:	6863      	ldr	r3, [r4, #4]
  403f18:	6123      	str	r3, [r4, #16]
  403f1a:	2300      	movs	r3, #0
  403f1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  403f20:	e79f      	b.n	403e62 <_printf_i+0x126>
  403f22:	6923      	ldr	r3, [r4, #16]
  403f24:	462a      	mov	r2, r5
  403f26:	4639      	mov	r1, r7
  403f28:	4630      	mov	r0, r6
  403f2a:	47c0      	blx	r8
  403f2c:	3001      	adds	r0, #1
  403f2e:	d0a2      	beq.n	403e76 <_printf_i+0x13a>
  403f30:	6823      	ldr	r3, [r4, #0]
  403f32:	079b      	lsls	r3, r3, #30
  403f34:	d507      	bpl.n	403f46 <_printf_i+0x20a>
  403f36:	2500      	movs	r5, #0
  403f38:	f104 0919 	add.w	r9, r4, #25
  403f3c:	68e3      	ldr	r3, [r4, #12]
  403f3e:	9a03      	ldr	r2, [sp, #12]
  403f40:	1a9b      	subs	r3, r3, r2
  403f42:	429d      	cmp	r5, r3
  403f44:	db05      	blt.n	403f52 <_printf_i+0x216>
  403f46:	68e0      	ldr	r0, [r4, #12]
  403f48:	9b03      	ldr	r3, [sp, #12]
  403f4a:	4298      	cmp	r0, r3
  403f4c:	bfb8      	it	lt
  403f4e:	4618      	movlt	r0, r3
  403f50:	e793      	b.n	403e7a <_printf_i+0x13e>
  403f52:	2301      	movs	r3, #1
  403f54:	464a      	mov	r2, r9
  403f56:	4639      	mov	r1, r7
  403f58:	4630      	mov	r0, r6
  403f5a:	47c0      	blx	r8
  403f5c:	3001      	adds	r0, #1
  403f5e:	d08a      	beq.n	403e76 <_printf_i+0x13a>
  403f60:	3501      	adds	r5, #1
  403f62:	e7eb      	b.n	403f3c <_printf_i+0x200>
  403f64:	2b00      	cmp	r3, #0
  403f66:	d1a7      	bne.n	403eb8 <_printf_i+0x17c>
  403f68:	780b      	ldrb	r3, [r1, #0]
  403f6a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  403f6e:	f104 0542 	add.w	r5, r4, #66	; 0x42
  403f72:	e765      	b.n	403e40 <_printf_i+0x104>
  403f74:	0040650f 	.word	0x0040650f
  403f78:	004064fe 	.word	0x004064fe

00403f7c <iprintf>:
  403f7c:	b40f      	push	{r0, r1, r2, r3}
  403f7e:	4b0a      	ldr	r3, [pc, #40]	; (403fa8 <iprintf+0x2c>)
  403f80:	b513      	push	{r0, r1, r4, lr}
  403f82:	681c      	ldr	r4, [r3, #0]
  403f84:	b124      	cbz	r4, 403f90 <iprintf+0x14>
  403f86:	69a3      	ldr	r3, [r4, #24]
  403f88:	b913      	cbnz	r3, 403f90 <iprintf+0x14>
  403f8a:	4620      	mov	r0, r4
  403f8c:	f001 f81c 	bl	404fc8 <__sinit>
  403f90:	ab05      	add	r3, sp, #20
  403f92:	9a04      	ldr	r2, [sp, #16]
  403f94:	68a1      	ldr	r1, [r4, #8]
  403f96:	9301      	str	r3, [sp, #4]
  403f98:	4620      	mov	r0, r4
  403f9a:	f001 fd1b 	bl	4059d4 <_vfiprintf_r>
  403f9e:	b002      	add	sp, #8
  403fa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  403fa4:	b004      	add	sp, #16
  403fa6:	4770      	bx	lr
  403fa8:	20400000 	.word	0x20400000

00403fac <setbuf>:
  403fac:	2900      	cmp	r1, #0
  403fae:	f44f 6380 	mov.w	r3, #1024	; 0x400
  403fb2:	bf0c      	ite	eq
  403fb4:	2202      	moveq	r2, #2
  403fb6:	2200      	movne	r2, #0
  403fb8:	f000 b800 	b.w	403fbc <setvbuf>

00403fbc <setvbuf>:
  403fbc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  403fc0:	461d      	mov	r5, r3
  403fc2:	4b51      	ldr	r3, [pc, #324]	; (404108 <setvbuf+0x14c>)
  403fc4:	681e      	ldr	r6, [r3, #0]
  403fc6:	4604      	mov	r4, r0
  403fc8:	460f      	mov	r7, r1
  403fca:	4690      	mov	r8, r2
  403fcc:	b126      	cbz	r6, 403fd8 <setvbuf+0x1c>
  403fce:	69b3      	ldr	r3, [r6, #24]
  403fd0:	b913      	cbnz	r3, 403fd8 <setvbuf+0x1c>
  403fd2:	4630      	mov	r0, r6
  403fd4:	f000 fff8 	bl	404fc8 <__sinit>
  403fd8:	4b4c      	ldr	r3, [pc, #304]	; (40410c <setvbuf+0x150>)
  403fda:	429c      	cmp	r4, r3
  403fdc:	d152      	bne.n	404084 <setvbuf+0xc8>
  403fde:	6874      	ldr	r4, [r6, #4]
  403fe0:	f1b8 0f02 	cmp.w	r8, #2
  403fe4:	d006      	beq.n	403ff4 <setvbuf+0x38>
  403fe6:	f1b8 0f01 	cmp.w	r8, #1
  403fea:	f200 8089 	bhi.w	404100 <setvbuf+0x144>
  403fee:	2d00      	cmp	r5, #0
  403ff0:	f2c0 8086 	blt.w	404100 <setvbuf+0x144>
  403ff4:	4621      	mov	r1, r4
  403ff6:	4630      	mov	r0, r6
  403ff8:	f000 ff7c 	bl	404ef4 <_fflush_r>
  403ffc:	6b61      	ldr	r1, [r4, #52]	; 0x34
  403ffe:	b141      	cbz	r1, 404012 <setvbuf+0x56>
  404000:	f104 0344 	add.w	r3, r4, #68	; 0x44
  404004:	4299      	cmp	r1, r3
  404006:	d002      	beq.n	40400e <setvbuf+0x52>
  404008:	4630      	mov	r0, r6
  40400a:	f001 fc0f 	bl	40582c <_free_r>
  40400e:	2300      	movs	r3, #0
  404010:	6363      	str	r3, [r4, #52]	; 0x34
  404012:	2300      	movs	r3, #0
  404014:	61a3      	str	r3, [r4, #24]
  404016:	6063      	str	r3, [r4, #4]
  404018:	89a3      	ldrh	r3, [r4, #12]
  40401a:	061b      	lsls	r3, r3, #24
  40401c:	d503      	bpl.n	404026 <setvbuf+0x6a>
  40401e:	6921      	ldr	r1, [r4, #16]
  404020:	4630      	mov	r0, r6
  404022:	f001 fc03 	bl	40582c <_free_r>
  404026:	89a3      	ldrh	r3, [r4, #12]
  404028:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  40402c:	f023 0303 	bic.w	r3, r3, #3
  404030:	f1b8 0f02 	cmp.w	r8, #2
  404034:	81a3      	strh	r3, [r4, #12]
  404036:	d05d      	beq.n	4040f4 <setvbuf+0x138>
  404038:	ab01      	add	r3, sp, #4
  40403a:	466a      	mov	r2, sp
  40403c:	4621      	mov	r1, r4
  40403e:	4630      	mov	r0, r6
  404040:	f001 f85a 	bl	4050f8 <__swhatbuf_r>
  404044:	89a3      	ldrh	r3, [r4, #12]
  404046:	4318      	orrs	r0, r3
  404048:	81a0      	strh	r0, [r4, #12]
  40404a:	bb2d      	cbnz	r5, 404098 <setvbuf+0xdc>
  40404c:	9d00      	ldr	r5, [sp, #0]
  40404e:	4628      	mov	r0, r5
  404050:	f001 f8b6 	bl	4051c0 <malloc>
  404054:	4607      	mov	r7, r0
  404056:	2800      	cmp	r0, #0
  404058:	d14e      	bne.n	4040f8 <setvbuf+0x13c>
  40405a:	f8dd 9000 	ldr.w	r9, [sp]
  40405e:	45a9      	cmp	r9, r5
  404060:	d13c      	bne.n	4040dc <setvbuf+0x120>
  404062:	f04f 30ff 	mov.w	r0, #4294967295
  404066:	89a3      	ldrh	r3, [r4, #12]
  404068:	f043 0302 	orr.w	r3, r3, #2
  40406c:	81a3      	strh	r3, [r4, #12]
  40406e:	2300      	movs	r3, #0
  404070:	60a3      	str	r3, [r4, #8]
  404072:	f104 0347 	add.w	r3, r4, #71	; 0x47
  404076:	6023      	str	r3, [r4, #0]
  404078:	6123      	str	r3, [r4, #16]
  40407a:	2301      	movs	r3, #1
  40407c:	6163      	str	r3, [r4, #20]
  40407e:	b003      	add	sp, #12
  404080:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404084:	4b22      	ldr	r3, [pc, #136]	; (404110 <setvbuf+0x154>)
  404086:	429c      	cmp	r4, r3
  404088:	d101      	bne.n	40408e <setvbuf+0xd2>
  40408a:	68b4      	ldr	r4, [r6, #8]
  40408c:	e7a8      	b.n	403fe0 <setvbuf+0x24>
  40408e:	4b21      	ldr	r3, [pc, #132]	; (404114 <setvbuf+0x158>)
  404090:	429c      	cmp	r4, r3
  404092:	bf08      	it	eq
  404094:	68f4      	ldreq	r4, [r6, #12]
  404096:	e7a3      	b.n	403fe0 <setvbuf+0x24>
  404098:	2f00      	cmp	r7, #0
  40409a:	d0d8      	beq.n	40404e <setvbuf+0x92>
  40409c:	69b3      	ldr	r3, [r6, #24]
  40409e:	b913      	cbnz	r3, 4040a6 <setvbuf+0xea>
  4040a0:	4630      	mov	r0, r6
  4040a2:	f000 ff91 	bl	404fc8 <__sinit>
  4040a6:	f1b8 0f01 	cmp.w	r8, #1
  4040aa:	bf08      	it	eq
  4040ac:	89a3      	ldrheq	r3, [r4, #12]
  4040ae:	6027      	str	r7, [r4, #0]
  4040b0:	bf04      	itt	eq
  4040b2:	f043 0301 	orreq.w	r3, r3, #1
  4040b6:	81a3      	strheq	r3, [r4, #12]
  4040b8:	89a3      	ldrh	r3, [r4, #12]
  4040ba:	6127      	str	r7, [r4, #16]
  4040bc:	f013 0008 	ands.w	r0, r3, #8
  4040c0:	6165      	str	r5, [r4, #20]
  4040c2:	d01b      	beq.n	4040fc <setvbuf+0x140>
  4040c4:	f013 0001 	ands.w	r0, r3, #1
  4040c8:	bf18      	it	ne
  4040ca:	426d      	negne	r5, r5
  4040cc:	f04f 0300 	mov.w	r3, #0
  4040d0:	bf1d      	ittte	ne
  4040d2:	60a3      	strne	r3, [r4, #8]
  4040d4:	61a5      	strne	r5, [r4, #24]
  4040d6:	4618      	movne	r0, r3
  4040d8:	60a5      	streq	r5, [r4, #8]
  4040da:	e7d0      	b.n	40407e <setvbuf+0xc2>
  4040dc:	4648      	mov	r0, r9
  4040de:	f001 f86f 	bl	4051c0 <malloc>
  4040e2:	4607      	mov	r7, r0
  4040e4:	2800      	cmp	r0, #0
  4040e6:	d0bc      	beq.n	404062 <setvbuf+0xa6>
  4040e8:	89a3      	ldrh	r3, [r4, #12]
  4040ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4040ee:	81a3      	strh	r3, [r4, #12]
  4040f0:	464d      	mov	r5, r9
  4040f2:	e7d3      	b.n	40409c <setvbuf+0xe0>
  4040f4:	2000      	movs	r0, #0
  4040f6:	e7b6      	b.n	404066 <setvbuf+0xaa>
  4040f8:	46a9      	mov	r9, r5
  4040fa:	e7f5      	b.n	4040e8 <setvbuf+0x12c>
  4040fc:	60a0      	str	r0, [r4, #8]
  4040fe:	e7be      	b.n	40407e <setvbuf+0xc2>
  404100:	f04f 30ff 	mov.w	r0, #4294967295
  404104:	e7bb      	b.n	40407e <setvbuf+0xc2>
  404106:	bf00      	nop
  404108:	20400000 	.word	0x20400000
  40410c:	00406550 	.word	0x00406550
  404110:	00406570 	.word	0x00406570
  404114:	00406530 	.word	0x00406530

00404118 <strlen>:
  404118:	4603      	mov	r3, r0
  40411a:	f813 2b01 	ldrb.w	r2, [r3], #1
  40411e:	2a00      	cmp	r2, #0
  404120:	d1fb      	bne.n	40411a <strlen+0x2>
  404122:	1a18      	subs	r0, r3, r0
  404124:	3801      	subs	r0, #1
  404126:	4770      	bx	lr

00404128 <quorem>:
  404128:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40412c:	6903      	ldr	r3, [r0, #16]
  40412e:	690c      	ldr	r4, [r1, #16]
  404130:	429c      	cmp	r4, r3
  404132:	4680      	mov	r8, r0
  404134:	f300 8082 	bgt.w	40423c <quorem+0x114>
  404138:	3c01      	subs	r4, #1
  40413a:	f101 0714 	add.w	r7, r1, #20
  40413e:	ea4f 0e84 	mov.w	lr, r4, lsl #2
  404142:	f100 0614 	add.w	r6, r0, #20
  404146:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
  40414a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
  40414e:	eb06 030e 	add.w	r3, r6, lr
  404152:	3501      	adds	r5, #1
  404154:	eb07 090e 	add.w	r9, r7, lr
  404158:	9301      	str	r3, [sp, #4]
  40415a:	fbb0 f5f5 	udiv	r5, r0, r5
  40415e:	b395      	cbz	r5, 4041c6 <quorem+0x9e>
  404160:	f04f 0a00 	mov.w	sl, #0
  404164:	4638      	mov	r0, r7
  404166:	46b4      	mov	ip, r6
  404168:	46d3      	mov	fp, sl
  40416a:	f850 2b04 	ldr.w	r2, [r0], #4
  40416e:	b293      	uxth	r3, r2
  404170:	fb05 a303 	mla	r3, r5, r3, sl
  404174:	ea4f 4a13 	mov.w	sl, r3, lsr #16
  404178:	b29b      	uxth	r3, r3
  40417a:	ebab 0303 	sub.w	r3, fp, r3
  40417e:	0c12      	lsrs	r2, r2, #16
  404180:	f8bc b000 	ldrh.w	fp, [ip]
  404184:	fb05 a202 	mla	r2, r5, r2, sl
  404188:	fa13 f38b 	uxtah	r3, r3, fp
  40418c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
  404190:	fa1f fb82 	uxth.w	fp, r2
  404194:	f8dc 2000 	ldr.w	r2, [ip]
  404198:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
  40419c:	eb02 4223 	add.w	r2, r2, r3, asr #16
  4041a0:	b29b      	uxth	r3, r3
  4041a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4041a6:	4581      	cmp	r9, r0
  4041a8:	ea4f 4b22 	mov.w	fp, r2, asr #16
  4041ac:	f84c 3b04 	str.w	r3, [ip], #4
  4041b0:	d2db      	bcs.n	40416a <quorem+0x42>
  4041b2:	f856 300e 	ldr.w	r3, [r6, lr]
  4041b6:	b933      	cbnz	r3, 4041c6 <quorem+0x9e>
  4041b8:	9b01      	ldr	r3, [sp, #4]
  4041ba:	3b04      	subs	r3, #4
  4041bc:	429e      	cmp	r6, r3
  4041be:	461a      	mov	r2, r3
  4041c0:	d330      	bcc.n	404224 <quorem+0xfc>
  4041c2:	f8c8 4010 	str.w	r4, [r8, #16]
  4041c6:	4640      	mov	r0, r8
  4041c8:	f001 fa5b 	bl	405682 <__mcmp>
  4041cc:	2800      	cmp	r0, #0
  4041ce:	db25      	blt.n	40421c <quorem+0xf4>
  4041d0:	3501      	adds	r5, #1
  4041d2:	4630      	mov	r0, r6
  4041d4:	f04f 0e00 	mov.w	lr, #0
  4041d8:	f857 2b04 	ldr.w	r2, [r7], #4
  4041dc:	f8d0 c000 	ldr.w	ip, [r0]
  4041e0:	b293      	uxth	r3, r2
  4041e2:	ebae 0303 	sub.w	r3, lr, r3
  4041e6:	0c12      	lsrs	r2, r2, #16
  4041e8:	fa13 f38c 	uxtah	r3, r3, ip
  4041ec:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
  4041f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
  4041f4:	b29b      	uxth	r3, r3
  4041f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4041fa:	45b9      	cmp	r9, r7
  4041fc:	ea4f 4e22 	mov.w	lr, r2, asr #16
  404200:	f840 3b04 	str.w	r3, [r0], #4
  404204:	d2e8      	bcs.n	4041d8 <quorem+0xb0>
  404206:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
  40420a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
  40420e:	b92a      	cbnz	r2, 40421c <quorem+0xf4>
  404210:	3b04      	subs	r3, #4
  404212:	429e      	cmp	r6, r3
  404214:	461a      	mov	r2, r3
  404216:	d30b      	bcc.n	404230 <quorem+0x108>
  404218:	f8c8 4010 	str.w	r4, [r8, #16]
  40421c:	4628      	mov	r0, r5
  40421e:	b003      	add	sp, #12
  404220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404224:	6812      	ldr	r2, [r2, #0]
  404226:	3b04      	subs	r3, #4
  404228:	2a00      	cmp	r2, #0
  40422a:	d1ca      	bne.n	4041c2 <quorem+0x9a>
  40422c:	3c01      	subs	r4, #1
  40422e:	e7c5      	b.n	4041bc <quorem+0x94>
  404230:	6812      	ldr	r2, [r2, #0]
  404232:	3b04      	subs	r3, #4
  404234:	2a00      	cmp	r2, #0
  404236:	d1ef      	bne.n	404218 <quorem+0xf0>
  404238:	3c01      	subs	r4, #1
  40423a:	e7ea      	b.n	404212 <quorem+0xea>
  40423c:	2000      	movs	r0, #0
  40423e:	e7ee      	b.n	40421e <quorem+0xf6>

00404240 <_dtoa_r>:
  404240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404244:	6a46      	ldr	r6, [r0, #36]	; 0x24
  404246:	b095      	sub	sp, #84	; 0x54
  404248:	4604      	mov	r4, r0
  40424a:	9d21      	ldr	r5, [sp, #132]	; 0x84
  40424c:	e9cd 2302 	strd	r2, r3, [sp, #8]
  404250:	b93e      	cbnz	r6, 404262 <_dtoa_r+0x22>
  404252:	2010      	movs	r0, #16
  404254:	f000 ffb4 	bl	4051c0 <malloc>
  404258:	6260      	str	r0, [r4, #36]	; 0x24
  40425a:	6046      	str	r6, [r0, #4]
  40425c:	6086      	str	r6, [r0, #8]
  40425e:	6006      	str	r6, [r0, #0]
  404260:	60c6      	str	r6, [r0, #12]
  404262:	6a63      	ldr	r3, [r4, #36]	; 0x24
  404264:	6819      	ldr	r1, [r3, #0]
  404266:	b151      	cbz	r1, 40427e <_dtoa_r+0x3e>
  404268:	685a      	ldr	r2, [r3, #4]
  40426a:	604a      	str	r2, [r1, #4]
  40426c:	2301      	movs	r3, #1
  40426e:	4093      	lsls	r3, r2
  404270:	608b      	str	r3, [r1, #8]
  404272:	4620      	mov	r0, r4
  404274:	f001 f830 	bl	4052d8 <_Bfree>
  404278:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40427a:	2200      	movs	r2, #0
  40427c:	601a      	str	r2, [r3, #0]
  40427e:	9b03      	ldr	r3, [sp, #12]
  404280:	2b00      	cmp	r3, #0
  404282:	bfbf      	itttt	lt
  404284:	2301      	movlt	r3, #1
  404286:	602b      	strlt	r3, [r5, #0]
  404288:	9b03      	ldrlt	r3, [sp, #12]
  40428a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
  40428e:	bfb2      	itee	lt
  404290:	9303      	strlt	r3, [sp, #12]
  404292:	2300      	movge	r3, #0
  404294:	602b      	strge	r3, [r5, #0]
  404296:	f8dd 900c 	ldr.w	r9, [sp, #12]
  40429a:	4ba9      	ldr	r3, [pc, #676]	; (404540 <_dtoa_r+0x300>)
  40429c:	ea33 0309 	bics.w	r3, r3, r9
  4042a0:	d11b      	bne.n	4042da <_dtoa_r+0x9a>
  4042a2:	9a20      	ldr	r2, [sp, #128]	; 0x80
  4042a4:	f242 730f 	movw	r3, #9999	; 0x270f
  4042a8:	6013      	str	r3, [r2, #0]
  4042aa:	9b02      	ldr	r3, [sp, #8]
  4042ac:	b923      	cbnz	r3, 4042b8 <_dtoa_r+0x78>
  4042ae:	f3c9 0013 	ubfx	r0, r9, #0, #20
  4042b2:	2800      	cmp	r0, #0
  4042b4:	f000 8581 	beq.w	404dba <_dtoa_r+0xb7a>
  4042b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
  4042ba:	b953      	cbnz	r3, 4042d2 <_dtoa_r+0x92>
  4042bc:	4ba1      	ldr	r3, [pc, #644]	; (404544 <_dtoa_r+0x304>)
  4042be:	e021      	b.n	404304 <_dtoa_r+0xc4>
  4042c0:	4ba1      	ldr	r3, [pc, #644]	; (404548 <_dtoa_r+0x308>)
  4042c2:	9306      	str	r3, [sp, #24]
  4042c4:	3308      	adds	r3, #8
  4042c6:	9a22      	ldr	r2, [sp, #136]	; 0x88
  4042c8:	6013      	str	r3, [r2, #0]
  4042ca:	9806      	ldr	r0, [sp, #24]
  4042cc:	b015      	add	sp, #84	; 0x54
  4042ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4042d2:	4b9c      	ldr	r3, [pc, #624]	; (404544 <_dtoa_r+0x304>)
  4042d4:	9306      	str	r3, [sp, #24]
  4042d6:	3303      	adds	r3, #3
  4042d8:	e7f5      	b.n	4042c6 <_dtoa_r+0x86>
  4042da:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  4042de:	2200      	movs	r2, #0
  4042e0:	2300      	movs	r3, #0
  4042e2:	4630      	mov	r0, r6
  4042e4:	4639      	mov	r1, r7
  4042e6:	f7ff f909 	bl	4034fc <__aeabi_dcmpeq>
  4042ea:	4680      	mov	r8, r0
  4042ec:	b160      	cbz	r0, 404308 <_dtoa_r+0xc8>
  4042ee:	9a20      	ldr	r2, [sp, #128]	; 0x80
  4042f0:	2301      	movs	r3, #1
  4042f2:	6013      	str	r3, [r2, #0]
  4042f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
  4042f6:	2b00      	cmp	r3, #0
  4042f8:	f000 855c 	beq.w	404db4 <_dtoa_r+0xb74>
  4042fc:	4b93      	ldr	r3, [pc, #588]	; (40454c <_dtoa_r+0x30c>)
  4042fe:	9a22      	ldr	r2, [sp, #136]	; 0x88
  404300:	6013      	str	r3, [r2, #0]
  404302:	3b01      	subs	r3, #1
  404304:	9306      	str	r3, [sp, #24]
  404306:	e7e0      	b.n	4042ca <_dtoa_r+0x8a>
  404308:	ab12      	add	r3, sp, #72	; 0x48
  40430a:	9301      	str	r3, [sp, #4]
  40430c:	ab13      	add	r3, sp, #76	; 0x4c
  40430e:	9300      	str	r3, [sp, #0]
  404310:	4632      	mov	r2, r6
  404312:	463b      	mov	r3, r7
  404314:	4620      	mov	r0, r4
  404316:	f001 fa2c 	bl	405772 <__d2b>
  40431a:	f3c9 550a 	ubfx	r5, r9, #20, #11
  40431e:	4682      	mov	sl, r0
  404320:	2d00      	cmp	r5, #0
  404322:	d07c      	beq.n	40441e <_dtoa_r+0x1de>
  404324:	f3c7 0313 	ubfx	r3, r7, #0, #20
  404328:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  40432c:	4630      	mov	r0, r6
  40432e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  404332:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
  404336:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
  40433a:	2200      	movs	r2, #0
  40433c:	4b84      	ldr	r3, [pc, #528]	; (404550 <_dtoa_r+0x310>)
  40433e:	f7fe fcc1 	bl	402cc4 <__aeabi_dsub>
  404342:	a379      	add	r3, pc, #484	; (adr r3, 404528 <_dtoa_r+0x2e8>)
  404344:	e9d3 2300 	ldrd	r2, r3, [r3]
  404348:	f7fe fe70 	bl	40302c <__aeabi_dmul>
  40434c:	a378      	add	r3, pc, #480	; (adr r3, 404530 <_dtoa_r+0x2f0>)
  40434e:	e9d3 2300 	ldrd	r2, r3, [r3]
  404352:	f7fe fcb9 	bl	402cc8 <__adddf3>
  404356:	4606      	mov	r6, r0
  404358:	4628      	mov	r0, r5
  40435a:	460f      	mov	r7, r1
  40435c:	f7fe fe00 	bl	402f60 <__aeabi_i2d>
  404360:	a375      	add	r3, pc, #468	; (adr r3, 404538 <_dtoa_r+0x2f8>)
  404362:	e9d3 2300 	ldrd	r2, r3, [r3]
  404366:	f7fe fe61 	bl	40302c <__aeabi_dmul>
  40436a:	4602      	mov	r2, r0
  40436c:	460b      	mov	r3, r1
  40436e:	4630      	mov	r0, r6
  404370:	4639      	mov	r1, r7
  404372:	f7fe fca9 	bl	402cc8 <__adddf3>
  404376:	4606      	mov	r6, r0
  404378:	460f      	mov	r7, r1
  40437a:	f7ff f8f1 	bl	403560 <__aeabi_d2iz>
  40437e:	2200      	movs	r2, #0
  404380:	4683      	mov	fp, r0
  404382:	2300      	movs	r3, #0
  404384:	4630      	mov	r0, r6
  404386:	4639      	mov	r1, r7
  404388:	f7ff f8c2 	bl	403510 <__aeabi_dcmplt>
  40438c:	b158      	cbz	r0, 4043a6 <_dtoa_r+0x166>
  40438e:	4658      	mov	r0, fp
  404390:	f7fe fde6 	bl	402f60 <__aeabi_i2d>
  404394:	4602      	mov	r2, r0
  404396:	460b      	mov	r3, r1
  404398:	4630      	mov	r0, r6
  40439a:	4639      	mov	r1, r7
  40439c:	f7ff f8ae 	bl	4034fc <__aeabi_dcmpeq>
  4043a0:	b908      	cbnz	r0, 4043a6 <_dtoa_r+0x166>
  4043a2:	f10b 3bff 	add.w	fp, fp, #4294967295
  4043a6:	f1bb 0f16 	cmp.w	fp, #22
  4043aa:	d857      	bhi.n	40445c <_dtoa_r+0x21c>
  4043ac:	4969      	ldr	r1, [pc, #420]	; (404554 <_dtoa_r+0x314>)
  4043ae:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
  4043b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4043b6:	e9d1 0100 	ldrd	r0, r1, [r1]
  4043ba:	f7ff f8c7 	bl	40354c <__aeabi_dcmpgt>
  4043be:	2800      	cmp	r0, #0
  4043c0:	d04e      	beq.n	404460 <_dtoa_r+0x220>
  4043c2:	f10b 3bff 	add.w	fp, fp, #4294967295
  4043c6:	2300      	movs	r3, #0
  4043c8:	930d      	str	r3, [sp, #52]	; 0x34
  4043ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4043cc:	1b5d      	subs	r5, r3, r5
  4043ce:	1e6b      	subs	r3, r5, #1
  4043d0:	9307      	str	r3, [sp, #28]
  4043d2:	bf43      	ittte	mi
  4043d4:	2300      	movmi	r3, #0
  4043d6:	f1c5 0801 	rsbmi	r8, r5, #1
  4043da:	9307      	strmi	r3, [sp, #28]
  4043dc:	f04f 0800 	movpl.w	r8, #0
  4043e0:	f1bb 0f00 	cmp.w	fp, #0
  4043e4:	db3e      	blt.n	404464 <_dtoa_r+0x224>
  4043e6:	9b07      	ldr	r3, [sp, #28]
  4043e8:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
  4043ec:	445b      	add	r3, fp
  4043ee:	9307      	str	r3, [sp, #28]
  4043f0:	2300      	movs	r3, #0
  4043f2:	9308      	str	r3, [sp, #32]
  4043f4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  4043f6:	2b09      	cmp	r3, #9
  4043f8:	f200 80b0 	bhi.w	40455c <_dtoa_r+0x31c>
  4043fc:	2b05      	cmp	r3, #5
  4043fe:	bfc4      	itt	gt
  404400:	3b04      	subgt	r3, #4
  404402:	931e      	strgt	r3, [sp, #120]	; 0x78
  404404:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  404406:	f1a3 0302 	sub.w	r3, r3, #2
  40440a:	bfcc      	ite	gt
  40440c:	2600      	movgt	r6, #0
  40440e:	2601      	movle	r6, #1
  404410:	2b03      	cmp	r3, #3
  404412:	f200 80af 	bhi.w	404574 <_dtoa_r+0x334>
  404416:	e8df f003 	tbb	[pc, r3]
  40441a:	8583      	.short	0x8583
  40441c:	772d      	.short	0x772d
  40441e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404420:	9d12      	ldr	r5, [sp, #72]	; 0x48
  404422:	441d      	add	r5, r3
  404424:	f205 4332 	addw	r3, r5, #1074	; 0x432
  404428:	2b20      	cmp	r3, #32
  40442a:	dd11      	ble.n	404450 <_dtoa_r+0x210>
  40442c:	9a02      	ldr	r2, [sp, #8]
  40442e:	f205 4012 	addw	r0, r5, #1042	; 0x412
  404432:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  404436:	fa22 f000 	lsr.w	r0, r2, r0
  40443a:	fa09 f303 	lsl.w	r3, r9, r3
  40443e:	4318      	orrs	r0, r3
  404440:	f7fe fd7e 	bl	402f40 <__aeabi_ui2d>
  404444:	2301      	movs	r3, #1
  404446:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  40444a:	3d01      	subs	r5, #1
  40444c:	9310      	str	r3, [sp, #64]	; 0x40
  40444e:	e774      	b.n	40433a <_dtoa_r+0xfa>
  404450:	f1c3 0020 	rsb	r0, r3, #32
  404454:	9b02      	ldr	r3, [sp, #8]
  404456:	fa03 f000 	lsl.w	r0, r3, r0
  40445a:	e7f1      	b.n	404440 <_dtoa_r+0x200>
  40445c:	2301      	movs	r3, #1
  40445e:	e7b3      	b.n	4043c8 <_dtoa_r+0x188>
  404460:	900d      	str	r0, [sp, #52]	; 0x34
  404462:	e7b2      	b.n	4043ca <_dtoa_r+0x18a>
  404464:	f1cb 0300 	rsb	r3, fp, #0
  404468:	9308      	str	r3, [sp, #32]
  40446a:	2300      	movs	r3, #0
  40446c:	eba8 080b 	sub.w	r8, r8, fp
  404470:	930c      	str	r3, [sp, #48]	; 0x30
  404472:	e7bf      	b.n	4043f4 <_dtoa_r+0x1b4>
  404474:	2301      	movs	r3, #1
  404476:	9309      	str	r3, [sp, #36]	; 0x24
  404478:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40447a:	2b00      	cmp	r3, #0
  40447c:	dd7d      	ble.n	40457a <_dtoa_r+0x33a>
  40447e:	9304      	str	r3, [sp, #16]
  404480:	4699      	mov	r9, r3
  404482:	6a65      	ldr	r5, [r4, #36]	; 0x24
  404484:	2200      	movs	r2, #0
  404486:	606a      	str	r2, [r5, #4]
  404488:	2104      	movs	r1, #4
  40448a:	f101 0214 	add.w	r2, r1, #20
  40448e:	429a      	cmp	r2, r3
  404490:	d978      	bls.n	404584 <_dtoa_r+0x344>
  404492:	6869      	ldr	r1, [r5, #4]
  404494:	4620      	mov	r0, r4
  404496:	f000 feeb 	bl	405270 <_Balloc>
  40449a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40449c:	6028      	str	r0, [r5, #0]
  40449e:	681b      	ldr	r3, [r3, #0]
  4044a0:	9306      	str	r3, [sp, #24]
  4044a2:	f1b9 0f0e 	cmp.w	r9, #14
  4044a6:	f200 80ee 	bhi.w	404686 <_dtoa_r+0x446>
  4044aa:	2e00      	cmp	r6, #0
  4044ac:	f000 80eb 	beq.w	404686 <_dtoa_r+0x446>
  4044b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4044b4:	f1bb 0f00 	cmp.w	fp, #0
  4044b8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  4044bc:	dd77      	ble.n	4045ae <_dtoa_r+0x36e>
  4044be:	4a25      	ldr	r2, [pc, #148]	; (404554 <_dtoa_r+0x314>)
  4044c0:	f00b 030f 	and.w	r3, fp, #15
  4044c4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  4044c8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4044cc:	ea4f 162b 	mov.w	r6, fp, asr #4
  4044d0:	06f0      	lsls	r0, r6, #27
  4044d2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  4044d6:	d55a      	bpl.n	40458e <_dtoa_r+0x34e>
  4044d8:	4b1f      	ldr	r3, [pc, #124]	; (404558 <_dtoa_r+0x318>)
  4044da:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  4044de:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  4044e2:	f7fe fecd 	bl	403280 <__aeabi_ddiv>
  4044e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4044ea:	f006 060f 	and.w	r6, r6, #15
  4044ee:	2503      	movs	r5, #3
  4044f0:	4f19      	ldr	r7, [pc, #100]	; (404558 <_dtoa_r+0x318>)
  4044f2:	2e00      	cmp	r6, #0
  4044f4:	d14d      	bne.n	404592 <_dtoa_r+0x352>
  4044f6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  4044fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4044fe:	f7fe febf 	bl	403280 <__aeabi_ddiv>
  404502:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404506:	e06c      	b.n	4045e2 <_dtoa_r+0x3a2>
  404508:	2301      	movs	r3, #1
  40450a:	9309      	str	r3, [sp, #36]	; 0x24
  40450c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40450e:	445b      	add	r3, fp
  404510:	f103 0901 	add.w	r9, r3, #1
  404514:	9304      	str	r3, [sp, #16]
  404516:	464b      	mov	r3, r9
  404518:	2b01      	cmp	r3, #1
  40451a:	bfb8      	it	lt
  40451c:	2301      	movlt	r3, #1
  40451e:	e7b0      	b.n	404482 <_dtoa_r+0x242>
  404520:	2300      	movs	r3, #0
  404522:	e7a8      	b.n	404476 <_dtoa_r+0x236>
  404524:	2300      	movs	r3, #0
  404526:	e7f0      	b.n	40450a <_dtoa_r+0x2ca>
  404528:	636f4361 	.word	0x636f4361
  40452c:	3fd287a7 	.word	0x3fd287a7
  404530:	8b60c8b3 	.word	0x8b60c8b3
  404534:	3fc68a28 	.word	0x3fc68a28
  404538:	509f79fb 	.word	0x509f79fb
  40453c:	3fd34413 	.word	0x3fd34413
  404540:	7ff00000 	.word	0x7ff00000
  404544:	00406529 	.word	0x00406529
  404548:	00406520 	.word	0x00406520
  40454c:	004064fd 	.word	0x004064fd
  404550:	3ff80000 	.word	0x3ff80000
  404554:	004065b8 	.word	0x004065b8
  404558:	00406590 	.word	0x00406590
  40455c:	2601      	movs	r6, #1
  40455e:	2300      	movs	r3, #0
  404560:	931e      	str	r3, [sp, #120]	; 0x78
  404562:	9609      	str	r6, [sp, #36]	; 0x24
  404564:	f04f 33ff 	mov.w	r3, #4294967295
  404568:	9304      	str	r3, [sp, #16]
  40456a:	4699      	mov	r9, r3
  40456c:	2200      	movs	r2, #0
  40456e:	2312      	movs	r3, #18
  404570:	921f      	str	r2, [sp, #124]	; 0x7c
  404572:	e786      	b.n	404482 <_dtoa_r+0x242>
  404574:	2301      	movs	r3, #1
  404576:	9309      	str	r3, [sp, #36]	; 0x24
  404578:	e7f4      	b.n	404564 <_dtoa_r+0x324>
  40457a:	2301      	movs	r3, #1
  40457c:	9304      	str	r3, [sp, #16]
  40457e:	4699      	mov	r9, r3
  404580:	461a      	mov	r2, r3
  404582:	e7f5      	b.n	404570 <_dtoa_r+0x330>
  404584:	686a      	ldr	r2, [r5, #4]
  404586:	3201      	adds	r2, #1
  404588:	606a      	str	r2, [r5, #4]
  40458a:	0049      	lsls	r1, r1, #1
  40458c:	e77d      	b.n	40448a <_dtoa_r+0x24a>
  40458e:	2502      	movs	r5, #2
  404590:	e7ae      	b.n	4044f0 <_dtoa_r+0x2b0>
  404592:	07f1      	lsls	r1, r6, #31
  404594:	d508      	bpl.n	4045a8 <_dtoa_r+0x368>
  404596:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  40459a:	e9d7 2300 	ldrd	r2, r3, [r7]
  40459e:	f7fe fd45 	bl	40302c <__aeabi_dmul>
  4045a2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  4045a6:	3501      	adds	r5, #1
  4045a8:	1076      	asrs	r6, r6, #1
  4045aa:	3708      	adds	r7, #8
  4045ac:	e7a1      	b.n	4044f2 <_dtoa_r+0x2b2>
  4045ae:	f000 80a5 	beq.w	4046fc <_dtoa_r+0x4bc>
  4045b2:	f1cb 0600 	rsb	r6, fp, #0
  4045b6:	4ba3      	ldr	r3, [pc, #652]	; (404844 <_dtoa_r+0x604>)
  4045b8:	4fa3      	ldr	r7, [pc, #652]	; (404848 <_dtoa_r+0x608>)
  4045ba:	f006 020f 	and.w	r2, r6, #15
  4045be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4045c2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4045c6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  4045ca:	f7fe fd2f 	bl	40302c <__aeabi_dmul>
  4045ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4045d2:	1136      	asrs	r6, r6, #4
  4045d4:	2300      	movs	r3, #0
  4045d6:	2502      	movs	r5, #2
  4045d8:	2e00      	cmp	r6, #0
  4045da:	f040 8084 	bne.w	4046e6 <_dtoa_r+0x4a6>
  4045de:	2b00      	cmp	r3, #0
  4045e0:	d18f      	bne.n	404502 <_dtoa_r+0x2c2>
  4045e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4045e4:	2b00      	cmp	r3, #0
  4045e6:	f000 808b 	beq.w	404700 <_dtoa_r+0x4c0>
  4045ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4045ee:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  4045f2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  4045f6:	2200      	movs	r2, #0
  4045f8:	4b94      	ldr	r3, [pc, #592]	; (40484c <_dtoa_r+0x60c>)
  4045fa:	f7fe ff89 	bl	403510 <__aeabi_dcmplt>
  4045fe:	2800      	cmp	r0, #0
  404600:	d07e      	beq.n	404700 <_dtoa_r+0x4c0>
  404602:	f1b9 0f00 	cmp.w	r9, #0
  404606:	d07b      	beq.n	404700 <_dtoa_r+0x4c0>
  404608:	9b04      	ldr	r3, [sp, #16]
  40460a:	2b00      	cmp	r3, #0
  40460c:	dd37      	ble.n	40467e <_dtoa_r+0x43e>
  40460e:	2200      	movs	r2, #0
  404610:	4b8f      	ldr	r3, [pc, #572]	; (404850 <_dtoa_r+0x610>)
  404612:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  404616:	f7fe fd09 	bl	40302c <__aeabi_dmul>
  40461a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40461e:	9e04      	ldr	r6, [sp, #16]
  404620:	f10b 37ff 	add.w	r7, fp, #4294967295
  404624:	3501      	adds	r5, #1
  404626:	4628      	mov	r0, r5
  404628:	f7fe fc9a 	bl	402f60 <__aeabi_i2d>
  40462c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  404630:	f7fe fcfc 	bl	40302c <__aeabi_dmul>
  404634:	4b87      	ldr	r3, [pc, #540]	; (404854 <_dtoa_r+0x614>)
  404636:	2200      	movs	r2, #0
  404638:	f7fe fb46 	bl	402cc8 <__adddf3>
  40463c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  404640:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  404642:	f1a3 7550 	sub.w	r5, r3, #54525952	; 0x3400000
  404646:	950b      	str	r5, [sp, #44]	; 0x2c
  404648:	2e00      	cmp	r6, #0
  40464a:	d15c      	bne.n	404706 <_dtoa_r+0x4c6>
  40464c:	2200      	movs	r2, #0
  40464e:	4b82      	ldr	r3, [pc, #520]	; (404858 <_dtoa_r+0x618>)
  404650:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404654:	f7fe fb36 	bl	402cc4 <__aeabi_dsub>
  404658:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40465a:	462b      	mov	r3, r5
  40465c:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404660:	f7fe ff74 	bl	40354c <__aeabi_dcmpgt>
  404664:	2800      	cmp	r0, #0
  404666:	f040 82f7 	bne.w	404c58 <_dtoa_r+0xa18>
  40466a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40466c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
  404670:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404674:	f7fe ff4c 	bl	403510 <__aeabi_dcmplt>
  404678:	2800      	cmp	r0, #0
  40467a:	f040 82eb 	bne.w	404c54 <_dtoa_r+0xa14>
  40467e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
  404682:	e9cd 2302 	strd	r2, r3, [sp, #8]
  404686:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404688:	2b00      	cmp	r3, #0
  40468a:	f2c0 8151 	blt.w	404930 <_dtoa_r+0x6f0>
  40468e:	f1bb 0f0e 	cmp.w	fp, #14
  404692:	f300 814d 	bgt.w	404930 <_dtoa_r+0x6f0>
  404696:	4b6b      	ldr	r3, [pc, #428]	; (404844 <_dtoa_r+0x604>)
  404698:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
  40469c:	e9d3 2300 	ldrd	r2, r3, [r3]
  4046a0:	e9cd 2304 	strd	r2, r3, [sp, #16]
  4046a4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4046a6:	2b00      	cmp	r3, #0
  4046a8:	f280 80da 	bge.w	404860 <_dtoa_r+0x620>
  4046ac:	f1b9 0f00 	cmp.w	r9, #0
  4046b0:	f300 80d6 	bgt.w	404860 <_dtoa_r+0x620>
  4046b4:	f040 82cd 	bne.w	404c52 <_dtoa_r+0xa12>
  4046b8:	2200      	movs	r2, #0
  4046ba:	4b67      	ldr	r3, [pc, #412]	; (404858 <_dtoa_r+0x618>)
  4046bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4046c0:	f7fe fcb4 	bl	40302c <__aeabi_dmul>
  4046c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4046c8:	f7fe ff36 	bl	403538 <__aeabi_dcmpge>
  4046cc:	464e      	mov	r6, r9
  4046ce:	464f      	mov	r7, r9
  4046d0:	2800      	cmp	r0, #0
  4046d2:	f040 82a4 	bne.w	404c1e <_dtoa_r+0x9de>
  4046d6:	9b06      	ldr	r3, [sp, #24]
  4046d8:	9a06      	ldr	r2, [sp, #24]
  4046da:	1c5d      	adds	r5, r3, #1
  4046dc:	2331      	movs	r3, #49	; 0x31
  4046de:	7013      	strb	r3, [r2, #0]
  4046e0:	f10b 0b01 	add.w	fp, fp, #1
  4046e4:	e29f      	b.n	404c26 <_dtoa_r+0x9e6>
  4046e6:	07f2      	lsls	r2, r6, #31
  4046e8:	d505      	bpl.n	4046f6 <_dtoa_r+0x4b6>
  4046ea:	e9d7 2300 	ldrd	r2, r3, [r7]
  4046ee:	f7fe fc9d 	bl	40302c <__aeabi_dmul>
  4046f2:	3501      	adds	r5, #1
  4046f4:	2301      	movs	r3, #1
  4046f6:	1076      	asrs	r6, r6, #1
  4046f8:	3708      	adds	r7, #8
  4046fa:	e76d      	b.n	4045d8 <_dtoa_r+0x398>
  4046fc:	2502      	movs	r5, #2
  4046fe:	e770      	b.n	4045e2 <_dtoa_r+0x3a2>
  404700:	465f      	mov	r7, fp
  404702:	464e      	mov	r6, r9
  404704:	e78f      	b.n	404626 <_dtoa_r+0x3e6>
  404706:	9a06      	ldr	r2, [sp, #24]
  404708:	4b4e      	ldr	r3, [pc, #312]	; (404844 <_dtoa_r+0x604>)
  40470a:	4432      	add	r2, r6
  40470c:	9211      	str	r2, [sp, #68]	; 0x44
  40470e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  404710:	1e71      	subs	r1, r6, #1
  404712:	2a00      	cmp	r2, #0
  404714:	d048      	beq.n	4047a8 <_dtoa_r+0x568>
  404716:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
  40471a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40471e:	2000      	movs	r0, #0
  404720:	494e      	ldr	r1, [pc, #312]	; (40485c <_dtoa_r+0x61c>)
  404722:	f7fe fdad 	bl	403280 <__aeabi_ddiv>
  404726:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  40472a:	f7fe facb 	bl	402cc4 <__aeabi_dsub>
  40472e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  404732:	9d06      	ldr	r5, [sp, #24]
  404734:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404738:	f7fe ff12 	bl	403560 <__aeabi_d2iz>
  40473c:	4606      	mov	r6, r0
  40473e:	f7fe fc0f 	bl	402f60 <__aeabi_i2d>
  404742:	4602      	mov	r2, r0
  404744:	460b      	mov	r3, r1
  404746:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40474a:	f7fe fabb 	bl	402cc4 <__aeabi_dsub>
  40474e:	3630      	adds	r6, #48	; 0x30
  404750:	f805 6b01 	strb.w	r6, [r5], #1
  404754:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  404758:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40475c:	f7fe fed8 	bl	403510 <__aeabi_dcmplt>
  404760:	2800      	cmp	r0, #0
  404762:	d165      	bne.n	404830 <_dtoa_r+0x5f0>
  404764:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  404768:	2000      	movs	r0, #0
  40476a:	4938      	ldr	r1, [pc, #224]	; (40484c <_dtoa_r+0x60c>)
  40476c:	f7fe faaa 	bl	402cc4 <__aeabi_dsub>
  404770:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  404774:	f7fe fecc 	bl	403510 <__aeabi_dcmplt>
  404778:	2800      	cmp	r0, #0
  40477a:	f040 80b9 	bne.w	4048f0 <_dtoa_r+0x6b0>
  40477e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404780:	429d      	cmp	r5, r3
  404782:	f43f af7c 	beq.w	40467e <_dtoa_r+0x43e>
  404786:	2200      	movs	r2, #0
  404788:	4b31      	ldr	r3, [pc, #196]	; (404850 <_dtoa_r+0x610>)
  40478a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  40478e:	f7fe fc4d 	bl	40302c <__aeabi_dmul>
  404792:	2200      	movs	r2, #0
  404794:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  404798:	4b2d      	ldr	r3, [pc, #180]	; (404850 <_dtoa_r+0x610>)
  40479a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40479e:	f7fe fc45 	bl	40302c <__aeabi_dmul>
  4047a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4047a6:	e7c5      	b.n	404734 <_dtoa_r+0x4f4>
  4047a8:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
  4047ac:	e9d1 0100 	ldrd	r0, r1, [r1]
  4047b0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  4047b4:	f7fe fc3a 	bl	40302c <__aeabi_dmul>
  4047b8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  4047bc:	9d06      	ldr	r5, [sp, #24]
  4047be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4047c2:	f7fe fecd 	bl	403560 <__aeabi_d2iz>
  4047c6:	4606      	mov	r6, r0
  4047c8:	f7fe fbca 	bl	402f60 <__aeabi_i2d>
  4047cc:	3630      	adds	r6, #48	; 0x30
  4047ce:	4602      	mov	r2, r0
  4047d0:	460b      	mov	r3, r1
  4047d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4047d6:	f7fe fa75 	bl	402cc4 <__aeabi_dsub>
  4047da:	f805 6b01 	strb.w	r6, [r5], #1
  4047de:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4047e0:	42ab      	cmp	r3, r5
  4047e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4047e6:	f04f 0200 	mov.w	r2, #0
  4047ea:	d125      	bne.n	404838 <_dtoa_r+0x5f8>
  4047ec:	4b1b      	ldr	r3, [pc, #108]	; (40485c <_dtoa_r+0x61c>)
  4047ee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  4047f2:	f7fe fa69 	bl	402cc8 <__adddf3>
  4047f6:	4602      	mov	r2, r0
  4047f8:	460b      	mov	r3, r1
  4047fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4047fe:	f7fe fea5 	bl	40354c <__aeabi_dcmpgt>
  404802:	2800      	cmp	r0, #0
  404804:	d174      	bne.n	4048f0 <_dtoa_r+0x6b0>
  404806:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  40480a:	2000      	movs	r0, #0
  40480c:	4913      	ldr	r1, [pc, #76]	; (40485c <_dtoa_r+0x61c>)
  40480e:	f7fe fa59 	bl	402cc4 <__aeabi_dsub>
  404812:	4602      	mov	r2, r0
  404814:	460b      	mov	r3, r1
  404816:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40481a:	f7fe fe79 	bl	403510 <__aeabi_dcmplt>
  40481e:	2800      	cmp	r0, #0
  404820:	f43f af2d 	beq.w	40467e <_dtoa_r+0x43e>
  404824:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  404828:	2b30      	cmp	r3, #48	; 0x30
  40482a:	f105 32ff 	add.w	r2, r5, #4294967295
  40482e:	d001      	beq.n	404834 <_dtoa_r+0x5f4>
  404830:	46bb      	mov	fp, r7
  404832:	e04c      	b.n	4048ce <_dtoa_r+0x68e>
  404834:	4615      	mov	r5, r2
  404836:	e7f5      	b.n	404824 <_dtoa_r+0x5e4>
  404838:	4b05      	ldr	r3, [pc, #20]	; (404850 <_dtoa_r+0x610>)
  40483a:	f7fe fbf7 	bl	40302c <__aeabi_dmul>
  40483e:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404842:	e7bc      	b.n	4047be <_dtoa_r+0x57e>
  404844:	004065b8 	.word	0x004065b8
  404848:	00406590 	.word	0x00406590
  40484c:	3ff00000 	.word	0x3ff00000
  404850:	40240000 	.word	0x40240000
  404854:	401c0000 	.word	0x401c0000
  404858:	40140000 	.word	0x40140000
  40485c:	3fe00000 	.word	0x3fe00000
  404860:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  404864:	9d06      	ldr	r5, [sp, #24]
  404866:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  40486a:	4630      	mov	r0, r6
  40486c:	4639      	mov	r1, r7
  40486e:	f7fe fd07 	bl	403280 <__aeabi_ddiv>
  404872:	f7fe fe75 	bl	403560 <__aeabi_d2iz>
  404876:	4680      	mov	r8, r0
  404878:	f7fe fb72 	bl	402f60 <__aeabi_i2d>
  40487c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  404880:	f7fe fbd4 	bl	40302c <__aeabi_dmul>
  404884:	4602      	mov	r2, r0
  404886:	460b      	mov	r3, r1
  404888:	4630      	mov	r0, r6
  40488a:	4639      	mov	r1, r7
  40488c:	f108 0630 	add.w	r6, r8, #48	; 0x30
  404890:	f7fe fa18 	bl	402cc4 <__aeabi_dsub>
  404894:	f805 6b01 	strb.w	r6, [r5], #1
  404898:	9e06      	ldr	r6, [sp, #24]
  40489a:	1bae      	subs	r6, r5, r6
  40489c:	45b1      	cmp	r9, r6
  40489e:	4602      	mov	r2, r0
  4048a0:	460b      	mov	r3, r1
  4048a2:	d138      	bne.n	404916 <_dtoa_r+0x6d6>
  4048a4:	f7fe fa10 	bl	402cc8 <__adddf3>
  4048a8:	4606      	mov	r6, r0
  4048aa:	460f      	mov	r7, r1
  4048ac:	4602      	mov	r2, r0
  4048ae:	460b      	mov	r3, r1
  4048b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4048b4:	f7fe fe2c 	bl	403510 <__aeabi_dcmplt>
  4048b8:	b9c8      	cbnz	r0, 4048ee <_dtoa_r+0x6ae>
  4048ba:	4632      	mov	r2, r6
  4048bc:	463b      	mov	r3, r7
  4048be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4048c2:	f7fe fe1b 	bl	4034fc <__aeabi_dcmpeq>
  4048c6:	b110      	cbz	r0, 4048ce <_dtoa_r+0x68e>
  4048c8:	f018 0f01 	tst.w	r8, #1
  4048cc:	d10f      	bne.n	4048ee <_dtoa_r+0x6ae>
  4048ce:	4651      	mov	r1, sl
  4048d0:	4620      	mov	r0, r4
  4048d2:	f000 fd01 	bl	4052d8 <_Bfree>
  4048d6:	2300      	movs	r3, #0
  4048d8:	9a20      	ldr	r2, [sp, #128]	; 0x80
  4048da:	702b      	strb	r3, [r5, #0]
  4048dc:	f10b 0301 	add.w	r3, fp, #1
  4048e0:	6013      	str	r3, [r2, #0]
  4048e2:	9b22      	ldr	r3, [sp, #136]	; 0x88
  4048e4:	2b00      	cmp	r3, #0
  4048e6:	f43f acf0 	beq.w	4042ca <_dtoa_r+0x8a>
  4048ea:	601d      	str	r5, [r3, #0]
  4048ec:	e4ed      	b.n	4042ca <_dtoa_r+0x8a>
  4048ee:	465f      	mov	r7, fp
  4048f0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  4048f4:	2a39      	cmp	r2, #57	; 0x39
  4048f6:	f105 33ff 	add.w	r3, r5, #4294967295
  4048fa:	d106      	bne.n	40490a <_dtoa_r+0x6ca>
  4048fc:	9a06      	ldr	r2, [sp, #24]
  4048fe:	429a      	cmp	r2, r3
  404900:	d107      	bne.n	404912 <_dtoa_r+0x6d2>
  404902:	2330      	movs	r3, #48	; 0x30
  404904:	7013      	strb	r3, [r2, #0]
  404906:	3701      	adds	r7, #1
  404908:	4613      	mov	r3, r2
  40490a:	781a      	ldrb	r2, [r3, #0]
  40490c:	3201      	adds	r2, #1
  40490e:	701a      	strb	r2, [r3, #0]
  404910:	e78e      	b.n	404830 <_dtoa_r+0x5f0>
  404912:	461d      	mov	r5, r3
  404914:	e7ec      	b.n	4048f0 <_dtoa_r+0x6b0>
  404916:	2200      	movs	r2, #0
  404918:	4bb4      	ldr	r3, [pc, #720]	; (404bec <_dtoa_r+0x9ac>)
  40491a:	f7fe fb87 	bl	40302c <__aeabi_dmul>
  40491e:	2200      	movs	r2, #0
  404920:	2300      	movs	r3, #0
  404922:	4606      	mov	r6, r0
  404924:	460f      	mov	r7, r1
  404926:	f7fe fde9 	bl	4034fc <__aeabi_dcmpeq>
  40492a:	2800      	cmp	r0, #0
  40492c:	d09b      	beq.n	404866 <_dtoa_r+0x626>
  40492e:	e7ce      	b.n	4048ce <_dtoa_r+0x68e>
  404930:	9a09      	ldr	r2, [sp, #36]	; 0x24
  404932:	2a00      	cmp	r2, #0
  404934:	f000 8129 	beq.w	404b8a <_dtoa_r+0x94a>
  404938:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  40493a:	2a01      	cmp	r2, #1
  40493c:	f300 810e 	bgt.w	404b5c <_dtoa_r+0x91c>
  404940:	9a10      	ldr	r2, [sp, #64]	; 0x40
  404942:	2a00      	cmp	r2, #0
  404944:	f000 8106 	beq.w	404b54 <_dtoa_r+0x914>
  404948:	f203 4333 	addw	r3, r3, #1075	; 0x433
  40494c:	9e08      	ldr	r6, [sp, #32]
  40494e:	4645      	mov	r5, r8
  404950:	9a07      	ldr	r2, [sp, #28]
  404952:	2101      	movs	r1, #1
  404954:	441a      	add	r2, r3
  404956:	4620      	mov	r0, r4
  404958:	4498      	add	r8, r3
  40495a:	9207      	str	r2, [sp, #28]
  40495c:	f000 fd5c 	bl	405418 <__i2b>
  404960:	4607      	mov	r7, r0
  404962:	2d00      	cmp	r5, #0
  404964:	dd0b      	ble.n	40497e <_dtoa_r+0x73e>
  404966:	9b07      	ldr	r3, [sp, #28]
  404968:	2b00      	cmp	r3, #0
  40496a:	dd08      	ble.n	40497e <_dtoa_r+0x73e>
  40496c:	42ab      	cmp	r3, r5
  40496e:	9a07      	ldr	r2, [sp, #28]
  404970:	bfa8      	it	ge
  404972:	462b      	movge	r3, r5
  404974:	eba8 0803 	sub.w	r8, r8, r3
  404978:	1aed      	subs	r5, r5, r3
  40497a:	1ad3      	subs	r3, r2, r3
  40497c:	9307      	str	r3, [sp, #28]
  40497e:	9b08      	ldr	r3, [sp, #32]
  404980:	b1fb      	cbz	r3, 4049c2 <_dtoa_r+0x782>
  404982:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404984:	2b00      	cmp	r3, #0
  404986:	f000 8104 	beq.w	404b92 <_dtoa_r+0x952>
  40498a:	2e00      	cmp	r6, #0
  40498c:	dd11      	ble.n	4049b2 <_dtoa_r+0x772>
  40498e:	4639      	mov	r1, r7
  404990:	4632      	mov	r2, r6
  404992:	4620      	mov	r0, r4
  404994:	f000 fdd6 	bl	405544 <__pow5mult>
  404998:	4652      	mov	r2, sl
  40499a:	4601      	mov	r1, r0
  40499c:	4607      	mov	r7, r0
  40499e:	4620      	mov	r0, r4
  4049a0:	f000 fd43 	bl	40542a <__multiply>
  4049a4:	4651      	mov	r1, sl
  4049a6:	900a      	str	r0, [sp, #40]	; 0x28
  4049a8:	4620      	mov	r0, r4
  4049aa:	f000 fc95 	bl	4052d8 <_Bfree>
  4049ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4049b0:	469a      	mov	sl, r3
  4049b2:	9b08      	ldr	r3, [sp, #32]
  4049b4:	1b9a      	subs	r2, r3, r6
  4049b6:	d004      	beq.n	4049c2 <_dtoa_r+0x782>
  4049b8:	4651      	mov	r1, sl
  4049ba:	4620      	mov	r0, r4
  4049bc:	f000 fdc2 	bl	405544 <__pow5mult>
  4049c0:	4682      	mov	sl, r0
  4049c2:	2101      	movs	r1, #1
  4049c4:	4620      	mov	r0, r4
  4049c6:	f000 fd27 	bl	405418 <__i2b>
  4049ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4049cc:	2b00      	cmp	r3, #0
  4049ce:	4606      	mov	r6, r0
  4049d0:	f340 80e1 	ble.w	404b96 <_dtoa_r+0x956>
  4049d4:	461a      	mov	r2, r3
  4049d6:	4601      	mov	r1, r0
  4049d8:	4620      	mov	r0, r4
  4049da:	f000 fdb3 	bl	405544 <__pow5mult>
  4049de:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  4049e0:	2b01      	cmp	r3, #1
  4049e2:	4606      	mov	r6, r0
  4049e4:	f340 80da 	ble.w	404b9c <_dtoa_r+0x95c>
  4049e8:	2300      	movs	r3, #0
  4049ea:	9308      	str	r3, [sp, #32]
  4049ec:	6933      	ldr	r3, [r6, #16]
  4049ee:	eb06 0383 	add.w	r3, r6, r3, lsl #2
  4049f2:	6918      	ldr	r0, [r3, #16]
  4049f4:	f000 fcc2 	bl	40537c <__hi0bits>
  4049f8:	f1c0 0020 	rsb	r0, r0, #32
  4049fc:	9b07      	ldr	r3, [sp, #28]
  4049fe:	4418      	add	r0, r3
  404a00:	f010 001f 	ands.w	r0, r0, #31
  404a04:	f000 80f0 	beq.w	404be8 <_dtoa_r+0x9a8>
  404a08:	f1c0 0320 	rsb	r3, r0, #32
  404a0c:	2b04      	cmp	r3, #4
  404a0e:	f340 80e2 	ble.w	404bd6 <_dtoa_r+0x996>
  404a12:	9b07      	ldr	r3, [sp, #28]
  404a14:	f1c0 001c 	rsb	r0, r0, #28
  404a18:	4480      	add	r8, r0
  404a1a:	4405      	add	r5, r0
  404a1c:	4403      	add	r3, r0
  404a1e:	9307      	str	r3, [sp, #28]
  404a20:	f1b8 0f00 	cmp.w	r8, #0
  404a24:	dd05      	ble.n	404a32 <_dtoa_r+0x7f2>
  404a26:	4651      	mov	r1, sl
  404a28:	4642      	mov	r2, r8
  404a2a:	4620      	mov	r0, r4
  404a2c:	f000 fdd8 	bl	4055e0 <__lshift>
  404a30:	4682      	mov	sl, r0
  404a32:	9b07      	ldr	r3, [sp, #28]
  404a34:	2b00      	cmp	r3, #0
  404a36:	dd05      	ble.n	404a44 <_dtoa_r+0x804>
  404a38:	4631      	mov	r1, r6
  404a3a:	461a      	mov	r2, r3
  404a3c:	4620      	mov	r0, r4
  404a3e:	f000 fdcf 	bl	4055e0 <__lshift>
  404a42:	4606      	mov	r6, r0
  404a44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404a46:	2b00      	cmp	r3, #0
  404a48:	f000 80d2 	beq.w	404bf0 <_dtoa_r+0x9b0>
  404a4c:	4631      	mov	r1, r6
  404a4e:	4650      	mov	r0, sl
  404a50:	f000 fe17 	bl	405682 <__mcmp>
  404a54:	2800      	cmp	r0, #0
  404a56:	f280 80cb 	bge.w	404bf0 <_dtoa_r+0x9b0>
  404a5a:	2300      	movs	r3, #0
  404a5c:	4651      	mov	r1, sl
  404a5e:	220a      	movs	r2, #10
  404a60:	4620      	mov	r0, r4
  404a62:	f000 fc50 	bl	405306 <__multadd>
  404a66:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404a68:	f10b 3bff 	add.w	fp, fp, #4294967295
  404a6c:	4682      	mov	sl, r0
  404a6e:	2b00      	cmp	r3, #0
  404a70:	f000 81aa 	beq.w	404dc8 <_dtoa_r+0xb88>
  404a74:	2300      	movs	r3, #0
  404a76:	4639      	mov	r1, r7
  404a78:	220a      	movs	r2, #10
  404a7a:	4620      	mov	r0, r4
  404a7c:	f000 fc43 	bl	405306 <__multadd>
  404a80:	9b04      	ldr	r3, [sp, #16]
  404a82:	2b00      	cmp	r3, #0
  404a84:	4607      	mov	r7, r0
  404a86:	dc03      	bgt.n	404a90 <_dtoa_r+0x850>
  404a88:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  404a8a:	2b02      	cmp	r3, #2
  404a8c:	f300 80b8 	bgt.w	404c00 <_dtoa_r+0x9c0>
  404a90:	2d00      	cmp	r5, #0
  404a92:	dd05      	ble.n	404aa0 <_dtoa_r+0x860>
  404a94:	4639      	mov	r1, r7
  404a96:	462a      	mov	r2, r5
  404a98:	4620      	mov	r0, r4
  404a9a:	f000 fda1 	bl	4055e0 <__lshift>
  404a9e:	4607      	mov	r7, r0
  404aa0:	9b08      	ldr	r3, [sp, #32]
  404aa2:	2b00      	cmp	r3, #0
  404aa4:	f000 8110 	beq.w	404cc8 <_dtoa_r+0xa88>
  404aa8:	6879      	ldr	r1, [r7, #4]
  404aaa:	4620      	mov	r0, r4
  404aac:	f000 fbe0 	bl	405270 <_Balloc>
  404ab0:	693a      	ldr	r2, [r7, #16]
  404ab2:	3202      	adds	r2, #2
  404ab4:	4605      	mov	r5, r0
  404ab6:	0092      	lsls	r2, r2, #2
  404ab8:	f107 010c 	add.w	r1, r7, #12
  404abc:	300c      	adds	r0, #12
  404abe:	f7fe fdeb 	bl	403698 <memcpy>
  404ac2:	2201      	movs	r2, #1
  404ac4:	4629      	mov	r1, r5
  404ac6:	4620      	mov	r0, r4
  404ac8:	f000 fd8a 	bl	4055e0 <__lshift>
  404acc:	9b02      	ldr	r3, [sp, #8]
  404ace:	f8dd 8018 	ldr.w	r8, [sp, #24]
  404ad2:	9707      	str	r7, [sp, #28]
  404ad4:	f003 0301 	and.w	r3, r3, #1
  404ad8:	4607      	mov	r7, r0
  404ada:	9308      	str	r3, [sp, #32]
  404adc:	4631      	mov	r1, r6
  404ade:	4650      	mov	r0, sl
  404ae0:	f7ff fb22 	bl	404128 <quorem>
  404ae4:	9907      	ldr	r1, [sp, #28]
  404ae6:	4605      	mov	r5, r0
  404ae8:	f100 0930 	add.w	r9, r0, #48	; 0x30
  404aec:	4650      	mov	r0, sl
  404aee:	f000 fdc8 	bl	405682 <__mcmp>
  404af2:	463a      	mov	r2, r7
  404af4:	9002      	str	r0, [sp, #8]
  404af6:	4631      	mov	r1, r6
  404af8:	4620      	mov	r0, r4
  404afa:	f000 fddc 	bl	4056b6 <__mdiff>
  404afe:	68c3      	ldr	r3, [r0, #12]
  404b00:	4602      	mov	r2, r0
  404b02:	2b00      	cmp	r3, #0
  404b04:	f040 80e2 	bne.w	404ccc <_dtoa_r+0xa8c>
  404b08:	4601      	mov	r1, r0
  404b0a:	9009      	str	r0, [sp, #36]	; 0x24
  404b0c:	4650      	mov	r0, sl
  404b0e:	f000 fdb8 	bl	405682 <__mcmp>
  404b12:	9a09      	ldr	r2, [sp, #36]	; 0x24
  404b14:	4603      	mov	r3, r0
  404b16:	4611      	mov	r1, r2
  404b18:	4620      	mov	r0, r4
  404b1a:	9309      	str	r3, [sp, #36]	; 0x24
  404b1c:	f000 fbdc 	bl	4052d8 <_Bfree>
  404b20:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404b22:	2b00      	cmp	r3, #0
  404b24:	f040 80d4 	bne.w	404cd0 <_dtoa_r+0xa90>
  404b28:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  404b2a:	2a00      	cmp	r2, #0
  404b2c:	f040 80d0 	bne.w	404cd0 <_dtoa_r+0xa90>
  404b30:	9a08      	ldr	r2, [sp, #32]
  404b32:	2a00      	cmp	r2, #0
  404b34:	f040 80cc 	bne.w	404cd0 <_dtoa_r+0xa90>
  404b38:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  404b3c:	f000 80e8 	beq.w	404d10 <_dtoa_r+0xad0>
  404b40:	9b02      	ldr	r3, [sp, #8]
  404b42:	2b00      	cmp	r3, #0
  404b44:	dd01      	ble.n	404b4a <_dtoa_r+0x90a>
  404b46:	f105 0931 	add.w	r9, r5, #49	; 0x31
  404b4a:	f108 0501 	add.w	r5, r8, #1
  404b4e:	f888 9000 	strb.w	r9, [r8]
  404b52:	e06a      	b.n	404c2a <_dtoa_r+0x9ea>
  404b54:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404b56:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  404b5a:	e6f7      	b.n	40494c <_dtoa_r+0x70c>
  404b5c:	9b08      	ldr	r3, [sp, #32]
  404b5e:	f109 36ff 	add.w	r6, r9, #4294967295
  404b62:	42b3      	cmp	r3, r6
  404b64:	bfbf      	itttt	lt
  404b66:	9b08      	ldrlt	r3, [sp, #32]
  404b68:	9608      	strlt	r6, [sp, #32]
  404b6a:	1af2      	sublt	r2, r6, r3
  404b6c:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
  404b6e:	bfb7      	itett	lt
  404b70:	189b      	addlt	r3, r3, r2
  404b72:	1b9e      	subge	r6, r3, r6
  404b74:	930c      	strlt	r3, [sp, #48]	; 0x30
  404b76:	2600      	movlt	r6, #0
  404b78:	f1b9 0f00 	cmp.w	r9, #0
  404b7c:	bfb9      	ittee	lt
  404b7e:	eba8 0509 	sublt.w	r5, r8, r9
  404b82:	2300      	movlt	r3, #0
  404b84:	4645      	movge	r5, r8
  404b86:	464b      	movge	r3, r9
  404b88:	e6e2      	b.n	404950 <_dtoa_r+0x710>
  404b8a:	9e08      	ldr	r6, [sp, #32]
  404b8c:	9f09      	ldr	r7, [sp, #36]	; 0x24
  404b8e:	4645      	mov	r5, r8
  404b90:	e6e7      	b.n	404962 <_dtoa_r+0x722>
  404b92:	9a08      	ldr	r2, [sp, #32]
  404b94:	e710      	b.n	4049b8 <_dtoa_r+0x778>
  404b96:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  404b98:	2b01      	cmp	r3, #1
  404b9a:	dc18      	bgt.n	404bce <_dtoa_r+0x98e>
  404b9c:	9b02      	ldr	r3, [sp, #8]
  404b9e:	b9b3      	cbnz	r3, 404bce <_dtoa_r+0x98e>
  404ba0:	9b03      	ldr	r3, [sp, #12]
  404ba2:	f3c3 0313 	ubfx	r3, r3, #0, #20
  404ba6:	b9a3      	cbnz	r3, 404bd2 <_dtoa_r+0x992>
  404ba8:	9b03      	ldr	r3, [sp, #12]
  404baa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  404bae:	0d1b      	lsrs	r3, r3, #20
  404bb0:	051b      	lsls	r3, r3, #20
  404bb2:	b12b      	cbz	r3, 404bc0 <_dtoa_r+0x980>
  404bb4:	9b07      	ldr	r3, [sp, #28]
  404bb6:	3301      	adds	r3, #1
  404bb8:	9307      	str	r3, [sp, #28]
  404bba:	f108 0801 	add.w	r8, r8, #1
  404bbe:	2301      	movs	r3, #1
  404bc0:	9308      	str	r3, [sp, #32]
  404bc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404bc4:	2b00      	cmp	r3, #0
  404bc6:	f47f af11 	bne.w	4049ec <_dtoa_r+0x7ac>
  404bca:	2001      	movs	r0, #1
  404bcc:	e716      	b.n	4049fc <_dtoa_r+0x7bc>
  404bce:	2300      	movs	r3, #0
  404bd0:	e7f6      	b.n	404bc0 <_dtoa_r+0x980>
  404bd2:	9b02      	ldr	r3, [sp, #8]
  404bd4:	e7f4      	b.n	404bc0 <_dtoa_r+0x980>
  404bd6:	f43f af23 	beq.w	404a20 <_dtoa_r+0x7e0>
  404bda:	9a07      	ldr	r2, [sp, #28]
  404bdc:	331c      	adds	r3, #28
  404bde:	441a      	add	r2, r3
  404be0:	4498      	add	r8, r3
  404be2:	441d      	add	r5, r3
  404be4:	4613      	mov	r3, r2
  404be6:	e71a      	b.n	404a1e <_dtoa_r+0x7de>
  404be8:	4603      	mov	r3, r0
  404bea:	e7f6      	b.n	404bda <_dtoa_r+0x99a>
  404bec:	40240000 	.word	0x40240000
  404bf0:	f1b9 0f00 	cmp.w	r9, #0
  404bf4:	dc33      	bgt.n	404c5e <_dtoa_r+0xa1e>
  404bf6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  404bf8:	2b02      	cmp	r3, #2
  404bfa:	dd30      	ble.n	404c5e <_dtoa_r+0xa1e>
  404bfc:	f8cd 9010 	str.w	r9, [sp, #16]
  404c00:	9b04      	ldr	r3, [sp, #16]
  404c02:	b963      	cbnz	r3, 404c1e <_dtoa_r+0x9de>
  404c04:	4631      	mov	r1, r6
  404c06:	2205      	movs	r2, #5
  404c08:	4620      	mov	r0, r4
  404c0a:	f000 fb7c 	bl	405306 <__multadd>
  404c0e:	4601      	mov	r1, r0
  404c10:	4606      	mov	r6, r0
  404c12:	4650      	mov	r0, sl
  404c14:	f000 fd35 	bl	405682 <__mcmp>
  404c18:	2800      	cmp	r0, #0
  404c1a:	f73f ad5c 	bgt.w	4046d6 <_dtoa_r+0x496>
  404c1e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404c20:	9d06      	ldr	r5, [sp, #24]
  404c22:	ea6f 0b03 	mvn.w	fp, r3
  404c26:	2300      	movs	r3, #0
  404c28:	9307      	str	r3, [sp, #28]
  404c2a:	4631      	mov	r1, r6
  404c2c:	4620      	mov	r0, r4
  404c2e:	f000 fb53 	bl	4052d8 <_Bfree>
  404c32:	2f00      	cmp	r7, #0
  404c34:	f43f ae4b 	beq.w	4048ce <_dtoa_r+0x68e>
  404c38:	9b07      	ldr	r3, [sp, #28]
  404c3a:	b12b      	cbz	r3, 404c48 <_dtoa_r+0xa08>
  404c3c:	42bb      	cmp	r3, r7
  404c3e:	d003      	beq.n	404c48 <_dtoa_r+0xa08>
  404c40:	4619      	mov	r1, r3
  404c42:	4620      	mov	r0, r4
  404c44:	f000 fb48 	bl	4052d8 <_Bfree>
  404c48:	4639      	mov	r1, r7
  404c4a:	4620      	mov	r0, r4
  404c4c:	f000 fb44 	bl	4052d8 <_Bfree>
  404c50:	e63d      	b.n	4048ce <_dtoa_r+0x68e>
  404c52:	2600      	movs	r6, #0
  404c54:	4637      	mov	r7, r6
  404c56:	e7e2      	b.n	404c1e <_dtoa_r+0x9de>
  404c58:	46bb      	mov	fp, r7
  404c5a:	4637      	mov	r7, r6
  404c5c:	e53b      	b.n	4046d6 <_dtoa_r+0x496>
  404c5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404c60:	f8cd 9010 	str.w	r9, [sp, #16]
  404c64:	2b00      	cmp	r3, #0
  404c66:	f47f af13 	bne.w	404a90 <_dtoa_r+0x850>
  404c6a:	9d06      	ldr	r5, [sp, #24]
  404c6c:	4631      	mov	r1, r6
  404c6e:	4650      	mov	r0, sl
  404c70:	f7ff fa5a 	bl	404128 <quorem>
  404c74:	f100 0930 	add.w	r9, r0, #48	; 0x30
  404c78:	f805 9b01 	strb.w	r9, [r5], #1
  404c7c:	9b06      	ldr	r3, [sp, #24]
  404c7e:	9a04      	ldr	r2, [sp, #16]
  404c80:	1aeb      	subs	r3, r5, r3
  404c82:	429a      	cmp	r2, r3
  404c84:	f300 8083 	bgt.w	404d8e <_dtoa_r+0xb4e>
  404c88:	9b06      	ldr	r3, [sp, #24]
  404c8a:	2a01      	cmp	r2, #1
  404c8c:	bfac      	ite	ge
  404c8e:	189b      	addge	r3, r3, r2
  404c90:	3301      	addlt	r3, #1
  404c92:	4698      	mov	r8, r3
  404c94:	2300      	movs	r3, #0
  404c96:	9307      	str	r3, [sp, #28]
  404c98:	4651      	mov	r1, sl
  404c9a:	2201      	movs	r2, #1
  404c9c:	4620      	mov	r0, r4
  404c9e:	f000 fc9f 	bl	4055e0 <__lshift>
  404ca2:	4631      	mov	r1, r6
  404ca4:	4682      	mov	sl, r0
  404ca6:	f000 fcec 	bl	405682 <__mcmp>
  404caa:	2800      	cmp	r0, #0
  404cac:	dc35      	bgt.n	404d1a <_dtoa_r+0xada>
  404cae:	d102      	bne.n	404cb6 <_dtoa_r+0xa76>
  404cb0:	f019 0f01 	tst.w	r9, #1
  404cb4:	d131      	bne.n	404d1a <_dtoa_r+0xada>
  404cb6:	4645      	mov	r5, r8
  404cb8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  404cbc:	2b30      	cmp	r3, #48	; 0x30
  404cbe:	f105 32ff 	add.w	r2, r5, #4294967295
  404cc2:	d1b2      	bne.n	404c2a <_dtoa_r+0x9ea>
  404cc4:	4615      	mov	r5, r2
  404cc6:	e7f7      	b.n	404cb8 <_dtoa_r+0xa78>
  404cc8:	4638      	mov	r0, r7
  404cca:	e6ff      	b.n	404acc <_dtoa_r+0x88c>
  404ccc:	2301      	movs	r3, #1
  404cce:	e722      	b.n	404b16 <_dtoa_r+0x8d6>
  404cd0:	9a02      	ldr	r2, [sp, #8]
  404cd2:	2a00      	cmp	r2, #0
  404cd4:	db04      	blt.n	404ce0 <_dtoa_r+0xaa0>
  404cd6:	d129      	bne.n	404d2c <_dtoa_r+0xaec>
  404cd8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  404cda:	bb3a      	cbnz	r2, 404d2c <_dtoa_r+0xaec>
  404cdc:	9a08      	ldr	r2, [sp, #32]
  404cde:	bb2a      	cbnz	r2, 404d2c <_dtoa_r+0xaec>
  404ce0:	2b00      	cmp	r3, #0
  404ce2:	f77f af32 	ble.w	404b4a <_dtoa_r+0x90a>
  404ce6:	4651      	mov	r1, sl
  404ce8:	2201      	movs	r2, #1
  404cea:	4620      	mov	r0, r4
  404cec:	f000 fc78 	bl	4055e0 <__lshift>
  404cf0:	4631      	mov	r1, r6
  404cf2:	4682      	mov	sl, r0
  404cf4:	f000 fcc5 	bl	405682 <__mcmp>
  404cf8:	2800      	cmp	r0, #0
  404cfa:	dc05      	bgt.n	404d08 <_dtoa_r+0xac8>
  404cfc:	f47f af25 	bne.w	404b4a <_dtoa_r+0x90a>
  404d00:	f019 0f01 	tst.w	r9, #1
  404d04:	f43f af21 	beq.w	404b4a <_dtoa_r+0x90a>
  404d08:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  404d0c:	f47f af1b 	bne.w	404b46 <_dtoa_r+0x906>
  404d10:	2339      	movs	r3, #57	; 0x39
  404d12:	f888 3000 	strb.w	r3, [r8]
  404d16:	f108 0801 	add.w	r8, r8, #1
  404d1a:	4645      	mov	r5, r8
  404d1c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  404d20:	2b39      	cmp	r3, #57	; 0x39
  404d22:	f105 32ff 	add.w	r2, r5, #4294967295
  404d26:	d03a      	beq.n	404d9e <_dtoa_r+0xb5e>
  404d28:	3301      	adds	r3, #1
  404d2a:	e03f      	b.n	404dac <_dtoa_r+0xb6c>
  404d2c:	2b00      	cmp	r3, #0
  404d2e:	f108 0501 	add.w	r5, r8, #1
  404d32:	dd05      	ble.n	404d40 <_dtoa_r+0xb00>
  404d34:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  404d38:	d0ea      	beq.n	404d10 <_dtoa_r+0xad0>
  404d3a:	f109 0901 	add.w	r9, r9, #1
  404d3e:	e706      	b.n	404b4e <_dtoa_r+0x90e>
  404d40:	9b06      	ldr	r3, [sp, #24]
  404d42:	9a04      	ldr	r2, [sp, #16]
  404d44:	f805 9c01 	strb.w	r9, [r5, #-1]
  404d48:	1aeb      	subs	r3, r5, r3
  404d4a:	4293      	cmp	r3, r2
  404d4c:	46a8      	mov	r8, r5
  404d4e:	d0a3      	beq.n	404c98 <_dtoa_r+0xa58>
  404d50:	4651      	mov	r1, sl
  404d52:	2300      	movs	r3, #0
  404d54:	220a      	movs	r2, #10
  404d56:	4620      	mov	r0, r4
  404d58:	f000 fad5 	bl	405306 <__multadd>
  404d5c:	9b07      	ldr	r3, [sp, #28]
  404d5e:	9907      	ldr	r1, [sp, #28]
  404d60:	42bb      	cmp	r3, r7
  404d62:	4682      	mov	sl, r0
  404d64:	f04f 0300 	mov.w	r3, #0
  404d68:	f04f 020a 	mov.w	r2, #10
  404d6c:	4620      	mov	r0, r4
  404d6e:	d104      	bne.n	404d7a <_dtoa_r+0xb3a>
  404d70:	f000 fac9 	bl	405306 <__multadd>
  404d74:	9007      	str	r0, [sp, #28]
  404d76:	4607      	mov	r7, r0
  404d78:	e6b0      	b.n	404adc <_dtoa_r+0x89c>
  404d7a:	f000 fac4 	bl	405306 <__multadd>
  404d7e:	2300      	movs	r3, #0
  404d80:	9007      	str	r0, [sp, #28]
  404d82:	220a      	movs	r2, #10
  404d84:	4639      	mov	r1, r7
  404d86:	4620      	mov	r0, r4
  404d88:	f000 fabd 	bl	405306 <__multadd>
  404d8c:	e7f3      	b.n	404d76 <_dtoa_r+0xb36>
  404d8e:	4651      	mov	r1, sl
  404d90:	2300      	movs	r3, #0
  404d92:	220a      	movs	r2, #10
  404d94:	4620      	mov	r0, r4
  404d96:	f000 fab6 	bl	405306 <__multadd>
  404d9a:	4682      	mov	sl, r0
  404d9c:	e766      	b.n	404c6c <_dtoa_r+0xa2c>
  404d9e:	9b06      	ldr	r3, [sp, #24]
  404da0:	4293      	cmp	r3, r2
  404da2:	d105      	bne.n	404db0 <_dtoa_r+0xb70>
  404da4:	9a06      	ldr	r2, [sp, #24]
  404da6:	f10b 0b01 	add.w	fp, fp, #1
  404daa:	2331      	movs	r3, #49	; 0x31
  404dac:	7013      	strb	r3, [r2, #0]
  404dae:	e73c      	b.n	404c2a <_dtoa_r+0x9ea>
  404db0:	4615      	mov	r5, r2
  404db2:	e7b3      	b.n	404d1c <_dtoa_r+0xadc>
  404db4:	4b09      	ldr	r3, [pc, #36]	; (404ddc <_dtoa_r+0xb9c>)
  404db6:	f7ff baa5 	b.w	404304 <_dtoa_r+0xc4>
  404dba:	9b22      	ldr	r3, [sp, #136]	; 0x88
  404dbc:	2b00      	cmp	r3, #0
  404dbe:	f47f aa7f 	bne.w	4042c0 <_dtoa_r+0x80>
  404dc2:	4b07      	ldr	r3, [pc, #28]	; (404de0 <_dtoa_r+0xba0>)
  404dc4:	f7ff ba9e 	b.w	404304 <_dtoa_r+0xc4>
  404dc8:	9b04      	ldr	r3, [sp, #16]
  404dca:	2b00      	cmp	r3, #0
  404dcc:	f73f af4d 	bgt.w	404c6a <_dtoa_r+0xa2a>
  404dd0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  404dd2:	2b02      	cmp	r3, #2
  404dd4:	f77f af49 	ble.w	404c6a <_dtoa_r+0xa2a>
  404dd8:	e712      	b.n	404c00 <_dtoa_r+0x9c0>
  404dda:	bf00      	nop
  404ddc:	004064fc 	.word	0x004064fc
  404de0:	00406520 	.word	0x00406520

00404de4 <__sflush_r>:
  404de4:	898a      	ldrh	r2, [r1, #12]
  404de6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404dea:	4605      	mov	r5, r0
  404dec:	0710      	lsls	r0, r2, #28
  404dee:	460c      	mov	r4, r1
  404df0:	d45a      	bmi.n	404ea8 <__sflush_r+0xc4>
  404df2:	684b      	ldr	r3, [r1, #4]
  404df4:	2b00      	cmp	r3, #0
  404df6:	dc05      	bgt.n	404e04 <__sflush_r+0x20>
  404df8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  404dfa:	2b00      	cmp	r3, #0
  404dfc:	dc02      	bgt.n	404e04 <__sflush_r+0x20>
  404dfe:	2000      	movs	r0, #0
  404e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404e04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  404e06:	2e00      	cmp	r6, #0
  404e08:	d0f9      	beq.n	404dfe <__sflush_r+0x1a>
  404e0a:	2300      	movs	r3, #0
  404e0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
  404e10:	682f      	ldr	r7, [r5, #0]
  404e12:	602b      	str	r3, [r5, #0]
  404e14:	d033      	beq.n	404e7e <__sflush_r+0x9a>
  404e16:	6d60      	ldr	r0, [r4, #84]	; 0x54
  404e18:	89a3      	ldrh	r3, [r4, #12]
  404e1a:	075a      	lsls	r2, r3, #29
  404e1c:	d505      	bpl.n	404e2a <__sflush_r+0x46>
  404e1e:	6863      	ldr	r3, [r4, #4]
  404e20:	1ac0      	subs	r0, r0, r3
  404e22:	6b63      	ldr	r3, [r4, #52]	; 0x34
  404e24:	b10b      	cbz	r3, 404e2a <__sflush_r+0x46>
  404e26:	6c23      	ldr	r3, [r4, #64]	; 0x40
  404e28:	1ac0      	subs	r0, r0, r3
  404e2a:	2300      	movs	r3, #0
  404e2c:	4602      	mov	r2, r0
  404e2e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  404e30:	6a21      	ldr	r1, [r4, #32]
  404e32:	4628      	mov	r0, r5
  404e34:	47b0      	blx	r6
  404e36:	1c43      	adds	r3, r0, #1
  404e38:	89a3      	ldrh	r3, [r4, #12]
  404e3a:	d106      	bne.n	404e4a <__sflush_r+0x66>
  404e3c:	6829      	ldr	r1, [r5, #0]
  404e3e:	291d      	cmp	r1, #29
  404e40:	d84b      	bhi.n	404eda <__sflush_r+0xf6>
  404e42:	4a2b      	ldr	r2, [pc, #172]	; (404ef0 <__sflush_r+0x10c>)
  404e44:	40ca      	lsrs	r2, r1
  404e46:	07d6      	lsls	r6, r2, #31
  404e48:	d547      	bpl.n	404eda <__sflush_r+0xf6>
  404e4a:	2200      	movs	r2, #0
  404e4c:	6062      	str	r2, [r4, #4]
  404e4e:	04d9      	lsls	r1, r3, #19
  404e50:	6922      	ldr	r2, [r4, #16]
  404e52:	6022      	str	r2, [r4, #0]
  404e54:	d504      	bpl.n	404e60 <__sflush_r+0x7c>
  404e56:	1c42      	adds	r2, r0, #1
  404e58:	d101      	bne.n	404e5e <__sflush_r+0x7a>
  404e5a:	682b      	ldr	r3, [r5, #0]
  404e5c:	b903      	cbnz	r3, 404e60 <__sflush_r+0x7c>
  404e5e:	6560      	str	r0, [r4, #84]	; 0x54
  404e60:	6b61      	ldr	r1, [r4, #52]	; 0x34
  404e62:	602f      	str	r7, [r5, #0]
  404e64:	2900      	cmp	r1, #0
  404e66:	d0ca      	beq.n	404dfe <__sflush_r+0x1a>
  404e68:	f104 0344 	add.w	r3, r4, #68	; 0x44
  404e6c:	4299      	cmp	r1, r3
  404e6e:	d002      	beq.n	404e76 <__sflush_r+0x92>
  404e70:	4628      	mov	r0, r5
  404e72:	f000 fcdb 	bl	40582c <_free_r>
  404e76:	2000      	movs	r0, #0
  404e78:	6360      	str	r0, [r4, #52]	; 0x34
  404e7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404e7e:	6a21      	ldr	r1, [r4, #32]
  404e80:	2301      	movs	r3, #1
  404e82:	4628      	mov	r0, r5
  404e84:	47b0      	blx	r6
  404e86:	1c41      	adds	r1, r0, #1
  404e88:	d1c6      	bne.n	404e18 <__sflush_r+0x34>
  404e8a:	682b      	ldr	r3, [r5, #0]
  404e8c:	2b00      	cmp	r3, #0
  404e8e:	d0c3      	beq.n	404e18 <__sflush_r+0x34>
  404e90:	2b1d      	cmp	r3, #29
  404e92:	d001      	beq.n	404e98 <__sflush_r+0xb4>
  404e94:	2b16      	cmp	r3, #22
  404e96:	d101      	bne.n	404e9c <__sflush_r+0xb8>
  404e98:	602f      	str	r7, [r5, #0]
  404e9a:	e7b0      	b.n	404dfe <__sflush_r+0x1a>
  404e9c:	89a3      	ldrh	r3, [r4, #12]
  404e9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404ea2:	81a3      	strh	r3, [r4, #12]
  404ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404ea8:	690f      	ldr	r7, [r1, #16]
  404eaa:	2f00      	cmp	r7, #0
  404eac:	d0a7      	beq.n	404dfe <__sflush_r+0x1a>
  404eae:	0793      	lsls	r3, r2, #30
  404eb0:	680e      	ldr	r6, [r1, #0]
  404eb2:	bf08      	it	eq
  404eb4:	694b      	ldreq	r3, [r1, #20]
  404eb6:	600f      	str	r7, [r1, #0]
  404eb8:	bf18      	it	ne
  404eba:	2300      	movne	r3, #0
  404ebc:	eba6 0807 	sub.w	r8, r6, r7
  404ec0:	608b      	str	r3, [r1, #8]
  404ec2:	f1b8 0f00 	cmp.w	r8, #0
  404ec6:	dd9a      	ble.n	404dfe <__sflush_r+0x1a>
  404ec8:	4643      	mov	r3, r8
  404eca:	463a      	mov	r2, r7
  404ecc:	6a21      	ldr	r1, [r4, #32]
  404ece:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  404ed0:	4628      	mov	r0, r5
  404ed2:	47b0      	blx	r6
  404ed4:	2800      	cmp	r0, #0
  404ed6:	dc07      	bgt.n	404ee8 <__sflush_r+0x104>
  404ed8:	89a3      	ldrh	r3, [r4, #12]
  404eda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404ede:	81a3      	strh	r3, [r4, #12]
  404ee0:	f04f 30ff 	mov.w	r0, #4294967295
  404ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404ee8:	4407      	add	r7, r0
  404eea:	eba8 0800 	sub.w	r8, r8, r0
  404eee:	e7e8      	b.n	404ec2 <__sflush_r+0xde>
  404ef0:	20400001 	.word	0x20400001

00404ef4 <_fflush_r>:
  404ef4:	b538      	push	{r3, r4, r5, lr}
  404ef6:	690b      	ldr	r3, [r1, #16]
  404ef8:	4605      	mov	r5, r0
  404efa:	460c      	mov	r4, r1
  404efc:	b1db      	cbz	r3, 404f36 <_fflush_r+0x42>
  404efe:	b118      	cbz	r0, 404f08 <_fflush_r+0x14>
  404f00:	6983      	ldr	r3, [r0, #24]
  404f02:	b90b      	cbnz	r3, 404f08 <_fflush_r+0x14>
  404f04:	f000 f860 	bl	404fc8 <__sinit>
  404f08:	4b0c      	ldr	r3, [pc, #48]	; (404f3c <_fflush_r+0x48>)
  404f0a:	429c      	cmp	r4, r3
  404f0c:	d109      	bne.n	404f22 <_fflush_r+0x2e>
  404f0e:	686c      	ldr	r4, [r5, #4]
  404f10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404f14:	b17b      	cbz	r3, 404f36 <_fflush_r+0x42>
  404f16:	4621      	mov	r1, r4
  404f18:	4628      	mov	r0, r5
  404f1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  404f1e:	f7ff bf61 	b.w	404de4 <__sflush_r>
  404f22:	4b07      	ldr	r3, [pc, #28]	; (404f40 <_fflush_r+0x4c>)
  404f24:	429c      	cmp	r4, r3
  404f26:	d101      	bne.n	404f2c <_fflush_r+0x38>
  404f28:	68ac      	ldr	r4, [r5, #8]
  404f2a:	e7f1      	b.n	404f10 <_fflush_r+0x1c>
  404f2c:	4b05      	ldr	r3, [pc, #20]	; (404f44 <_fflush_r+0x50>)
  404f2e:	429c      	cmp	r4, r3
  404f30:	bf08      	it	eq
  404f32:	68ec      	ldreq	r4, [r5, #12]
  404f34:	e7ec      	b.n	404f10 <_fflush_r+0x1c>
  404f36:	2000      	movs	r0, #0
  404f38:	bd38      	pop	{r3, r4, r5, pc}
  404f3a:	bf00      	nop
  404f3c:	00406550 	.word	0x00406550
  404f40:	00406570 	.word	0x00406570
  404f44:	00406530 	.word	0x00406530

00404f48 <_cleanup_r>:
  404f48:	4901      	ldr	r1, [pc, #4]	; (404f50 <_cleanup_r+0x8>)
  404f4a:	f000 b8a9 	b.w	4050a0 <_fwalk_reent>
  404f4e:	bf00      	nop
  404f50:	00404ef5 	.word	0x00404ef5

00404f54 <std.isra.0>:
  404f54:	2300      	movs	r3, #0
  404f56:	b510      	push	{r4, lr}
  404f58:	4604      	mov	r4, r0
  404f5a:	6003      	str	r3, [r0, #0]
  404f5c:	6043      	str	r3, [r0, #4]
  404f5e:	6083      	str	r3, [r0, #8]
  404f60:	8181      	strh	r1, [r0, #12]
  404f62:	6643      	str	r3, [r0, #100]	; 0x64
  404f64:	81c2      	strh	r2, [r0, #14]
  404f66:	6103      	str	r3, [r0, #16]
  404f68:	6143      	str	r3, [r0, #20]
  404f6a:	6183      	str	r3, [r0, #24]
  404f6c:	4619      	mov	r1, r3
  404f6e:	2208      	movs	r2, #8
  404f70:	305c      	adds	r0, #92	; 0x5c
  404f72:	f7fe fb9c 	bl	4036ae <memset>
  404f76:	4b05      	ldr	r3, [pc, #20]	; (404f8c <std.isra.0+0x38>)
  404f78:	6263      	str	r3, [r4, #36]	; 0x24
  404f7a:	4b05      	ldr	r3, [pc, #20]	; (404f90 <std.isra.0+0x3c>)
  404f7c:	62a3      	str	r3, [r4, #40]	; 0x28
  404f7e:	4b05      	ldr	r3, [pc, #20]	; (404f94 <std.isra.0+0x40>)
  404f80:	62e3      	str	r3, [r4, #44]	; 0x2c
  404f82:	4b05      	ldr	r3, [pc, #20]	; (404f98 <std.isra.0+0x44>)
  404f84:	6224      	str	r4, [r4, #32]
  404f86:	6323      	str	r3, [r4, #48]	; 0x30
  404f88:	bd10      	pop	{r4, pc}
  404f8a:	bf00      	nop
  404f8c:	00405c21 	.word	0x00405c21
  404f90:	00405c43 	.word	0x00405c43
  404f94:	00405c7b 	.word	0x00405c7b
  404f98:	00405c9f 	.word	0x00405c9f

00404f9c <__sfmoreglue>:
  404f9c:	b570      	push	{r4, r5, r6, lr}
  404f9e:	1e4a      	subs	r2, r1, #1
  404fa0:	2568      	movs	r5, #104	; 0x68
  404fa2:	4355      	muls	r5, r2
  404fa4:	460e      	mov	r6, r1
  404fa6:	f105 0174 	add.w	r1, r5, #116	; 0x74
  404faa:	f000 fc8d 	bl	4058c8 <_malloc_r>
  404fae:	4604      	mov	r4, r0
  404fb0:	b140      	cbz	r0, 404fc4 <__sfmoreglue+0x28>
  404fb2:	2100      	movs	r1, #0
  404fb4:	e880 0042 	stmia.w	r0, {r1, r6}
  404fb8:	300c      	adds	r0, #12
  404fba:	60a0      	str	r0, [r4, #8]
  404fbc:	f105 0268 	add.w	r2, r5, #104	; 0x68
  404fc0:	f7fe fb75 	bl	4036ae <memset>
  404fc4:	4620      	mov	r0, r4
  404fc6:	bd70      	pop	{r4, r5, r6, pc}

00404fc8 <__sinit>:
  404fc8:	6983      	ldr	r3, [r0, #24]
  404fca:	b510      	push	{r4, lr}
  404fcc:	4604      	mov	r4, r0
  404fce:	bb33      	cbnz	r3, 40501e <__sinit+0x56>
  404fd0:	6483      	str	r3, [r0, #72]	; 0x48
  404fd2:	64c3      	str	r3, [r0, #76]	; 0x4c
  404fd4:	6503      	str	r3, [r0, #80]	; 0x50
  404fd6:	4b12      	ldr	r3, [pc, #72]	; (405020 <__sinit+0x58>)
  404fd8:	4a12      	ldr	r2, [pc, #72]	; (405024 <__sinit+0x5c>)
  404fda:	681b      	ldr	r3, [r3, #0]
  404fdc:	6282      	str	r2, [r0, #40]	; 0x28
  404fde:	4298      	cmp	r0, r3
  404fe0:	bf04      	itt	eq
  404fe2:	2301      	moveq	r3, #1
  404fe4:	6183      	streq	r3, [r0, #24]
  404fe6:	f000 f81f 	bl	405028 <__sfp>
  404fea:	6060      	str	r0, [r4, #4]
  404fec:	4620      	mov	r0, r4
  404fee:	f000 f81b 	bl	405028 <__sfp>
  404ff2:	60a0      	str	r0, [r4, #8]
  404ff4:	4620      	mov	r0, r4
  404ff6:	f000 f817 	bl	405028 <__sfp>
  404ffa:	2200      	movs	r2, #0
  404ffc:	60e0      	str	r0, [r4, #12]
  404ffe:	2104      	movs	r1, #4
  405000:	6860      	ldr	r0, [r4, #4]
  405002:	f7ff ffa7 	bl	404f54 <std.isra.0>
  405006:	2201      	movs	r2, #1
  405008:	2109      	movs	r1, #9
  40500a:	68a0      	ldr	r0, [r4, #8]
  40500c:	f7ff ffa2 	bl	404f54 <std.isra.0>
  405010:	2202      	movs	r2, #2
  405012:	2112      	movs	r1, #18
  405014:	68e0      	ldr	r0, [r4, #12]
  405016:	f7ff ff9d 	bl	404f54 <std.isra.0>
  40501a:	2301      	movs	r3, #1
  40501c:	61a3      	str	r3, [r4, #24]
  40501e:	bd10      	pop	{r4, pc}
  405020:	004064e8 	.word	0x004064e8
  405024:	00404f49 	.word	0x00404f49

00405028 <__sfp>:
  405028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40502a:	4b1c      	ldr	r3, [pc, #112]	; (40509c <__sfp+0x74>)
  40502c:	681e      	ldr	r6, [r3, #0]
  40502e:	69b3      	ldr	r3, [r6, #24]
  405030:	4607      	mov	r7, r0
  405032:	b913      	cbnz	r3, 40503a <__sfp+0x12>
  405034:	4630      	mov	r0, r6
  405036:	f7ff ffc7 	bl	404fc8 <__sinit>
  40503a:	3648      	adds	r6, #72	; 0x48
  40503c:	68b4      	ldr	r4, [r6, #8]
  40503e:	6873      	ldr	r3, [r6, #4]
  405040:	3b01      	subs	r3, #1
  405042:	d503      	bpl.n	40504c <__sfp+0x24>
  405044:	6833      	ldr	r3, [r6, #0]
  405046:	b133      	cbz	r3, 405056 <__sfp+0x2e>
  405048:	6836      	ldr	r6, [r6, #0]
  40504a:	e7f7      	b.n	40503c <__sfp+0x14>
  40504c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
  405050:	b16d      	cbz	r5, 40506e <__sfp+0x46>
  405052:	3468      	adds	r4, #104	; 0x68
  405054:	e7f4      	b.n	405040 <__sfp+0x18>
  405056:	2104      	movs	r1, #4
  405058:	4638      	mov	r0, r7
  40505a:	f7ff ff9f 	bl	404f9c <__sfmoreglue>
  40505e:	6030      	str	r0, [r6, #0]
  405060:	2800      	cmp	r0, #0
  405062:	d1f1      	bne.n	405048 <__sfp+0x20>
  405064:	230c      	movs	r3, #12
  405066:	603b      	str	r3, [r7, #0]
  405068:	4604      	mov	r4, r0
  40506a:	4620      	mov	r0, r4
  40506c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40506e:	f64f 73ff 	movw	r3, #65535	; 0xffff
  405072:	81e3      	strh	r3, [r4, #14]
  405074:	2301      	movs	r3, #1
  405076:	81a3      	strh	r3, [r4, #12]
  405078:	6665      	str	r5, [r4, #100]	; 0x64
  40507a:	6025      	str	r5, [r4, #0]
  40507c:	60a5      	str	r5, [r4, #8]
  40507e:	6065      	str	r5, [r4, #4]
  405080:	6125      	str	r5, [r4, #16]
  405082:	6165      	str	r5, [r4, #20]
  405084:	61a5      	str	r5, [r4, #24]
  405086:	2208      	movs	r2, #8
  405088:	4629      	mov	r1, r5
  40508a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
  40508e:	f7fe fb0e 	bl	4036ae <memset>
  405092:	6365      	str	r5, [r4, #52]	; 0x34
  405094:	63a5      	str	r5, [r4, #56]	; 0x38
  405096:	64a5      	str	r5, [r4, #72]	; 0x48
  405098:	64e5      	str	r5, [r4, #76]	; 0x4c
  40509a:	e7e6      	b.n	40506a <__sfp+0x42>
  40509c:	004064e8 	.word	0x004064e8

004050a0 <_fwalk_reent>:
  4050a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4050a4:	4680      	mov	r8, r0
  4050a6:	4689      	mov	r9, r1
  4050a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
  4050ac:	2600      	movs	r6, #0
  4050ae:	b914      	cbnz	r4, 4050b6 <_fwalk_reent+0x16>
  4050b0:	4630      	mov	r0, r6
  4050b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4050b6:	68a5      	ldr	r5, [r4, #8]
  4050b8:	6867      	ldr	r7, [r4, #4]
  4050ba:	3f01      	subs	r7, #1
  4050bc:	d501      	bpl.n	4050c2 <_fwalk_reent+0x22>
  4050be:	6824      	ldr	r4, [r4, #0]
  4050c0:	e7f5      	b.n	4050ae <_fwalk_reent+0xe>
  4050c2:	89ab      	ldrh	r3, [r5, #12]
  4050c4:	2b01      	cmp	r3, #1
  4050c6:	d907      	bls.n	4050d8 <_fwalk_reent+0x38>
  4050c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
  4050cc:	3301      	adds	r3, #1
  4050ce:	d003      	beq.n	4050d8 <_fwalk_reent+0x38>
  4050d0:	4629      	mov	r1, r5
  4050d2:	4640      	mov	r0, r8
  4050d4:	47c8      	blx	r9
  4050d6:	4306      	orrs	r6, r0
  4050d8:	3568      	adds	r5, #104	; 0x68
  4050da:	e7ee      	b.n	4050ba <_fwalk_reent+0x1a>

004050dc <_localeconv_r>:
  4050dc:	4b04      	ldr	r3, [pc, #16]	; (4050f0 <_localeconv_r+0x14>)
  4050de:	681b      	ldr	r3, [r3, #0]
  4050e0:	6a18      	ldr	r0, [r3, #32]
  4050e2:	4b04      	ldr	r3, [pc, #16]	; (4050f4 <_localeconv_r+0x18>)
  4050e4:	2800      	cmp	r0, #0
  4050e6:	bf08      	it	eq
  4050e8:	4618      	moveq	r0, r3
  4050ea:	30f0      	adds	r0, #240	; 0xf0
  4050ec:	4770      	bx	lr
  4050ee:	bf00      	nop
  4050f0:	20400000 	.word	0x20400000
  4050f4:	20400064 	.word	0x20400064

004050f8 <__swhatbuf_r>:
  4050f8:	b570      	push	{r4, r5, r6, lr}
  4050fa:	460e      	mov	r6, r1
  4050fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405100:	2900      	cmp	r1, #0
  405102:	b090      	sub	sp, #64	; 0x40
  405104:	4614      	mov	r4, r2
  405106:	461d      	mov	r5, r3
  405108:	da07      	bge.n	40511a <__swhatbuf_r+0x22>
  40510a:	2300      	movs	r3, #0
  40510c:	602b      	str	r3, [r5, #0]
  40510e:	89b3      	ldrh	r3, [r6, #12]
  405110:	061a      	lsls	r2, r3, #24
  405112:	d410      	bmi.n	405136 <__swhatbuf_r+0x3e>
  405114:	f44f 6380 	mov.w	r3, #1024	; 0x400
  405118:	e00e      	b.n	405138 <__swhatbuf_r+0x40>
  40511a:	aa01      	add	r2, sp, #4
  40511c:	f000 fea6 	bl	405e6c <_fstat_r>
  405120:	2800      	cmp	r0, #0
  405122:	dbf2      	blt.n	40510a <__swhatbuf_r+0x12>
  405124:	9a02      	ldr	r2, [sp, #8]
  405126:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  40512a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
  40512e:	425a      	negs	r2, r3
  405130:	415a      	adcs	r2, r3
  405132:	602a      	str	r2, [r5, #0]
  405134:	e7ee      	b.n	405114 <__swhatbuf_r+0x1c>
  405136:	2340      	movs	r3, #64	; 0x40
  405138:	2000      	movs	r0, #0
  40513a:	6023      	str	r3, [r4, #0]
  40513c:	b010      	add	sp, #64	; 0x40
  40513e:	bd70      	pop	{r4, r5, r6, pc}

00405140 <__smakebuf_r>:
  405140:	898b      	ldrh	r3, [r1, #12]
  405142:	b573      	push	{r0, r1, r4, r5, r6, lr}
  405144:	079d      	lsls	r5, r3, #30
  405146:	4606      	mov	r6, r0
  405148:	460c      	mov	r4, r1
  40514a:	d507      	bpl.n	40515c <__smakebuf_r+0x1c>
  40514c:	f104 0347 	add.w	r3, r4, #71	; 0x47
  405150:	6023      	str	r3, [r4, #0]
  405152:	6123      	str	r3, [r4, #16]
  405154:	2301      	movs	r3, #1
  405156:	6163      	str	r3, [r4, #20]
  405158:	b002      	add	sp, #8
  40515a:	bd70      	pop	{r4, r5, r6, pc}
  40515c:	ab01      	add	r3, sp, #4
  40515e:	466a      	mov	r2, sp
  405160:	f7ff ffca 	bl	4050f8 <__swhatbuf_r>
  405164:	9900      	ldr	r1, [sp, #0]
  405166:	4605      	mov	r5, r0
  405168:	4630      	mov	r0, r6
  40516a:	f000 fbad 	bl	4058c8 <_malloc_r>
  40516e:	b948      	cbnz	r0, 405184 <__smakebuf_r+0x44>
  405170:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405174:	059a      	lsls	r2, r3, #22
  405176:	d4ef      	bmi.n	405158 <__smakebuf_r+0x18>
  405178:	f023 0303 	bic.w	r3, r3, #3
  40517c:	f043 0302 	orr.w	r3, r3, #2
  405180:	81a3      	strh	r3, [r4, #12]
  405182:	e7e3      	b.n	40514c <__smakebuf_r+0xc>
  405184:	4b0d      	ldr	r3, [pc, #52]	; (4051bc <__smakebuf_r+0x7c>)
  405186:	62b3      	str	r3, [r6, #40]	; 0x28
  405188:	89a3      	ldrh	r3, [r4, #12]
  40518a:	6020      	str	r0, [r4, #0]
  40518c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405190:	81a3      	strh	r3, [r4, #12]
  405192:	9b00      	ldr	r3, [sp, #0]
  405194:	6163      	str	r3, [r4, #20]
  405196:	9b01      	ldr	r3, [sp, #4]
  405198:	6120      	str	r0, [r4, #16]
  40519a:	b15b      	cbz	r3, 4051b4 <__smakebuf_r+0x74>
  40519c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4051a0:	4630      	mov	r0, r6
  4051a2:	f000 fe75 	bl	405e90 <_isatty_r>
  4051a6:	b128      	cbz	r0, 4051b4 <__smakebuf_r+0x74>
  4051a8:	89a3      	ldrh	r3, [r4, #12]
  4051aa:	f023 0303 	bic.w	r3, r3, #3
  4051ae:	f043 0301 	orr.w	r3, r3, #1
  4051b2:	81a3      	strh	r3, [r4, #12]
  4051b4:	89a3      	ldrh	r3, [r4, #12]
  4051b6:	431d      	orrs	r5, r3
  4051b8:	81a5      	strh	r5, [r4, #12]
  4051ba:	e7cd      	b.n	405158 <__smakebuf_r+0x18>
  4051bc:	00404f49 	.word	0x00404f49

004051c0 <malloc>:
  4051c0:	4b02      	ldr	r3, [pc, #8]	; (4051cc <malloc+0xc>)
  4051c2:	4601      	mov	r1, r0
  4051c4:	6818      	ldr	r0, [r3, #0]
  4051c6:	f000 bb7f 	b.w	4058c8 <_malloc_r>
  4051ca:	bf00      	nop
  4051cc:	20400000 	.word	0x20400000

004051d0 <memchr>:
  4051d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4051d4:	2a10      	cmp	r2, #16
  4051d6:	db2b      	blt.n	405230 <memchr+0x60>
  4051d8:	f010 0f07 	tst.w	r0, #7
  4051dc:	d008      	beq.n	4051f0 <memchr+0x20>
  4051de:	f810 3b01 	ldrb.w	r3, [r0], #1
  4051e2:	3a01      	subs	r2, #1
  4051e4:	428b      	cmp	r3, r1
  4051e6:	d02d      	beq.n	405244 <memchr+0x74>
  4051e8:	f010 0f07 	tst.w	r0, #7
  4051ec:	b342      	cbz	r2, 405240 <memchr+0x70>
  4051ee:	d1f6      	bne.n	4051de <memchr+0xe>
  4051f0:	b4f0      	push	{r4, r5, r6, r7}
  4051f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  4051f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  4051fa:	f022 0407 	bic.w	r4, r2, #7
  4051fe:	f07f 0700 	mvns.w	r7, #0
  405202:	2300      	movs	r3, #0
  405204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  405208:	3c08      	subs	r4, #8
  40520a:	ea85 0501 	eor.w	r5, r5, r1
  40520e:	ea86 0601 	eor.w	r6, r6, r1
  405212:	fa85 f547 	uadd8	r5, r5, r7
  405216:	faa3 f587 	sel	r5, r3, r7
  40521a:	fa86 f647 	uadd8	r6, r6, r7
  40521e:	faa5 f687 	sel	r6, r5, r7
  405222:	b98e      	cbnz	r6, 405248 <memchr+0x78>
  405224:	d1ee      	bne.n	405204 <memchr+0x34>
  405226:	bcf0      	pop	{r4, r5, r6, r7}
  405228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40522c:	f002 0207 	and.w	r2, r2, #7
  405230:	b132      	cbz	r2, 405240 <memchr+0x70>
  405232:	f810 3b01 	ldrb.w	r3, [r0], #1
  405236:	3a01      	subs	r2, #1
  405238:	ea83 0301 	eor.w	r3, r3, r1
  40523c:	b113      	cbz	r3, 405244 <memchr+0x74>
  40523e:	d1f8      	bne.n	405232 <memchr+0x62>
  405240:	2000      	movs	r0, #0
  405242:	4770      	bx	lr
  405244:	3801      	subs	r0, #1
  405246:	4770      	bx	lr
  405248:	2d00      	cmp	r5, #0
  40524a:	bf06      	itte	eq
  40524c:	4635      	moveq	r5, r6
  40524e:	3803      	subeq	r0, #3
  405250:	3807      	subne	r0, #7
  405252:	f015 0f01 	tst.w	r5, #1
  405256:	d107      	bne.n	405268 <memchr+0x98>
  405258:	3001      	adds	r0, #1
  40525a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40525e:	bf02      	ittt	eq
  405260:	3001      	addeq	r0, #1
  405262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  405266:	3001      	addeq	r0, #1
  405268:	bcf0      	pop	{r4, r5, r6, r7}
  40526a:	3801      	subs	r0, #1
  40526c:	4770      	bx	lr
  40526e:	bf00      	nop

00405270 <_Balloc>:
  405270:	b570      	push	{r4, r5, r6, lr}
  405272:	6a45      	ldr	r5, [r0, #36]	; 0x24
  405274:	4604      	mov	r4, r0
  405276:	460e      	mov	r6, r1
  405278:	b93d      	cbnz	r5, 40528a <_Balloc+0x1a>
  40527a:	2010      	movs	r0, #16
  40527c:	f7ff ffa0 	bl	4051c0 <malloc>
  405280:	6260      	str	r0, [r4, #36]	; 0x24
  405282:	6045      	str	r5, [r0, #4]
  405284:	6085      	str	r5, [r0, #8]
  405286:	6005      	str	r5, [r0, #0]
  405288:	60c5      	str	r5, [r0, #12]
  40528a:	6a65      	ldr	r5, [r4, #36]	; 0x24
  40528c:	68eb      	ldr	r3, [r5, #12]
  40528e:	b183      	cbz	r3, 4052b2 <_Balloc+0x42>
  405290:	6a63      	ldr	r3, [r4, #36]	; 0x24
  405292:	68db      	ldr	r3, [r3, #12]
  405294:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
  405298:	b9b8      	cbnz	r0, 4052ca <_Balloc+0x5a>
  40529a:	2101      	movs	r1, #1
  40529c:	fa01 f506 	lsl.w	r5, r1, r6
  4052a0:	1d6a      	adds	r2, r5, #5
  4052a2:	0092      	lsls	r2, r2, #2
  4052a4:	4620      	mov	r0, r4
  4052a6:	f000 fab3 	bl	405810 <_calloc_r>
  4052aa:	b160      	cbz	r0, 4052c6 <_Balloc+0x56>
  4052ac:	6046      	str	r6, [r0, #4]
  4052ae:	6085      	str	r5, [r0, #8]
  4052b0:	e00e      	b.n	4052d0 <_Balloc+0x60>
  4052b2:	2221      	movs	r2, #33	; 0x21
  4052b4:	2104      	movs	r1, #4
  4052b6:	4620      	mov	r0, r4
  4052b8:	f000 faaa 	bl	405810 <_calloc_r>
  4052bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4052be:	60e8      	str	r0, [r5, #12]
  4052c0:	68db      	ldr	r3, [r3, #12]
  4052c2:	2b00      	cmp	r3, #0
  4052c4:	d1e4      	bne.n	405290 <_Balloc+0x20>
  4052c6:	2000      	movs	r0, #0
  4052c8:	bd70      	pop	{r4, r5, r6, pc}
  4052ca:	6802      	ldr	r2, [r0, #0]
  4052cc:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
  4052d0:	2300      	movs	r3, #0
  4052d2:	6103      	str	r3, [r0, #16]
  4052d4:	60c3      	str	r3, [r0, #12]
  4052d6:	bd70      	pop	{r4, r5, r6, pc}

004052d8 <_Bfree>:
  4052d8:	b570      	push	{r4, r5, r6, lr}
  4052da:	6a44      	ldr	r4, [r0, #36]	; 0x24
  4052dc:	4606      	mov	r6, r0
  4052de:	460d      	mov	r5, r1
  4052e0:	b93c      	cbnz	r4, 4052f2 <_Bfree+0x1a>
  4052e2:	2010      	movs	r0, #16
  4052e4:	f7ff ff6c 	bl	4051c0 <malloc>
  4052e8:	6270      	str	r0, [r6, #36]	; 0x24
  4052ea:	6044      	str	r4, [r0, #4]
  4052ec:	6084      	str	r4, [r0, #8]
  4052ee:	6004      	str	r4, [r0, #0]
  4052f0:	60c4      	str	r4, [r0, #12]
  4052f2:	b13d      	cbz	r5, 405304 <_Bfree+0x2c>
  4052f4:	6a73      	ldr	r3, [r6, #36]	; 0x24
  4052f6:	686a      	ldr	r2, [r5, #4]
  4052f8:	68db      	ldr	r3, [r3, #12]
  4052fa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  4052fe:	6029      	str	r1, [r5, #0]
  405300:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  405304:	bd70      	pop	{r4, r5, r6, pc}

00405306 <__multadd>:
  405306:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40530a:	690d      	ldr	r5, [r1, #16]
  40530c:	461f      	mov	r7, r3
  40530e:	4606      	mov	r6, r0
  405310:	460c      	mov	r4, r1
  405312:	f101 0e14 	add.w	lr, r1, #20
  405316:	2300      	movs	r3, #0
  405318:	f8de 0000 	ldr.w	r0, [lr]
  40531c:	b281      	uxth	r1, r0
  40531e:	fb02 7101 	mla	r1, r2, r1, r7
  405322:	0c0f      	lsrs	r7, r1, #16
  405324:	0c00      	lsrs	r0, r0, #16
  405326:	fb02 7000 	mla	r0, r2, r0, r7
  40532a:	b289      	uxth	r1, r1
  40532c:	3301      	adds	r3, #1
  40532e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
  405332:	429d      	cmp	r5, r3
  405334:	ea4f 4710 	mov.w	r7, r0, lsr #16
  405338:	f84e 1b04 	str.w	r1, [lr], #4
  40533c:	dcec      	bgt.n	405318 <__multadd+0x12>
  40533e:	b1d7      	cbz	r7, 405376 <__multadd+0x70>
  405340:	68a3      	ldr	r3, [r4, #8]
  405342:	429d      	cmp	r5, r3
  405344:	db12      	blt.n	40536c <__multadd+0x66>
  405346:	6861      	ldr	r1, [r4, #4]
  405348:	4630      	mov	r0, r6
  40534a:	3101      	adds	r1, #1
  40534c:	f7ff ff90 	bl	405270 <_Balloc>
  405350:	6922      	ldr	r2, [r4, #16]
  405352:	3202      	adds	r2, #2
  405354:	f104 010c 	add.w	r1, r4, #12
  405358:	4680      	mov	r8, r0
  40535a:	0092      	lsls	r2, r2, #2
  40535c:	300c      	adds	r0, #12
  40535e:	f7fe f99b 	bl	403698 <memcpy>
  405362:	4621      	mov	r1, r4
  405364:	4630      	mov	r0, r6
  405366:	f7ff ffb7 	bl	4052d8 <_Bfree>
  40536a:	4644      	mov	r4, r8
  40536c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
  405370:	3501      	adds	r5, #1
  405372:	615f      	str	r7, [r3, #20]
  405374:	6125      	str	r5, [r4, #16]
  405376:	4620      	mov	r0, r4
  405378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0040537c <__hi0bits>:
  40537c:	0c02      	lsrs	r2, r0, #16
  40537e:	0412      	lsls	r2, r2, #16
  405380:	4603      	mov	r3, r0
  405382:	b9b2      	cbnz	r2, 4053b2 <__hi0bits+0x36>
  405384:	0403      	lsls	r3, r0, #16
  405386:	2010      	movs	r0, #16
  405388:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  40538c:	bf04      	itt	eq
  40538e:	021b      	lsleq	r3, r3, #8
  405390:	3008      	addeq	r0, #8
  405392:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  405396:	bf04      	itt	eq
  405398:	011b      	lsleq	r3, r3, #4
  40539a:	3004      	addeq	r0, #4
  40539c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  4053a0:	bf04      	itt	eq
  4053a2:	009b      	lsleq	r3, r3, #2
  4053a4:	3002      	addeq	r0, #2
  4053a6:	2b00      	cmp	r3, #0
  4053a8:	db06      	blt.n	4053b8 <__hi0bits+0x3c>
  4053aa:	005b      	lsls	r3, r3, #1
  4053ac:	d503      	bpl.n	4053b6 <__hi0bits+0x3a>
  4053ae:	3001      	adds	r0, #1
  4053b0:	4770      	bx	lr
  4053b2:	2000      	movs	r0, #0
  4053b4:	e7e8      	b.n	405388 <__hi0bits+0xc>
  4053b6:	2020      	movs	r0, #32
  4053b8:	4770      	bx	lr

004053ba <__lo0bits>:
  4053ba:	6803      	ldr	r3, [r0, #0]
  4053bc:	f013 0207 	ands.w	r2, r3, #7
  4053c0:	4601      	mov	r1, r0
  4053c2:	d00b      	beq.n	4053dc <__lo0bits+0x22>
  4053c4:	07da      	lsls	r2, r3, #31
  4053c6:	d423      	bmi.n	405410 <__lo0bits+0x56>
  4053c8:	0798      	lsls	r0, r3, #30
  4053ca:	bf49      	itett	mi
  4053cc:	085b      	lsrmi	r3, r3, #1
  4053ce:	089b      	lsrpl	r3, r3, #2
  4053d0:	2001      	movmi	r0, #1
  4053d2:	600b      	strmi	r3, [r1, #0]
  4053d4:	bf5c      	itt	pl
  4053d6:	600b      	strpl	r3, [r1, #0]
  4053d8:	2002      	movpl	r0, #2
  4053da:	4770      	bx	lr
  4053dc:	b298      	uxth	r0, r3
  4053de:	b9a8      	cbnz	r0, 40540c <__lo0bits+0x52>
  4053e0:	0c1b      	lsrs	r3, r3, #16
  4053e2:	2010      	movs	r0, #16
  4053e4:	f013 0fff 	tst.w	r3, #255	; 0xff
  4053e8:	bf04      	itt	eq
  4053ea:	0a1b      	lsreq	r3, r3, #8
  4053ec:	3008      	addeq	r0, #8
  4053ee:	071a      	lsls	r2, r3, #28
  4053f0:	bf04      	itt	eq
  4053f2:	091b      	lsreq	r3, r3, #4
  4053f4:	3004      	addeq	r0, #4
  4053f6:	079a      	lsls	r2, r3, #30
  4053f8:	bf04      	itt	eq
  4053fa:	089b      	lsreq	r3, r3, #2
  4053fc:	3002      	addeq	r0, #2
  4053fe:	07da      	lsls	r2, r3, #31
  405400:	d402      	bmi.n	405408 <__lo0bits+0x4e>
  405402:	085b      	lsrs	r3, r3, #1
  405404:	d006      	beq.n	405414 <__lo0bits+0x5a>
  405406:	3001      	adds	r0, #1
  405408:	600b      	str	r3, [r1, #0]
  40540a:	4770      	bx	lr
  40540c:	4610      	mov	r0, r2
  40540e:	e7e9      	b.n	4053e4 <__lo0bits+0x2a>
  405410:	2000      	movs	r0, #0
  405412:	4770      	bx	lr
  405414:	2020      	movs	r0, #32
  405416:	4770      	bx	lr

00405418 <__i2b>:
  405418:	b510      	push	{r4, lr}
  40541a:	460c      	mov	r4, r1
  40541c:	2101      	movs	r1, #1
  40541e:	f7ff ff27 	bl	405270 <_Balloc>
  405422:	2201      	movs	r2, #1
  405424:	6144      	str	r4, [r0, #20]
  405426:	6102      	str	r2, [r0, #16]
  405428:	bd10      	pop	{r4, pc}

0040542a <__multiply>:
  40542a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40542e:	4614      	mov	r4, r2
  405430:	690a      	ldr	r2, [r1, #16]
  405432:	6923      	ldr	r3, [r4, #16]
  405434:	429a      	cmp	r2, r3
  405436:	bfb8      	it	lt
  405438:	460b      	movlt	r3, r1
  40543a:	4689      	mov	r9, r1
  40543c:	bfbc      	itt	lt
  40543e:	46a1      	movlt	r9, r4
  405440:	461c      	movlt	r4, r3
  405442:	f8d9 7010 	ldr.w	r7, [r9, #16]
  405446:	f8d4 a010 	ldr.w	sl, [r4, #16]
  40544a:	f8d9 3008 	ldr.w	r3, [r9, #8]
  40544e:	f8d9 1004 	ldr.w	r1, [r9, #4]
  405452:	eb07 060a 	add.w	r6, r7, sl
  405456:	429e      	cmp	r6, r3
  405458:	bfc8      	it	gt
  40545a:	3101      	addgt	r1, #1
  40545c:	f7ff ff08 	bl	405270 <_Balloc>
  405460:	f100 0514 	add.w	r5, r0, #20
  405464:	eb05 0886 	add.w	r8, r5, r6, lsl #2
  405468:	462b      	mov	r3, r5
  40546a:	2200      	movs	r2, #0
  40546c:	4543      	cmp	r3, r8
  40546e:	d316      	bcc.n	40549e <__multiply+0x74>
  405470:	f104 0214 	add.w	r2, r4, #20
  405474:	f109 0114 	add.w	r1, r9, #20
  405478:	eb02 038a 	add.w	r3, r2, sl, lsl #2
  40547c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
  405480:	9301      	str	r3, [sp, #4]
  405482:	9c01      	ldr	r4, [sp, #4]
  405484:	4294      	cmp	r4, r2
  405486:	4613      	mov	r3, r2
  405488:	d80c      	bhi.n	4054a4 <__multiply+0x7a>
  40548a:	2e00      	cmp	r6, #0
  40548c:	dd03      	ble.n	405496 <__multiply+0x6c>
  40548e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
  405492:	2b00      	cmp	r3, #0
  405494:	d054      	beq.n	405540 <__multiply+0x116>
  405496:	6106      	str	r6, [r0, #16]
  405498:	b003      	add	sp, #12
  40549a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40549e:	f843 2b04 	str.w	r2, [r3], #4
  4054a2:	e7e3      	b.n	40546c <__multiply+0x42>
  4054a4:	f8b3 a000 	ldrh.w	sl, [r3]
  4054a8:	3204      	adds	r2, #4
  4054aa:	f1ba 0f00 	cmp.w	sl, #0
  4054ae:	d020      	beq.n	4054f2 <__multiply+0xc8>
  4054b0:	46ae      	mov	lr, r5
  4054b2:	4689      	mov	r9, r1
  4054b4:	f04f 0c00 	mov.w	ip, #0
  4054b8:	f859 4b04 	ldr.w	r4, [r9], #4
  4054bc:	f8be b000 	ldrh.w	fp, [lr]
  4054c0:	b2a3      	uxth	r3, r4
  4054c2:	fb0a b303 	mla	r3, sl, r3, fp
  4054c6:	ea4f 4b14 	mov.w	fp, r4, lsr #16
  4054ca:	f8de 4000 	ldr.w	r4, [lr]
  4054ce:	4463      	add	r3, ip
  4054d0:	ea4f 4c14 	mov.w	ip, r4, lsr #16
  4054d4:	fb0a c40b 	mla	r4, sl, fp, ip
  4054d8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
  4054dc:	b29b      	uxth	r3, r3
  4054de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  4054e2:	454f      	cmp	r7, r9
  4054e4:	ea4f 4c14 	mov.w	ip, r4, lsr #16
  4054e8:	f84e 3b04 	str.w	r3, [lr], #4
  4054ec:	d8e4      	bhi.n	4054b8 <__multiply+0x8e>
  4054ee:	f8ce c000 	str.w	ip, [lr]
  4054f2:	f832 9c02 	ldrh.w	r9, [r2, #-2]
  4054f6:	f1b9 0f00 	cmp.w	r9, #0
  4054fa:	d01f      	beq.n	40553c <__multiply+0x112>
  4054fc:	682b      	ldr	r3, [r5, #0]
  4054fe:	46ae      	mov	lr, r5
  405500:	468c      	mov	ip, r1
  405502:	f04f 0a00 	mov.w	sl, #0
  405506:	f8bc 4000 	ldrh.w	r4, [ip]
  40550a:	f8be b002 	ldrh.w	fp, [lr, #2]
  40550e:	fb09 b404 	mla	r4, r9, r4, fp
  405512:	44a2      	add	sl, r4
  405514:	b29b      	uxth	r3, r3
  405516:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
  40551a:	f84e 3b04 	str.w	r3, [lr], #4
  40551e:	f85c 3b04 	ldr.w	r3, [ip], #4
  405522:	f8be 4000 	ldrh.w	r4, [lr]
  405526:	0c1b      	lsrs	r3, r3, #16
  405528:	fb09 4303 	mla	r3, r9, r3, r4
  40552c:	eb03 431a 	add.w	r3, r3, sl, lsr #16
  405530:	4567      	cmp	r7, ip
  405532:	ea4f 4a13 	mov.w	sl, r3, lsr #16
  405536:	d8e6      	bhi.n	405506 <__multiply+0xdc>
  405538:	f8ce 3000 	str.w	r3, [lr]
  40553c:	3504      	adds	r5, #4
  40553e:	e7a0      	b.n	405482 <__multiply+0x58>
  405540:	3e01      	subs	r6, #1
  405542:	e7a2      	b.n	40548a <__multiply+0x60>

00405544 <__pow5mult>:
  405544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  405548:	4615      	mov	r5, r2
  40554a:	f012 0203 	ands.w	r2, r2, #3
  40554e:	4606      	mov	r6, r0
  405550:	460f      	mov	r7, r1
  405552:	d007      	beq.n	405564 <__pow5mult+0x20>
  405554:	3a01      	subs	r2, #1
  405556:	4c21      	ldr	r4, [pc, #132]	; (4055dc <__pow5mult+0x98>)
  405558:	2300      	movs	r3, #0
  40555a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
  40555e:	f7ff fed2 	bl	405306 <__multadd>
  405562:	4607      	mov	r7, r0
  405564:	10ad      	asrs	r5, r5, #2
  405566:	d035      	beq.n	4055d4 <__pow5mult+0x90>
  405568:	6a74      	ldr	r4, [r6, #36]	; 0x24
  40556a:	b93c      	cbnz	r4, 40557c <__pow5mult+0x38>
  40556c:	2010      	movs	r0, #16
  40556e:	f7ff fe27 	bl	4051c0 <malloc>
  405572:	6270      	str	r0, [r6, #36]	; 0x24
  405574:	6044      	str	r4, [r0, #4]
  405576:	6084      	str	r4, [r0, #8]
  405578:	6004      	str	r4, [r0, #0]
  40557a:	60c4      	str	r4, [r0, #12]
  40557c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
  405580:	f8d8 4008 	ldr.w	r4, [r8, #8]
  405584:	b94c      	cbnz	r4, 40559a <__pow5mult+0x56>
  405586:	f240 2171 	movw	r1, #625	; 0x271
  40558a:	4630      	mov	r0, r6
  40558c:	f7ff ff44 	bl	405418 <__i2b>
  405590:	2300      	movs	r3, #0
  405592:	f8c8 0008 	str.w	r0, [r8, #8]
  405596:	4604      	mov	r4, r0
  405598:	6003      	str	r3, [r0, #0]
  40559a:	f04f 0800 	mov.w	r8, #0
  40559e:	07eb      	lsls	r3, r5, #31
  4055a0:	d50a      	bpl.n	4055b8 <__pow5mult+0x74>
  4055a2:	4639      	mov	r1, r7
  4055a4:	4622      	mov	r2, r4
  4055a6:	4630      	mov	r0, r6
  4055a8:	f7ff ff3f 	bl	40542a <__multiply>
  4055ac:	4639      	mov	r1, r7
  4055ae:	4681      	mov	r9, r0
  4055b0:	4630      	mov	r0, r6
  4055b2:	f7ff fe91 	bl	4052d8 <_Bfree>
  4055b6:	464f      	mov	r7, r9
  4055b8:	106d      	asrs	r5, r5, #1
  4055ba:	d00b      	beq.n	4055d4 <__pow5mult+0x90>
  4055bc:	6820      	ldr	r0, [r4, #0]
  4055be:	b938      	cbnz	r0, 4055d0 <__pow5mult+0x8c>
  4055c0:	4622      	mov	r2, r4
  4055c2:	4621      	mov	r1, r4
  4055c4:	4630      	mov	r0, r6
  4055c6:	f7ff ff30 	bl	40542a <__multiply>
  4055ca:	6020      	str	r0, [r4, #0]
  4055cc:	f8c0 8000 	str.w	r8, [r0]
  4055d0:	4604      	mov	r4, r0
  4055d2:	e7e4      	b.n	40559e <__pow5mult+0x5a>
  4055d4:	4638      	mov	r0, r7
  4055d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4055da:	bf00      	nop
  4055dc:	00406680 	.word	0x00406680

004055e0 <__lshift>:
  4055e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4055e4:	460c      	mov	r4, r1
  4055e6:	ea4f 1a62 	mov.w	sl, r2, asr #5
  4055ea:	6923      	ldr	r3, [r4, #16]
  4055ec:	6849      	ldr	r1, [r1, #4]
  4055ee:	eb0a 0903 	add.w	r9, sl, r3
  4055f2:	68a3      	ldr	r3, [r4, #8]
  4055f4:	4607      	mov	r7, r0
  4055f6:	4616      	mov	r6, r2
  4055f8:	f109 0501 	add.w	r5, r9, #1
  4055fc:	42ab      	cmp	r3, r5
  4055fe:	db31      	blt.n	405664 <__lshift+0x84>
  405600:	4638      	mov	r0, r7
  405602:	f7ff fe35 	bl	405270 <_Balloc>
  405606:	2200      	movs	r2, #0
  405608:	4680      	mov	r8, r0
  40560a:	f100 0314 	add.w	r3, r0, #20
  40560e:	4611      	mov	r1, r2
  405610:	4552      	cmp	r2, sl
  405612:	db2a      	blt.n	40566a <__lshift+0x8a>
  405614:	6920      	ldr	r0, [r4, #16]
  405616:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
  40561a:	f104 0114 	add.w	r1, r4, #20
  40561e:	f016 021f 	ands.w	r2, r6, #31
  405622:	eb03 038a 	add.w	r3, r3, sl, lsl #2
  405626:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
  40562a:	d022      	beq.n	405672 <__lshift+0x92>
  40562c:	f1c2 0c20 	rsb	ip, r2, #32
  405630:	2000      	movs	r0, #0
  405632:	680e      	ldr	r6, [r1, #0]
  405634:	4096      	lsls	r6, r2
  405636:	4330      	orrs	r0, r6
  405638:	f843 0b04 	str.w	r0, [r3], #4
  40563c:	f851 0b04 	ldr.w	r0, [r1], #4
  405640:	458e      	cmp	lr, r1
  405642:	fa20 f00c 	lsr.w	r0, r0, ip
  405646:	d8f4      	bhi.n	405632 <__lshift+0x52>
  405648:	6018      	str	r0, [r3, #0]
  40564a:	b108      	cbz	r0, 405650 <__lshift+0x70>
  40564c:	f109 0502 	add.w	r5, r9, #2
  405650:	3d01      	subs	r5, #1
  405652:	4638      	mov	r0, r7
  405654:	f8c8 5010 	str.w	r5, [r8, #16]
  405658:	4621      	mov	r1, r4
  40565a:	f7ff fe3d 	bl	4052d8 <_Bfree>
  40565e:	4640      	mov	r0, r8
  405660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405664:	3101      	adds	r1, #1
  405666:	005b      	lsls	r3, r3, #1
  405668:	e7c8      	b.n	4055fc <__lshift+0x1c>
  40566a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  40566e:	3201      	adds	r2, #1
  405670:	e7ce      	b.n	405610 <__lshift+0x30>
  405672:	3b04      	subs	r3, #4
  405674:	f851 2b04 	ldr.w	r2, [r1], #4
  405678:	f843 2f04 	str.w	r2, [r3, #4]!
  40567c:	458e      	cmp	lr, r1
  40567e:	d8f9      	bhi.n	405674 <__lshift+0x94>
  405680:	e7e6      	b.n	405650 <__lshift+0x70>

00405682 <__mcmp>:
  405682:	6903      	ldr	r3, [r0, #16]
  405684:	690a      	ldr	r2, [r1, #16]
  405686:	1a9b      	subs	r3, r3, r2
  405688:	b530      	push	{r4, r5, lr}
  40568a:	d10c      	bne.n	4056a6 <__mcmp+0x24>
  40568c:	0092      	lsls	r2, r2, #2
  40568e:	3014      	adds	r0, #20
  405690:	3114      	adds	r1, #20
  405692:	1884      	adds	r4, r0, r2
  405694:	4411      	add	r1, r2
  405696:	f854 5d04 	ldr.w	r5, [r4, #-4]!
  40569a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  40569e:	4295      	cmp	r5, r2
  4056a0:	d003      	beq.n	4056aa <__mcmp+0x28>
  4056a2:	d305      	bcc.n	4056b0 <__mcmp+0x2e>
  4056a4:	2301      	movs	r3, #1
  4056a6:	4618      	mov	r0, r3
  4056a8:	bd30      	pop	{r4, r5, pc}
  4056aa:	42a0      	cmp	r0, r4
  4056ac:	d3f3      	bcc.n	405696 <__mcmp+0x14>
  4056ae:	e7fa      	b.n	4056a6 <__mcmp+0x24>
  4056b0:	f04f 33ff 	mov.w	r3, #4294967295
  4056b4:	e7f7      	b.n	4056a6 <__mcmp+0x24>

004056b6 <__mdiff>:
  4056b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4056ba:	460d      	mov	r5, r1
  4056bc:	4607      	mov	r7, r0
  4056be:	4611      	mov	r1, r2
  4056c0:	4628      	mov	r0, r5
  4056c2:	4614      	mov	r4, r2
  4056c4:	f7ff ffdd 	bl	405682 <__mcmp>
  4056c8:	1e06      	subs	r6, r0, #0
  4056ca:	d108      	bne.n	4056de <__mdiff+0x28>
  4056cc:	4631      	mov	r1, r6
  4056ce:	4638      	mov	r0, r7
  4056d0:	f7ff fdce 	bl	405270 <_Balloc>
  4056d4:	2301      	movs	r3, #1
  4056d6:	6103      	str	r3, [r0, #16]
  4056d8:	6146      	str	r6, [r0, #20]
  4056da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4056de:	bfa4      	itt	ge
  4056e0:	4623      	movge	r3, r4
  4056e2:	462c      	movge	r4, r5
  4056e4:	4638      	mov	r0, r7
  4056e6:	6861      	ldr	r1, [r4, #4]
  4056e8:	bfa6      	itte	ge
  4056ea:	461d      	movge	r5, r3
  4056ec:	2600      	movge	r6, #0
  4056ee:	2601      	movlt	r6, #1
  4056f0:	f7ff fdbe 	bl	405270 <_Balloc>
  4056f4:	692b      	ldr	r3, [r5, #16]
  4056f6:	60c6      	str	r6, [r0, #12]
  4056f8:	6926      	ldr	r6, [r4, #16]
  4056fa:	f105 0914 	add.w	r9, r5, #20
  4056fe:	f104 0214 	add.w	r2, r4, #20
  405702:	eb02 0786 	add.w	r7, r2, r6, lsl #2
  405706:	eb09 0883 	add.w	r8, r9, r3, lsl #2
  40570a:	f100 0514 	add.w	r5, r0, #20
  40570e:	f04f 0c00 	mov.w	ip, #0
  405712:	f852 ab04 	ldr.w	sl, [r2], #4
  405716:	f859 4b04 	ldr.w	r4, [r9], #4
  40571a:	fa1c f18a 	uxtah	r1, ip, sl
  40571e:	b2a3      	uxth	r3, r4
  405720:	1ac9      	subs	r1, r1, r3
  405722:	0c23      	lsrs	r3, r4, #16
  405724:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
  405728:	eb03 4321 	add.w	r3, r3, r1, asr #16
  40572c:	b289      	uxth	r1, r1
  40572e:	ea4f 4c23 	mov.w	ip, r3, asr #16
  405732:	45c8      	cmp	r8, r9
  405734:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
  405738:	4696      	mov	lr, r2
  40573a:	f845 3b04 	str.w	r3, [r5], #4
  40573e:	d8e8      	bhi.n	405712 <__mdiff+0x5c>
  405740:	45be      	cmp	lr, r7
  405742:	d305      	bcc.n	405750 <__mdiff+0x9a>
  405744:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  405748:	b18b      	cbz	r3, 40576e <__mdiff+0xb8>
  40574a:	6106      	str	r6, [r0, #16]
  40574c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405750:	f85e 1b04 	ldr.w	r1, [lr], #4
  405754:	fa1c f381 	uxtah	r3, ip, r1
  405758:	141a      	asrs	r2, r3, #16
  40575a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
  40575e:	b29b      	uxth	r3, r3
  405760:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  405764:	ea4f 4c22 	mov.w	ip, r2, asr #16
  405768:	f845 3b04 	str.w	r3, [r5], #4
  40576c:	e7e8      	b.n	405740 <__mdiff+0x8a>
  40576e:	3e01      	subs	r6, #1
  405770:	e7e8      	b.n	405744 <__mdiff+0x8e>

00405772 <__d2b>:
  405772:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  405776:	2101      	movs	r1, #1
  405778:	461c      	mov	r4, r3
  40577a:	4690      	mov	r8, r2
  40577c:	9e08      	ldr	r6, [sp, #32]
  40577e:	9d09      	ldr	r5, [sp, #36]	; 0x24
  405780:	f7ff fd76 	bl	405270 <_Balloc>
  405784:	f3c4 0213 	ubfx	r2, r4, #0, #20
  405788:	f3c4 540a 	ubfx	r4, r4, #20, #11
  40578c:	4607      	mov	r7, r0
  40578e:	bb34      	cbnz	r4, 4057de <__d2b+0x6c>
  405790:	9201      	str	r2, [sp, #4]
  405792:	f1b8 0f00 	cmp.w	r8, #0
  405796:	d027      	beq.n	4057e8 <__d2b+0x76>
  405798:	a802      	add	r0, sp, #8
  40579a:	f840 8d08 	str.w	r8, [r0, #-8]!
  40579e:	f7ff fe0c 	bl	4053ba <__lo0bits>
  4057a2:	9900      	ldr	r1, [sp, #0]
  4057a4:	b1f0      	cbz	r0, 4057e4 <__d2b+0x72>
  4057a6:	9a01      	ldr	r2, [sp, #4]
  4057a8:	f1c0 0320 	rsb	r3, r0, #32
  4057ac:	fa02 f303 	lsl.w	r3, r2, r3
  4057b0:	430b      	orrs	r3, r1
  4057b2:	40c2      	lsrs	r2, r0
  4057b4:	617b      	str	r3, [r7, #20]
  4057b6:	9201      	str	r2, [sp, #4]
  4057b8:	9b01      	ldr	r3, [sp, #4]
  4057ba:	61bb      	str	r3, [r7, #24]
  4057bc:	2b00      	cmp	r3, #0
  4057be:	bf14      	ite	ne
  4057c0:	2102      	movne	r1, #2
  4057c2:	2101      	moveq	r1, #1
  4057c4:	6139      	str	r1, [r7, #16]
  4057c6:	b1c4      	cbz	r4, 4057fa <__d2b+0x88>
  4057c8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
  4057cc:	4404      	add	r4, r0
  4057ce:	6034      	str	r4, [r6, #0]
  4057d0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  4057d4:	6028      	str	r0, [r5, #0]
  4057d6:	4638      	mov	r0, r7
  4057d8:	b002      	add	sp, #8
  4057da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4057de:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  4057e2:	e7d5      	b.n	405790 <__d2b+0x1e>
  4057e4:	6179      	str	r1, [r7, #20]
  4057e6:	e7e7      	b.n	4057b8 <__d2b+0x46>
  4057e8:	a801      	add	r0, sp, #4
  4057ea:	f7ff fde6 	bl	4053ba <__lo0bits>
  4057ee:	9b01      	ldr	r3, [sp, #4]
  4057f0:	617b      	str	r3, [r7, #20]
  4057f2:	2101      	movs	r1, #1
  4057f4:	6139      	str	r1, [r7, #16]
  4057f6:	3020      	adds	r0, #32
  4057f8:	e7e5      	b.n	4057c6 <__d2b+0x54>
  4057fa:	eb07 0381 	add.w	r3, r7, r1, lsl #2
  4057fe:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  405802:	6030      	str	r0, [r6, #0]
  405804:	6918      	ldr	r0, [r3, #16]
  405806:	f7ff fdb9 	bl	40537c <__hi0bits>
  40580a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  40580e:	e7e1      	b.n	4057d4 <__d2b+0x62>

00405810 <_calloc_r>:
  405810:	b538      	push	{r3, r4, r5, lr}
  405812:	fb02 f401 	mul.w	r4, r2, r1
  405816:	4621      	mov	r1, r4
  405818:	f000 f856 	bl	4058c8 <_malloc_r>
  40581c:	4605      	mov	r5, r0
  40581e:	b118      	cbz	r0, 405828 <_calloc_r+0x18>
  405820:	4622      	mov	r2, r4
  405822:	2100      	movs	r1, #0
  405824:	f7fd ff43 	bl	4036ae <memset>
  405828:	4628      	mov	r0, r5
  40582a:	bd38      	pop	{r3, r4, r5, pc}

0040582c <_free_r>:
  40582c:	b538      	push	{r3, r4, r5, lr}
  40582e:	4605      	mov	r5, r0
  405830:	2900      	cmp	r1, #0
  405832:	d045      	beq.n	4058c0 <_free_r+0x94>
  405834:	f851 3c04 	ldr.w	r3, [r1, #-4]
  405838:	1f0c      	subs	r4, r1, #4
  40583a:	2b00      	cmp	r3, #0
  40583c:	bfb8      	it	lt
  40583e:	18e4      	addlt	r4, r4, r3
  405840:	f000 fb5a 	bl	405ef8 <__malloc_lock>
  405844:	4a1f      	ldr	r2, [pc, #124]	; (4058c4 <_free_r+0x98>)
  405846:	6813      	ldr	r3, [r2, #0]
  405848:	4610      	mov	r0, r2
  40584a:	b933      	cbnz	r3, 40585a <_free_r+0x2e>
  40584c:	6063      	str	r3, [r4, #4]
  40584e:	6014      	str	r4, [r2, #0]
  405850:	4628      	mov	r0, r5
  405852:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  405856:	f000 bb50 	b.w	405efa <__malloc_unlock>
  40585a:	42a3      	cmp	r3, r4
  40585c:	d90c      	bls.n	405878 <_free_r+0x4c>
  40585e:	6821      	ldr	r1, [r4, #0]
  405860:	1862      	adds	r2, r4, r1
  405862:	4293      	cmp	r3, r2
  405864:	bf04      	itt	eq
  405866:	681a      	ldreq	r2, [r3, #0]
  405868:	685b      	ldreq	r3, [r3, #4]
  40586a:	6063      	str	r3, [r4, #4]
  40586c:	bf04      	itt	eq
  40586e:	1852      	addeq	r2, r2, r1
  405870:	6022      	streq	r2, [r4, #0]
  405872:	6004      	str	r4, [r0, #0]
  405874:	e7ec      	b.n	405850 <_free_r+0x24>
  405876:	4613      	mov	r3, r2
  405878:	685a      	ldr	r2, [r3, #4]
  40587a:	b10a      	cbz	r2, 405880 <_free_r+0x54>
  40587c:	42a2      	cmp	r2, r4
  40587e:	d9fa      	bls.n	405876 <_free_r+0x4a>
  405880:	6819      	ldr	r1, [r3, #0]
  405882:	1858      	adds	r0, r3, r1
  405884:	42a0      	cmp	r0, r4
  405886:	d10b      	bne.n	4058a0 <_free_r+0x74>
  405888:	6820      	ldr	r0, [r4, #0]
  40588a:	4401      	add	r1, r0
  40588c:	1858      	adds	r0, r3, r1
  40588e:	4282      	cmp	r2, r0
  405890:	6019      	str	r1, [r3, #0]
  405892:	d1dd      	bne.n	405850 <_free_r+0x24>
  405894:	6810      	ldr	r0, [r2, #0]
  405896:	6852      	ldr	r2, [r2, #4]
  405898:	605a      	str	r2, [r3, #4]
  40589a:	4401      	add	r1, r0
  40589c:	6019      	str	r1, [r3, #0]
  40589e:	e7d7      	b.n	405850 <_free_r+0x24>
  4058a0:	d902      	bls.n	4058a8 <_free_r+0x7c>
  4058a2:	230c      	movs	r3, #12
  4058a4:	602b      	str	r3, [r5, #0]
  4058a6:	e7d3      	b.n	405850 <_free_r+0x24>
  4058a8:	6820      	ldr	r0, [r4, #0]
  4058aa:	1821      	adds	r1, r4, r0
  4058ac:	428a      	cmp	r2, r1
  4058ae:	bf04      	itt	eq
  4058b0:	6811      	ldreq	r1, [r2, #0]
  4058b2:	6852      	ldreq	r2, [r2, #4]
  4058b4:	6062      	str	r2, [r4, #4]
  4058b6:	bf04      	itt	eq
  4058b8:	1809      	addeq	r1, r1, r0
  4058ba:	6021      	streq	r1, [r4, #0]
  4058bc:	605c      	str	r4, [r3, #4]
  4058be:	e7c7      	b.n	405850 <_free_r+0x24>
  4058c0:	bd38      	pop	{r3, r4, r5, pc}
  4058c2:	bf00      	nop
  4058c4:	20400260 	.word	0x20400260

004058c8 <_malloc_r>:
  4058c8:	b570      	push	{r4, r5, r6, lr}
  4058ca:	1ccd      	adds	r5, r1, #3
  4058cc:	f025 0503 	bic.w	r5, r5, #3
  4058d0:	3508      	adds	r5, #8
  4058d2:	2d0c      	cmp	r5, #12
  4058d4:	bf38      	it	cc
  4058d6:	250c      	movcc	r5, #12
  4058d8:	2d00      	cmp	r5, #0
  4058da:	4606      	mov	r6, r0
  4058dc:	db01      	blt.n	4058e2 <_malloc_r+0x1a>
  4058de:	42a9      	cmp	r1, r5
  4058e0:	d903      	bls.n	4058ea <_malloc_r+0x22>
  4058e2:	230c      	movs	r3, #12
  4058e4:	6033      	str	r3, [r6, #0]
  4058e6:	2000      	movs	r0, #0
  4058e8:	bd70      	pop	{r4, r5, r6, pc}
  4058ea:	f000 fb05 	bl	405ef8 <__malloc_lock>
  4058ee:	4a23      	ldr	r2, [pc, #140]	; (40597c <_malloc_r+0xb4>)
  4058f0:	6814      	ldr	r4, [r2, #0]
  4058f2:	4621      	mov	r1, r4
  4058f4:	b991      	cbnz	r1, 40591c <_malloc_r+0x54>
  4058f6:	4c22      	ldr	r4, [pc, #136]	; (405980 <_malloc_r+0xb8>)
  4058f8:	6823      	ldr	r3, [r4, #0]
  4058fa:	b91b      	cbnz	r3, 405904 <_malloc_r+0x3c>
  4058fc:	4630      	mov	r0, r6
  4058fe:	f000 f97f 	bl	405c00 <_sbrk_r>
  405902:	6020      	str	r0, [r4, #0]
  405904:	4629      	mov	r1, r5
  405906:	4630      	mov	r0, r6
  405908:	f000 f97a 	bl	405c00 <_sbrk_r>
  40590c:	1c43      	adds	r3, r0, #1
  40590e:	d126      	bne.n	40595e <_malloc_r+0x96>
  405910:	230c      	movs	r3, #12
  405912:	6033      	str	r3, [r6, #0]
  405914:	4630      	mov	r0, r6
  405916:	f000 faf0 	bl	405efa <__malloc_unlock>
  40591a:	e7e4      	b.n	4058e6 <_malloc_r+0x1e>
  40591c:	680b      	ldr	r3, [r1, #0]
  40591e:	1b5b      	subs	r3, r3, r5
  405920:	d41a      	bmi.n	405958 <_malloc_r+0x90>
  405922:	2b0b      	cmp	r3, #11
  405924:	d90f      	bls.n	405946 <_malloc_r+0x7e>
  405926:	600b      	str	r3, [r1, #0]
  405928:	50cd      	str	r5, [r1, r3]
  40592a:	18cc      	adds	r4, r1, r3
  40592c:	4630      	mov	r0, r6
  40592e:	f000 fae4 	bl	405efa <__malloc_unlock>
  405932:	f104 000b 	add.w	r0, r4, #11
  405936:	1d23      	adds	r3, r4, #4
  405938:	f020 0007 	bic.w	r0, r0, #7
  40593c:	1ac3      	subs	r3, r0, r3
  40593e:	d01b      	beq.n	405978 <_malloc_r+0xb0>
  405940:	425a      	negs	r2, r3
  405942:	50e2      	str	r2, [r4, r3]
  405944:	bd70      	pop	{r4, r5, r6, pc}
  405946:	428c      	cmp	r4, r1
  405948:	bf0d      	iteet	eq
  40594a:	6863      	ldreq	r3, [r4, #4]
  40594c:	684b      	ldrne	r3, [r1, #4]
  40594e:	6063      	strne	r3, [r4, #4]
  405950:	6013      	streq	r3, [r2, #0]
  405952:	bf18      	it	ne
  405954:	460c      	movne	r4, r1
  405956:	e7e9      	b.n	40592c <_malloc_r+0x64>
  405958:	460c      	mov	r4, r1
  40595a:	6849      	ldr	r1, [r1, #4]
  40595c:	e7ca      	b.n	4058f4 <_malloc_r+0x2c>
  40595e:	1cc4      	adds	r4, r0, #3
  405960:	f024 0403 	bic.w	r4, r4, #3
  405964:	42a0      	cmp	r0, r4
  405966:	d005      	beq.n	405974 <_malloc_r+0xac>
  405968:	1a21      	subs	r1, r4, r0
  40596a:	4630      	mov	r0, r6
  40596c:	f000 f948 	bl	405c00 <_sbrk_r>
  405970:	3001      	adds	r0, #1
  405972:	d0cd      	beq.n	405910 <_malloc_r+0x48>
  405974:	6025      	str	r5, [r4, #0]
  405976:	e7d9      	b.n	40592c <_malloc_r+0x64>
  405978:	bd70      	pop	{r4, r5, r6, pc}
  40597a:	bf00      	nop
  40597c:	20400260 	.word	0x20400260
  405980:	20400264 	.word	0x20400264

00405984 <__sfputc_r>:
  405984:	6893      	ldr	r3, [r2, #8]
  405986:	3b01      	subs	r3, #1
  405988:	2b00      	cmp	r3, #0
  40598a:	b410      	push	{r4}
  40598c:	6093      	str	r3, [r2, #8]
  40598e:	da08      	bge.n	4059a2 <__sfputc_r+0x1e>
  405990:	6994      	ldr	r4, [r2, #24]
  405992:	42a3      	cmp	r3, r4
  405994:	db02      	blt.n	40599c <__sfputc_r+0x18>
  405996:	b2cb      	uxtb	r3, r1
  405998:	2b0a      	cmp	r3, #10
  40599a:	d102      	bne.n	4059a2 <__sfputc_r+0x1e>
  40599c:	bc10      	pop	{r4}
  40599e:	f000 b983 	b.w	405ca8 <__swbuf_r>
  4059a2:	6813      	ldr	r3, [r2, #0]
  4059a4:	1c58      	adds	r0, r3, #1
  4059a6:	6010      	str	r0, [r2, #0]
  4059a8:	7019      	strb	r1, [r3, #0]
  4059aa:	b2c8      	uxtb	r0, r1
  4059ac:	bc10      	pop	{r4}
  4059ae:	4770      	bx	lr

004059b0 <__sfputs_r>:
  4059b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4059b2:	4606      	mov	r6, r0
  4059b4:	460f      	mov	r7, r1
  4059b6:	4614      	mov	r4, r2
  4059b8:	18d5      	adds	r5, r2, r3
  4059ba:	42ac      	cmp	r4, r5
  4059bc:	d101      	bne.n	4059c2 <__sfputs_r+0x12>
  4059be:	2000      	movs	r0, #0
  4059c0:	e007      	b.n	4059d2 <__sfputs_r+0x22>
  4059c2:	463a      	mov	r2, r7
  4059c4:	f814 1b01 	ldrb.w	r1, [r4], #1
  4059c8:	4630      	mov	r0, r6
  4059ca:	f7ff ffdb 	bl	405984 <__sfputc_r>
  4059ce:	1c43      	adds	r3, r0, #1
  4059d0:	d1f3      	bne.n	4059ba <__sfputs_r+0xa>
  4059d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

004059d4 <_vfiprintf_r>:
  4059d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4059d8:	b09d      	sub	sp, #116	; 0x74
  4059da:	460c      	mov	r4, r1
  4059dc:	4617      	mov	r7, r2
  4059de:	9303      	str	r3, [sp, #12]
  4059e0:	4606      	mov	r6, r0
  4059e2:	b118      	cbz	r0, 4059ec <_vfiprintf_r+0x18>
  4059e4:	6983      	ldr	r3, [r0, #24]
  4059e6:	b90b      	cbnz	r3, 4059ec <_vfiprintf_r+0x18>
  4059e8:	f7ff faee 	bl	404fc8 <__sinit>
  4059ec:	4b7c      	ldr	r3, [pc, #496]	; (405be0 <_vfiprintf_r+0x20c>)
  4059ee:	429c      	cmp	r4, r3
  4059f0:	d157      	bne.n	405aa2 <_vfiprintf_r+0xce>
  4059f2:	6874      	ldr	r4, [r6, #4]
  4059f4:	89a3      	ldrh	r3, [r4, #12]
  4059f6:	0718      	lsls	r0, r3, #28
  4059f8:	d55d      	bpl.n	405ab6 <_vfiprintf_r+0xe2>
  4059fa:	6923      	ldr	r3, [r4, #16]
  4059fc:	2b00      	cmp	r3, #0
  4059fe:	d05a      	beq.n	405ab6 <_vfiprintf_r+0xe2>
  405a00:	2300      	movs	r3, #0
  405a02:	9309      	str	r3, [sp, #36]	; 0x24
  405a04:	2320      	movs	r3, #32
  405a06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
  405a0a:	2330      	movs	r3, #48	; 0x30
  405a0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
  405a10:	f04f 0b01 	mov.w	fp, #1
  405a14:	46b8      	mov	r8, r7
  405a16:	4645      	mov	r5, r8
  405a18:	f815 3b01 	ldrb.w	r3, [r5], #1
  405a1c:	2b00      	cmp	r3, #0
  405a1e:	d155      	bne.n	405acc <_vfiprintf_r+0xf8>
  405a20:	ebb8 0a07 	subs.w	sl, r8, r7
  405a24:	d00b      	beq.n	405a3e <_vfiprintf_r+0x6a>
  405a26:	4653      	mov	r3, sl
  405a28:	463a      	mov	r2, r7
  405a2a:	4621      	mov	r1, r4
  405a2c:	4630      	mov	r0, r6
  405a2e:	f7ff ffbf 	bl	4059b0 <__sfputs_r>
  405a32:	3001      	adds	r0, #1
  405a34:	f000 80c4 	beq.w	405bc0 <_vfiprintf_r+0x1ec>
  405a38:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405a3a:	4453      	add	r3, sl
  405a3c:	9309      	str	r3, [sp, #36]	; 0x24
  405a3e:	f898 3000 	ldrb.w	r3, [r8]
  405a42:	2b00      	cmp	r3, #0
  405a44:	f000 80bc 	beq.w	405bc0 <_vfiprintf_r+0x1ec>
  405a48:	2300      	movs	r3, #0
  405a4a:	f04f 32ff 	mov.w	r2, #4294967295
  405a4e:	9304      	str	r3, [sp, #16]
  405a50:	9307      	str	r3, [sp, #28]
  405a52:	9205      	str	r2, [sp, #20]
  405a54:	9306      	str	r3, [sp, #24]
  405a56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
  405a5a:	931a      	str	r3, [sp, #104]	; 0x68
  405a5c:	2205      	movs	r2, #5
  405a5e:	7829      	ldrb	r1, [r5, #0]
  405a60:	4860      	ldr	r0, [pc, #384]	; (405be4 <_vfiprintf_r+0x210>)
  405a62:	f7ff fbb5 	bl	4051d0 <memchr>
  405a66:	f105 0801 	add.w	r8, r5, #1
  405a6a:	9b04      	ldr	r3, [sp, #16]
  405a6c:	2800      	cmp	r0, #0
  405a6e:	d131      	bne.n	405ad4 <_vfiprintf_r+0x100>
  405a70:	06d9      	lsls	r1, r3, #27
  405a72:	bf44      	itt	mi
  405a74:	2220      	movmi	r2, #32
  405a76:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  405a7a:	071a      	lsls	r2, r3, #28
  405a7c:	bf44      	itt	mi
  405a7e:	222b      	movmi	r2, #43	; 0x2b
  405a80:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  405a84:	782a      	ldrb	r2, [r5, #0]
  405a86:	2a2a      	cmp	r2, #42	; 0x2a
  405a88:	d02c      	beq.n	405ae4 <_vfiprintf_r+0x110>
  405a8a:	9a07      	ldr	r2, [sp, #28]
  405a8c:	2100      	movs	r1, #0
  405a8e:	200a      	movs	r0, #10
  405a90:	46a8      	mov	r8, r5
  405a92:	3501      	adds	r5, #1
  405a94:	f898 3000 	ldrb.w	r3, [r8]
  405a98:	3b30      	subs	r3, #48	; 0x30
  405a9a:	2b09      	cmp	r3, #9
  405a9c:	d96d      	bls.n	405b7a <_vfiprintf_r+0x1a6>
  405a9e:	b371      	cbz	r1, 405afe <_vfiprintf_r+0x12a>
  405aa0:	e026      	b.n	405af0 <_vfiprintf_r+0x11c>
  405aa2:	4b51      	ldr	r3, [pc, #324]	; (405be8 <_vfiprintf_r+0x214>)
  405aa4:	429c      	cmp	r4, r3
  405aa6:	d101      	bne.n	405aac <_vfiprintf_r+0xd8>
  405aa8:	68b4      	ldr	r4, [r6, #8]
  405aaa:	e7a3      	b.n	4059f4 <_vfiprintf_r+0x20>
  405aac:	4b4f      	ldr	r3, [pc, #316]	; (405bec <_vfiprintf_r+0x218>)
  405aae:	429c      	cmp	r4, r3
  405ab0:	bf08      	it	eq
  405ab2:	68f4      	ldreq	r4, [r6, #12]
  405ab4:	e79e      	b.n	4059f4 <_vfiprintf_r+0x20>
  405ab6:	4621      	mov	r1, r4
  405ab8:	4630      	mov	r0, r6
  405aba:	f000 f959 	bl	405d70 <__swsetup_r>
  405abe:	2800      	cmp	r0, #0
  405ac0:	d09e      	beq.n	405a00 <_vfiprintf_r+0x2c>
  405ac2:	f04f 30ff 	mov.w	r0, #4294967295
  405ac6:	b01d      	add	sp, #116	; 0x74
  405ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405acc:	2b25      	cmp	r3, #37	; 0x25
  405ace:	d0a7      	beq.n	405a20 <_vfiprintf_r+0x4c>
  405ad0:	46a8      	mov	r8, r5
  405ad2:	e7a0      	b.n	405a16 <_vfiprintf_r+0x42>
  405ad4:	4a43      	ldr	r2, [pc, #268]	; (405be4 <_vfiprintf_r+0x210>)
  405ad6:	1a80      	subs	r0, r0, r2
  405ad8:	fa0b f000 	lsl.w	r0, fp, r0
  405adc:	4318      	orrs	r0, r3
  405ade:	9004      	str	r0, [sp, #16]
  405ae0:	4645      	mov	r5, r8
  405ae2:	e7bb      	b.n	405a5c <_vfiprintf_r+0x88>
  405ae4:	9a03      	ldr	r2, [sp, #12]
  405ae6:	1d11      	adds	r1, r2, #4
  405ae8:	6812      	ldr	r2, [r2, #0]
  405aea:	9103      	str	r1, [sp, #12]
  405aec:	2a00      	cmp	r2, #0
  405aee:	db01      	blt.n	405af4 <_vfiprintf_r+0x120>
  405af0:	9207      	str	r2, [sp, #28]
  405af2:	e004      	b.n	405afe <_vfiprintf_r+0x12a>
  405af4:	4252      	negs	r2, r2
  405af6:	f043 0302 	orr.w	r3, r3, #2
  405afa:	9207      	str	r2, [sp, #28]
  405afc:	9304      	str	r3, [sp, #16]
  405afe:	f898 3000 	ldrb.w	r3, [r8]
  405b02:	2b2e      	cmp	r3, #46	; 0x2e
  405b04:	d110      	bne.n	405b28 <_vfiprintf_r+0x154>
  405b06:	f898 3001 	ldrb.w	r3, [r8, #1]
  405b0a:	2b2a      	cmp	r3, #42	; 0x2a
  405b0c:	f108 0101 	add.w	r1, r8, #1
  405b10:	d137      	bne.n	405b82 <_vfiprintf_r+0x1ae>
  405b12:	9b03      	ldr	r3, [sp, #12]
  405b14:	1d1a      	adds	r2, r3, #4
  405b16:	681b      	ldr	r3, [r3, #0]
  405b18:	9203      	str	r2, [sp, #12]
  405b1a:	2b00      	cmp	r3, #0
  405b1c:	bfb8      	it	lt
  405b1e:	f04f 33ff 	movlt.w	r3, #4294967295
  405b22:	f108 0802 	add.w	r8, r8, #2
  405b26:	9305      	str	r3, [sp, #20]
  405b28:	4d31      	ldr	r5, [pc, #196]	; (405bf0 <_vfiprintf_r+0x21c>)
  405b2a:	f898 1000 	ldrb.w	r1, [r8]
  405b2e:	2203      	movs	r2, #3
  405b30:	4628      	mov	r0, r5
  405b32:	f7ff fb4d 	bl	4051d0 <memchr>
  405b36:	b140      	cbz	r0, 405b4a <_vfiprintf_r+0x176>
  405b38:	2340      	movs	r3, #64	; 0x40
  405b3a:	1b40      	subs	r0, r0, r5
  405b3c:	fa03 f000 	lsl.w	r0, r3, r0
  405b40:	9b04      	ldr	r3, [sp, #16]
  405b42:	4303      	orrs	r3, r0
  405b44:	9304      	str	r3, [sp, #16]
  405b46:	f108 0801 	add.w	r8, r8, #1
  405b4a:	f898 1000 	ldrb.w	r1, [r8]
  405b4e:	4829      	ldr	r0, [pc, #164]	; (405bf4 <_vfiprintf_r+0x220>)
  405b50:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
  405b54:	2206      	movs	r2, #6
  405b56:	f108 0701 	add.w	r7, r8, #1
  405b5a:	f7ff fb39 	bl	4051d0 <memchr>
  405b5e:	2800      	cmp	r0, #0
  405b60:	d034      	beq.n	405bcc <_vfiprintf_r+0x1f8>
  405b62:	4b25      	ldr	r3, [pc, #148]	; (405bf8 <_vfiprintf_r+0x224>)
  405b64:	bb03      	cbnz	r3, 405ba8 <_vfiprintf_r+0x1d4>
  405b66:	9b03      	ldr	r3, [sp, #12]
  405b68:	3307      	adds	r3, #7
  405b6a:	f023 0307 	bic.w	r3, r3, #7
  405b6e:	3308      	adds	r3, #8
  405b70:	9303      	str	r3, [sp, #12]
  405b72:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405b74:	444b      	add	r3, r9
  405b76:	9309      	str	r3, [sp, #36]	; 0x24
  405b78:	e74c      	b.n	405a14 <_vfiprintf_r+0x40>
  405b7a:	fb00 3202 	mla	r2, r0, r2, r3
  405b7e:	2101      	movs	r1, #1
  405b80:	e786      	b.n	405a90 <_vfiprintf_r+0xbc>
  405b82:	2300      	movs	r3, #0
  405b84:	9305      	str	r3, [sp, #20]
  405b86:	4618      	mov	r0, r3
  405b88:	250a      	movs	r5, #10
  405b8a:	4688      	mov	r8, r1
  405b8c:	3101      	adds	r1, #1
  405b8e:	f898 2000 	ldrb.w	r2, [r8]
  405b92:	3a30      	subs	r2, #48	; 0x30
  405b94:	2a09      	cmp	r2, #9
  405b96:	d903      	bls.n	405ba0 <_vfiprintf_r+0x1cc>
  405b98:	2b00      	cmp	r3, #0
  405b9a:	d0c5      	beq.n	405b28 <_vfiprintf_r+0x154>
  405b9c:	9005      	str	r0, [sp, #20]
  405b9e:	e7c3      	b.n	405b28 <_vfiprintf_r+0x154>
  405ba0:	fb05 2000 	mla	r0, r5, r0, r2
  405ba4:	2301      	movs	r3, #1
  405ba6:	e7f0      	b.n	405b8a <_vfiprintf_r+0x1b6>
  405ba8:	ab03      	add	r3, sp, #12
  405baa:	9300      	str	r3, [sp, #0]
  405bac:	4622      	mov	r2, r4
  405bae:	4b13      	ldr	r3, [pc, #76]	; (405bfc <_vfiprintf_r+0x228>)
  405bb0:	a904      	add	r1, sp, #16
  405bb2:	4630      	mov	r0, r6
  405bb4:	f7fd fe14 	bl	4037e0 <_printf_float>
  405bb8:	f1b0 3fff 	cmp.w	r0, #4294967295
  405bbc:	4681      	mov	r9, r0
  405bbe:	d1d8      	bne.n	405b72 <_vfiprintf_r+0x19e>
  405bc0:	89a3      	ldrh	r3, [r4, #12]
  405bc2:	065b      	lsls	r3, r3, #25
  405bc4:	f53f af7d 	bmi.w	405ac2 <_vfiprintf_r+0xee>
  405bc8:	9809      	ldr	r0, [sp, #36]	; 0x24
  405bca:	e77c      	b.n	405ac6 <_vfiprintf_r+0xf2>
  405bcc:	ab03      	add	r3, sp, #12
  405bce:	9300      	str	r3, [sp, #0]
  405bd0:	4622      	mov	r2, r4
  405bd2:	4b0a      	ldr	r3, [pc, #40]	; (405bfc <_vfiprintf_r+0x228>)
  405bd4:	a904      	add	r1, sp, #16
  405bd6:	4630      	mov	r0, r6
  405bd8:	f7fe f8b0 	bl	403d3c <_printf_i>
  405bdc:	e7ec      	b.n	405bb8 <_vfiprintf_r+0x1e4>
  405bde:	bf00      	nop
  405be0:	00406550 	.word	0x00406550
  405be4:	0040668c 	.word	0x0040668c
  405be8:	00406570 	.word	0x00406570
  405bec:	00406530 	.word	0x00406530
  405bf0:	00406692 	.word	0x00406692
  405bf4:	00406696 	.word	0x00406696
  405bf8:	004037e1 	.word	0x004037e1
  405bfc:	004059b1 	.word	0x004059b1

00405c00 <_sbrk_r>:
  405c00:	b538      	push	{r3, r4, r5, lr}
  405c02:	4c06      	ldr	r4, [pc, #24]	; (405c1c <_sbrk_r+0x1c>)
  405c04:	2300      	movs	r3, #0
  405c06:	4605      	mov	r5, r0
  405c08:	4608      	mov	r0, r1
  405c0a:	6023      	str	r3, [r4, #0]
  405c0c:	f7fb f8ae 	bl	400d6c <_sbrk>
  405c10:	1c43      	adds	r3, r0, #1
  405c12:	d102      	bne.n	405c1a <_sbrk_r+0x1a>
  405c14:	6823      	ldr	r3, [r4, #0]
  405c16:	b103      	cbz	r3, 405c1a <_sbrk_r+0x1a>
  405c18:	602b      	str	r3, [r5, #0]
  405c1a:	bd38      	pop	{r3, r4, r5, pc}
  405c1c:	204002dc 	.word	0x204002dc

00405c20 <__sread>:
  405c20:	b510      	push	{r4, lr}
  405c22:	460c      	mov	r4, r1
  405c24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405c28:	f000 f968 	bl	405efc <_read_r>
  405c2c:	2800      	cmp	r0, #0
  405c2e:	bfab      	itete	ge
  405c30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
  405c32:	89a3      	ldrhlt	r3, [r4, #12]
  405c34:	181b      	addge	r3, r3, r0
  405c36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
  405c3a:	bfac      	ite	ge
  405c3c:	6563      	strge	r3, [r4, #84]	; 0x54
  405c3e:	81a3      	strhlt	r3, [r4, #12]
  405c40:	bd10      	pop	{r4, pc}

00405c42 <__swrite>:
  405c42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405c46:	461f      	mov	r7, r3
  405c48:	898b      	ldrh	r3, [r1, #12]
  405c4a:	05db      	lsls	r3, r3, #23
  405c4c:	4605      	mov	r5, r0
  405c4e:	460c      	mov	r4, r1
  405c50:	4616      	mov	r6, r2
  405c52:	d505      	bpl.n	405c60 <__swrite+0x1e>
  405c54:	2302      	movs	r3, #2
  405c56:	2200      	movs	r2, #0
  405c58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405c5c:	f000 f928 	bl	405eb0 <_lseek_r>
  405c60:	89a3      	ldrh	r3, [r4, #12]
  405c62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  405c66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  405c6a:	81a3      	strh	r3, [r4, #12]
  405c6c:	4632      	mov	r2, r6
  405c6e:	463b      	mov	r3, r7
  405c70:	4628      	mov	r0, r5
  405c72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405c76:	f000 b869 	b.w	405d4c <_write_r>

00405c7a <__sseek>:
  405c7a:	b510      	push	{r4, lr}
  405c7c:	460c      	mov	r4, r1
  405c7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405c82:	f000 f915 	bl	405eb0 <_lseek_r>
  405c86:	1c43      	adds	r3, r0, #1
  405c88:	89a3      	ldrh	r3, [r4, #12]
  405c8a:	bf15      	itete	ne
  405c8c:	6560      	strne	r0, [r4, #84]	; 0x54
  405c8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  405c92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  405c96:	81a3      	strheq	r3, [r4, #12]
  405c98:	bf18      	it	ne
  405c9a:	81a3      	strhne	r3, [r4, #12]
  405c9c:	bd10      	pop	{r4, pc}

00405c9e <__sclose>:
  405c9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405ca2:	f000 b8d3 	b.w	405e4c <_close_r>
	...

00405ca8 <__swbuf_r>:
  405ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405caa:	460e      	mov	r6, r1
  405cac:	4614      	mov	r4, r2
  405cae:	4605      	mov	r5, r0
  405cb0:	b118      	cbz	r0, 405cba <__swbuf_r+0x12>
  405cb2:	6983      	ldr	r3, [r0, #24]
  405cb4:	b90b      	cbnz	r3, 405cba <__swbuf_r+0x12>
  405cb6:	f7ff f987 	bl	404fc8 <__sinit>
  405cba:	4b21      	ldr	r3, [pc, #132]	; (405d40 <__swbuf_r+0x98>)
  405cbc:	429c      	cmp	r4, r3
  405cbe:	d12a      	bne.n	405d16 <__swbuf_r+0x6e>
  405cc0:	686c      	ldr	r4, [r5, #4]
  405cc2:	69a3      	ldr	r3, [r4, #24]
  405cc4:	60a3      	str	r3, [r4, #8]
  405cc6:	89a3      	ldrh	r3, [r4, #12]
  405cc8:	071a      	lsls	r2, r3, #28
  405cca:	d52e      	bpl.n	405d2a <__swbuf_r+0x82>
  405ccc:	6923      	ldr	r3, [r4, #16]
  405cce:	b363      	cbz	r3, 405d2a <__swbuf_r+0x82>
  405cd0:	6923      	ldr	r3, [r4, #16]
  405cd2:	6820      	ldr	r0, [r4, #0]
  405cd4:	1ac0      	subs	r0, r0, r3
  405cd6:	6963      	ldr	r3, [r4, #20]
  405cd8:	b2f6      	uxtb	r6, r6
  405cda:	4298      	cmp	r0, r3
  405cdc:	4637      	mov	r7, r6
  405cde:	db04      	blt.n	405cea <__swbuf_r+0x42>
  405ce0:	4621      	mov	r1, r4
  405ce2:	4628      	mov	r0, r5
  405ce4:	f7ff f906 	bl	404ef4 <_fflush_r>
  405ce8:	bb28      	cbnz	r0, 405d36 <__swbuf_r+0x8e>
  405cea:	68a3      	ldr	r3, [r4, #8]
  405cec:	3b01      	subs	r3, #1
  405cee:	60a3      	str	r3, [r4, #8]
  405cf0:	6823      	ldr	r3, [r4, #0]
  405cf2:	1c5a      	adds	r2, r3, #1
  405cf4:	6022      	str	r2, [r4, #0]
  405cf6:	701e      	strb	r6, [r3, #0]
  405cf8:	6963      	ldr	r3, [r4, #20]
  405cfa:	3001      	adds	r0, #1
  405cfc:	4298      	cmp	r0, r3
  405cfe:	d004      	beq.n	405d0a <__swbuf_r+0x62>
  405d00:	89a3      	ldrh	r3, [r4, #12]
  405d02:	07db      	lsls	r3, r3, #31
  405d04:	d519      	bpl.n	405d3a <__swbuf_r+0x92>
  405d06:	2e0a      	cmp	r6, #10
  405d08:	d117      	bne.n	405d3a <__swbuf_r+0x92>
  405d0a:	4621      	mov	r1, r4
  405d0c:	4628      	mov	r0, r5
  405d0e:	f7ff f8f1 	bl	404ef4 <_fflush_r>
  405d12:	b190      	cbz	r0, 405d3a <__swbuf_r+0x92>
  405d14:	e00f      	b.n	405d36 <__swbuf_r+0x8e>
  405d16:	4b0b      	ldr	r3, [pc, #44]	; (405d44 <__swbuf_r+0x9c>)
  405d18:	429c      	cmp	r4, r3
  405d1a:	d101      	bne.n	405d20 <__swbuf_r+0x78>
  405d1c:	68ac      	ldr	r4, [r5, #8]
  405d1e:	e7d0      	b.n	405cc2 <__swbuf_r+0x1a>
  405d20:	4b09      	ldr	r3, [pc, #36]	; (405d48 <__swbuf_r+0xa0>)
  405d22:	429c      	cmp	r4, r3
  405d24:	bf08      	it	eq
  405d26:	68ec      	ldreq	r4, [r5, #12]
  405d28:	e7cb      	b.n	405cc2 <__swbuf_r+0x1a>
  405d2a:	4621      	mov	r1, r4
  405d2c:	4628      	mov	r0, r5
  405d2e:	f000 f81f 	bl	405d70 <__swsetup_r>
  405d32:	2800      	cmp	r0, #0
  405d34:	d0cc      	beq.n	405cd0 <__swbuf_r+0x28>
  405d36:	f04f 37ff 	mov.w	r7, #4294967295
  405d3a:	4638      	mov	r0, r7
  405d3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405d3e:	bf00      	nop
  405d40:	00406550 	.word	0x00406550
  405d44:	00406570 	.word	0x00406570
  405d48:	00406530 	.word	0x00406530

00405d4c <_write_r>:
  405d4c:	b538      	push	{r3, r4, r5, lr}
  405d4e:	4c07      	ldr	r4, [pc, #28]	; (405d6c <_write_r+0x20>)
  405d50:	4605      	mov	r5, r0
  405d52:	4608      	mov	r0, r1
  405d54:	4611      	mov	r1, r2
  405d56:	2200      	movs	r2, #0
  405d58:	6022      	str	r2, [r4, #0]
  405d5a:	461a      	mov	r2, r3
  405d5c:	f7fb fdac 	bl	4018b8 <_write>
  405d60:	1c43      	adds	r3, r0, #1
  405d62:	d102      	bne.n	405d6a <_write_r+0x1e>
  405d64:	6823      	ldr	r3, [r4, #0]
  405d66:	b103      	cbz	r3, 405d6a <_write_r+0x1e>
  405d68:	602b      	str	r3, [r5, #0]
  405d6a:	bd38      	pop	{r3, r4, r5, pc}
  405d6c:	204002dc 	.word	0x204002dc

00405d70 <__swsetup_r>:
  405d70:	4b32      	ldr	r3, [pc, #200]	; (405e3c <__swsetup_r+0xcc>)
  405d72:	b570      	push	{r4, r5, r6, lr}
  405d74:	681d      	ldr	r5, [r3, #0]
  405d76:	4606      	mov	r6, r0
  405d78:	460c      	mov	r4, r1
  405d7a:	b125      	cbz	r5, 405d86 <__swsetup_r+0x16>
  405d7c:	69ab      	ldr	r3, [r5, #24]
  405d7e:	b913      	cbnz	r3, 405d86 <__swsetup_r+0x16>
  405d80:	4628      	mov	r0, r5
  405d82:	f7ff f921 	bl	404fc8 <__sinit>
  405d86:	4b2e      	ldr	r3, [pc, #184]	; (405e40 <__swsetup_r+0xd0>)
  405d88:	429c      	cmp	r4, r3
  405d8a:	d10f      	bne.n	405dac <__swsetup_r+0x3c>
  405d8c:	686c      	ldr	r4, [r5, #4]
  405d8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405d92:	b29a      	uxth	r2, r3
  405d94:	0715      	lsls	r5, r2, #28
  405d96:	d42c      	bmi.n	405df2 <__swsetup_r+0x82>
  405d98:	06d0      	lsls	r0, r2, #27
  405d9a:	d411      	bmi.n	405dc0 <__swsetup_r+0x50>
  405d9c:	2209      	movs	r2, #9
  405d9e:	6032      	str	r2, [r6, #0]
  405da0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405da4:	81a3      	strh	r3, [r4, #12]
  405da6:	f04f 30ff 	mov.w	r0, #4294967295
  405daa:	bd70      	pop	{r4, r5, r6, pc}
  405dac:	4b25      	ldr	r3, [pc, #148]	; (405e44 <__swsetup_r+0xd4>)
  405dae:	429c      	cmp	r4, r3
  405db0:	d101      	bne.n	405db6 <__swsetup_r+0x46>
  405db2:	68ac      	ldr	r4, [r5, #8]
  405db4:	e7eb      	b.n	405d8e <__swsetup_r+0x1e>
  405db6:	4b24      	ldr	r3, [pc, #144]	; (405e48 <__swsetup_r+0xd8>)
  405db8:	429c      	cmp	r4, r3
  405dba:	bf08      	it	eq
  405dbc:	68ec      	ldreq	r4, [r5, #12]
  405dbe:	e7e6      	b.n	405d8e <__swsetup_r+0x1e>
  405dc0:	0751      	lsls	r1, r2, #29
  405dc2:	d512      	bpl.n	405dea <__swsetup_r+0x7a>
  405dc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
  405dc6:	b141      	cbz	r1, 405dda <__swsetup_r+0x6a>
  405dc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
  405dcc:	4299      	cmp	r1, r3
  405dce:	d002      	beq.n	405dd6 <__swsetup_r+0x66>
  405dd0:	4630      	mov	r0, r6
  405dd2:	f7ff fd2b 	bl	40582c <_free_r>
  405dd6:	2300      	movs	r3, #0
  405dd8:	6363      	str	r3, [r4, #52]	; 0x34
  405dda:	89a3      	ldrh	r3, [r4, #12]
  405ddc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
  405de0:	81a3      	strh	r3, [r4, #12]
  405de2:	2300      	movs	r3, #0
  405de4:	6063      	str	r3, [r4, #4]
  405de6:	6923      	ldr	r3, [r4, #16]
  405de8:	6023      	str	r3, [r4, #0]
  405dea:	89a3      	ldrh	r3, [r4, #12]
  405dec:	f043 0308 	orr.w	r3, r3, #8
  405df0:	81a3      	strh	r3, [r4, #12]
  405df2:	6923      	ldr	r3, [r4, #16]
  405df4:	b94b      	cbnz	r3, 405e0a <__swsetup_r+0x9a>
  405df6:	89a3      	ldrh	r3, [r4, #12]
  405df8:	f403 7320 	and.w	r3, r3, #640	; 0x280
  405dfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405e00:	d003      	beq.n	405e0a <__swsetup_r+0x9a>
  405e02:	4621      	mov	r1, r4
  405e04:	4630      	mov	r0, r6
  405e06:	f7ff f99b 	bl	405140 <__smakebuf_r>
  405e0a:	89a2      	ldrh	r2, [r4, #12]
  405e0c:	f012 0301 	ands.w	r3, r2, #1
  405e10:	d00c      	beq.n	405e2c <__swsetup_r+0xbc>
  405e12:	2300      	movs	r3, #0
  405e14:	60a3      	str	r3, [r4, #8]
  405e16:	6963      	ldr	r3, [r4, #20]
  405e18:	425b      	negs	r3, r3
  405e1a:	61a3      	str	r3, [r4, #24]
  405e1c:	6923      	ldr	r3, [r4, #16]
  405e1e:	b953      	cbnz	r3, 405e36 <__swsetup_r+0xc6>
  405e20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405e24:	f013 0080 	ands.w	r0, r3, #128	; 0x80
  405e28:	d1ba      	bne.n	405da0 <__swsetup_r+0x30>
  405e2a:	bd70      	pop	{r4, r5, r6, pc}
  405e2c:	0792      	lsls	r2, r2, #30
  405e2e:	bf58      	it	pl
  405e30:	6963      	ldrpl	r3, [r4, #20]
  405e32:	60a3      	str	r3, [r4, #8]
  405e34:	e7f2      	b.n	405e1c <__swsetup_r+0xac>
  405e36:	2000      	movs	r0, #0
  405e38:	e7f7      	b.n	405e2a <__swsetup_r+0xba>
  405e3a:	bf00      	nop
  405e3c:	20400000 	.word	0x20400000
  405e40:	00406550 	.word	0x00406550
  405e44:	00406570 	.word	0x00406570
  405e48:	00406530 	.word	0x00406530

00405e4c <_close_r>:
  405e4c:	b538      	push	{r3, r4, r5, lr}
  405e4e:	4c06      	ldr	r4, [pc, #24]	; (405e68 <_close_r+0x1c>)
  405e50:	2300      	movs	r3, #0
  405e52:	4605      	mov	r5, r0
  405e54:	4608      	mov	r0, r1
  405e56:	6023      	str	r3, [r4, #0]
  405e58:	f7fa ff9a 	bl	400d90 <_close>
  405e5c:	1c43      	adds	r3, r0, #1
  405e5e:	d102      	bne.n	405e66 <_close_r+0x1a>
  405e60:	6823      	ldr	r3, [r4, #0]
  405e62:	b103      	cbz	r3, 405e66 <_close_r+0x1a>
  405e64:	602b      	str	r3, [r5, #0]
  405e66:	bd38      	pop	{r3, r4, r5, pc}
  405e68:	204002dc 	.word	0x204002dc

00405e6c <_fstat_r>:
  405e6c:	b538      	push	{r3, r4, r5, lr}
  405e6e:	4c07      	ldr	r4, [pc, #28]	; (405e8c <_fstat_r+0x20>)
  405e70:	2300      	movs	r3, #0
  405e72:	4605      	mov	r5, r0
  405e74:	4608      	mov	r0, r1
  405e76:	4611      	mov	r1, r2
  405e78:	6023      	str	r3, [r4, #0]
  405e7a:	f7fa ff8c 	bl	400d96 <_fstat>
  405e7e:	1c43      	adds	r3, r0, #1
  405e80:	d102      	bne.n	405e88 <_fstat_r+0x1c>
  405e82:	6823      	ldr	r3, [r4, #0]
  405e84:	b103      	cbz	r3, 405e88 <_fstat_r+0x1c>
  405e86:	602b      	str	r3, [r5, #0]
  405e88:	bd38      	pop	{r3, r4, r5, pc}
  405e8a:	bf00      	nop
  405e8c:	204002dc 	.word	0x204002dc

00405e90 <_isatty_r>:
  405e90:	b538      	push	{r3, r4, r5, lr}
  405e92:	4c06      	ldr	r4, [pc, #24]	; (405eac <_isatty_r+0x1c>)
  405e94:	2300      	movs	r3, #0
  405e96:	4605      	mov	r5, r0
  405e98:	4608      	mov	r0, r1
  405e9a:	6023      	str	r3, [r4, #0]
  405e9c:	f7fa ff80 	bl	400da0 <_isatty>
  405ea0:	1c43      	adds	r3, r0, #1
  405ea2:	d102      	bne.n	405eaa <_isatty_r+0x1a>
  405ea4:	6823      	ldr	r3, [r4, #0]
  405ea6:	b103      	cbz	r3, 405eaa <_isatty_r+0x1a>
  405ea8:	602b      	str	r3, [r5, #0]
  405eaa:	bd38      	pop	{r3, r4, r5, pc}
  405eac:	204002dc 	.word	0x204002dc

00405eb0 <_lseek_r>:
  405eb0:	b538      	push	{r3, r4, r5, lr}
  405eb2:	4c07      	ldr	r4, [pc, #28]	; (405ed0 <_lseek_r+0x20>)
  405eb4:	4605      	mov	r5, r0
  405eb6:	4608      	mov	r0, r1
  405eb8:	4611      	mov	r1, r2
  405eba:	2200      	movs	r2, #0
  405ebc:	6022      	str	r2, [r4, #0]
  405ebe:	461a      	mov	r2, r3
  405ec0:	f7fa ff70 	bl	400da4 <_lseek>
  405ec4:	1c43      	adds	r3, r0, #1
  405ec6:	d102      	bne.n	405ece <_lseek_r+0x1e>
  405ec8:	6823      	ldr	r3, [r4, #0]
  405eca:	b103      	cbz	r3, 405ece <_lseek_r+0x1e>
  405ecc:	602b      	str	r3, [r5, #0]
  405ece:	bd38      	pop	{r3, r4, r5, pc}
  405ed0:	204002dc 	.word	0x204002dc

00405ed4 <__ascii_mbtowc>:
  405ed4:	b082      	sub	sp, #8
  405ed6:	b901      	cbnz	r1, 405eda <__ascii_mbtowc+0x6>
  405ed8:	a901      	add	r1, sp, #4
  405eda:	b142      	cbz	r2, 405eee <__ascii_mbtowc+0x1a>
  405edc:	b14b      	cbz	r3, 405ef2 <__ascii_mbtowc+0x1e>
  405ede:	7813      	ldrb	r3, [r2, #0]
  405ee0:	600b      	str	r3, [r1, #0]
  405ee2:	7812      	ldrb	r2, [r2, #0]
  405ee4:	1c10      	adds	r0, r2, #0
  405ee6:	bf18      	it	ne
  405ee8:	2001      	movne	r0, #1
  405eea:	b002      	add	sp, #8
  405eec:	4770      	bx	lr
  405eee:	4610      	mov	r0, r2
  405ef0:	e7fb      	b.n	405eea <__ascii_mbtowc+0x16>
  405ef2:	f06f 0001 	mvn.w	r0, #1
  405ef6:	e7f8      	b.n	405eea <__ascii_mbtowc+0x16>

00405ef8 <__malloc_lock>:
  405ef8:	4770      	bx	lr

00405efa <__malloc_unlock>:
  405efa:	4770      	bx	lr

00405efc <_read_r>:
  405efc:	b538      	push	{r3, r4, r5, lr}
  405efe:	4c07      	ldr	r4, [pc, #28]	; (405f1c <_read_r+0x20>)
  405f00:	4605      	mov	r5, r0
  405f02:	4608      	mov	r0, r1
  405f04:	4611      	mov	r1, r2
  405f06:	2200      	movs	r2, #0
  405f08:	6022      	str	r2, [r4, #0]
  405f0a:	461a      	mov	r2, r3
  405f0c:	f7fb fcc2 	bl	401894 <_read>
  405f10:	1c43      	adds	r3, r0, #1
  405f12:	d102      	bne.n	405f1a <_read_r+0x1e>
  405f14:	6823      	ldr	r3, [r4, #0]
  405f16:	b103      	cbz	r3, 405f1a <_read_r+0x1e>
  405f18:	602b      	str	r3, [r5, #0]
  405f1a:	bd38      	pop	{r3, r4, r5, pc}
  405f1c:	204002dc 	.word	0x204002dc

00405f20 <__ascii_wctomb>:
  405f20:	b149      	cbz	r1, 405f36 <__ascii_wctomb+0x16>
  405f22:	2aff      	cmp	r2, #255	; 0xff
  405f24:	bf85      	ittet	hi
  405f26:	238a      	movhi	r3, #138	; 0x8a
  405f28:	6003      	strhi	r3, [r0, #0]
  405f2a:	700a      	strbls	r2, [r1, #0]
  405f2c:	f04f 30ff 	movhi.w	r0, #4294967295
  405f30:	bf98      	it	ls
  405f32:	2001      	movls	r0, #1
  405f34:	4770      	bx	lr
  405f36:	4608      	mov	r0, r1
  405f38:	4770      	bx	lr
	...

00405f3c <__aeabi_dcmpun>:
  405f3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  405f40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  405f44:	d102      	bne.n	405f4c <__aeabi_dcmpun+0x10>
  405f46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  405f4a:	d10a      	bne.n	405f62 <__aeabi_dcmpun+0x26>
  405f4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  405f50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  405f54:	d102      	bne.n	405f5c <__aeabi_dcmpun+0x20>
  405f56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  405f5a:	d102      	bne.n	405f62 <__aeabi_dcmpun+0x26>
  405f5c:	f04f 0000 	mov.w	r0, #0
  405f60:	4770      	bx	lr
  405f62:	f04f 0001 	mov.w	r0, #1
  405f66:	4770      	bx	lr
  405f68:	4441200a 	.word	0x4441200a
  405f6c:	65542043 	.word	0x65542043
  405f70:	7265706d 	.word	0x7265706d
  405f74:	72757461 	.word	0x72757461
  405f78:	65542065 	.word	0x65542065
  405f7c:	6e697473 	.word	0x6e697473
  405f80:	2d2d2067 	.word	0x2d2d2067
  405f84:	2d2d2d2d 	.word	0x2d2d2d2d
  405f88:	2d2d2d2d 	.word	0x2d2d2d2d
  405f8c:	2d2d2d2d 	.word	0x2d2d2d2d
  405f90:	0a2d2d2d 	.word	0x0a2d2d2d
  405f94:	00000000 	.word	0x00000000
  405f98:	20776152 	.word	0x20776152
  405f9c:	61746144 	.word	0x61746144
  405fa0:	00000a20 	.word	0x00000a20
  405fa4:	706d6554 	.word	0x706d6554
  405fa8:	203d2031 	.word	0x203d2031
  405fac:	09206925 	.word	0x09206925
  405fb0:	65542009 	.word	0x65542009
  405fb4:	2032706d 	.word	0x2032706d
  405fb8:	6925203d 	.word	0x6925203d
  405fbc:	20090920 	.word	0x20090920
  405fc0:	706d6554 	.word	0x706d6554
  405fc4:	203d2033 	.word	0x203d2033
  405fc8:	0a206925 	.word	0x0a206925
  405fcc:	00000000 	.word	0x00000000
  405fd0:	706d6554 	.word	0x706d6554
  405fd4:	203d2034 	.word	0x203d2034
  405fd8:	09206925 	.word	0x09206925
  405fdc:	65542009 	.word	0x65542009
  405fe0:	2035706d 	.word	0x2035706d
  405fe4:	6925203d 	.word	0x6925203d
  405fe8:	20090920 	.word	0x20090920
  405fec:	706d6554 	.word	0x706d6554
  405ff0:	203d2036 	.word	0x203d2036
  405ff4:	0a206925 	.word	0x0a206925
  405ff8:	00000000 	.word	0x00000000
  405ffc:	706d6554 	.word	0x706d6554
  406000:	746f4d20 	.word	0x746f4d20
  406004:	3d20726f 	.word	0x3d20726f
  406008:	20692520 	.word	0x20692520
  40600c:	00000a20 	.word	0x00000a20
  406010:	7543200a 	.word	0x7543200a
  406014:	6e657272 	.word	0x6e657272
  406018:	6e612074 	.word	0x6e612074
  40601c:	6f562064 	.word	0x6f562064
  406020:	6761746c 	.word	0x6761746c
  406024:	65542065 	.word	0x65542065
  406028:	6e697473 	.word	0x6e697473
  40602c:	2d2d2067 	.word	0x2d2d2067
  406030:	2d2d2d2d 	.word	0x2d2d2d2d
  406034:	2d2d2d2d 	.word	0x2d2d2d2d
  406038:	2d2d2d2d 	.word	0x2d2d2d2d
  40603c:	0a2d2d2d 	.word	0x0a2d2d2d
  406040:	00000000 	.word	0x00000000
  406044:	72727543 	.word	0x72727543
  406048:	203d2041 	.word	0x203d2041
  40604c:	09206925 	.word	0x09206925
  406050:	75432009 	.word	0x75432009
  406054:	20427272 	.word	0x20427272
  406058:	6925203d 	.word	0x6925203d
  40605c:	20090920 	.word	0x20090920
  406060:	72727543 	.word	0x72727543
  406064:	203d2043 	.word	0x203d2043
  406068:	0a206925 	.word	0x0a206925
  40606c:	00000000 	.word	0x00000000
  406070:	70707553 	.word	0x70707553
  406074:	5620796c 	.word	0x5620796c
  406078:	61746c6f 	.word	0x61746c6f
  40607c:	3d206567 	.word	0x3d206567
  406080:	20692520 	.word	0x20692520
  406084:	00000a20 	.word	0x00000a20
  406088:	682f2e2e 	.word	0x682f2e2e
  40608c:	732f6c61 	.word	0x732f6c61
  406090:	682f6372 	.word	0x682f6372
  406094:	615f6c61 	.word	0x615f6c61
  406098:	735f6364 	.word	0x735f6364
  40609c:	2e636e79 	.word	0x2e636e79
  4060a0:	00000063 	.word	0x00000063
  4060a4:	682f2e2e 	.word	0x682f2e2e
  4060a8:	732f6c61 	.word	0x732f6c61
  4060ac:	682f6372 	.word	0x682f6372
  4060b0:	695f6c61 	.word	0x695f6c61
  4060b4:	00632e6f 	.word	0x00632e6f
  4060b8:	682f2e2e 	.word	0x682f2e2e
  4060bc:	732f6c61 	.word	0x732f6c61
  4060c0:	682f6372 	.word	0x682f6372
  4060c4:	705f6c61 	.word	0x705f6c61
  4060c8:	632e6d77 	.word	0x632e6d77
  4060cc:	00000000 	.word	0x00000000
  4060d0:	682f2e2e 	.word	0x682f2e2e
  4060d4:	732f6c61 	.word	0x732f6c61
  4060d8:	682f6372 	.word	0x682f6372
  4060dc:	755f6c61 	.word	0x755f6c61
  4060e0:	74726173 	.word	0x74726173
  4060e4:	6e79735f 	.word	0x6e79735f
  4060e8:	00632e63 	.word	0x00632e63

004060ec <_afecs>:
  4060ec:	00000000 2f843100 03000000 ffffffff     .....1./........
  4060fc:	0000ffff 00000000 00000000 00000000     ................
  40610c:	0000010c 00000000 00000000 00000000     ................
  40611c:	00000000 00000200 00000200 00000200     ................
  40612c:	00000200 00000200 00000200 00000200     ................
  40613c:	00000200 00000200 00000200 00000200     ................
  40614c:	00000200 00000001 2f843100 03000000     .........1./....
  40615c:	ffffffff 0000ffff 00000000 00000000     ................
  40616c:	00000000 0000010c 00000000 00000000     ................
	...
  406184:	00000200 00000200 00000200 00000200     ................
  406194:	00000200 00000200 00000200 00000200     ................
  4061a4:	00000200 00000200 00000200 00000200     ................
  4061b4:	682f2e2e 612f6c70 2f636566 5f6c7068     ../hpl/afec/hpl_
  4061c4:	63656661 0000632e                       afec.c..

004061cc <_ext_irq>:
  4061cc:	00000000 00000024 00000000 00000000     ....$...........
	...
  4061e8:	00000003 00080000 00000000 00000000     ................
	...

00406204 <_pio_irq_n>:
  406204:	100c0b0a 00000011 682f2e2e 702f6c70     ........../hpl/p
  406214:	682f6f69 705f6c70 655f6f69 632e7478     io/hpl_pio_ext.c
  406224:	00000000                                ....

00406228 <_pwms>:
  406228:	40020000 0000001f 00010019 00000001     ...@............
  406238:	00000001 000000ff 00000000 00000004     ................
	...
  406254:	00000002 004062b0 00000000 20400250     .....b@.....P.@ 
  406264:	4005c000 0000003c 00010019 00000001     ...@<...........
  406274:	00000001 000000ff 00000000 00000004     ................
	...
  406290:	00000001 004062a0 00000000 20400244     .....b@.....D.@ 

004062a0 <_ch_cfg1>:
  4062a0:	00000000 0000010b 000003e8 00000200     ................

004062b0 <_ch_cfg0>:
  4062b0:	00000000 0000010b 000003e8 00000200     ................
  4062c0:	00000002 0000010b 000003e8 00000200     ................
  4062d0:	682f2e2e 702f6c70 682f6d77 705f6c70     ../hpl/pwm/hpl_p
  4062e0:	632e6d77 00000000                       wm.c....

004062e8 <_usarts>:
  4062e8:	00000001 001008c0 000100f4 682f2e2e     ............../h
  4062f8:	752f6c70 74726173 6c70682f 6173755f     pl/usart/hpl_usa
  406308:	632e7472 00000000                       rt.c....

00406310 <npio2_hw>:
  406310:	3ff921fb 400921fb 4012d97c 401921fb     .!.?.!.@|..@.!.@
  406320:	401f6a7a 4022d97c 4025fdbb 402921fb     zj.@|."@..%@.!)@
  406330:	402c463a 402f6a7a 4031475c 4032d97c     :F,@zj/@\G1@|.2@
  406340:	40346b9c 4035fdbb 40378fdb 403921fb     .k4@..5@..7@.!9@
  406350:	403ab41b 403c463a 403dd85a 403f6a7a     ..:@:F<@Z.=@zj?@
  406360:	40407e4c 4041475c 4042106c 4042d97c     L~@@\GA@l.B@|.B@
  406370:	4043a28c 40446b9c 404534ac 4045fdbb     ..C@.kD@.4E@..E@
  406380:	4046c6cb 40478fdb 404858eb 404921fb     ..F@..G@.XH@.!I@

00406390 <two_over_pi>:
  406390:	00a2f983 006e4e44 001529fc 002757d1     ....DNn..)...W'.
  4063a0:	00f534dd 00c0db62 0095993c 00439041     .4..b...<...A.C.
  4063b0:	00fe5163 00abdebb 00c561b7 00246e3a     cQ.......a..:n$.
  4063c0:	00424dd2 00e00649 002eea09 00d1921c     .MB.I...........
  4063d0:	00fe1deb 001cb129 00a73ee8 008235f5     ....)....>...5..
  4063e0:	002ebb44 0084e99c 007026b4 005f7e41     D........&p.A~_.
  4063f0:	003991d6 00398353 0039f49c 00845f8b     ..9.S.9...9.._..
  406400:	00bdf928 003b1ff8 0097ffde 0005980f     (.....;.........
  406410:	00ef2f11 008b5a0a 006d1f6d 00367ecf     ./...Z..m.m..~6.
  406420:	0027cb09 00b74f46 003f669e 005fea2d     ..'.FO...f?.-._.
  406430:	007527ba 00c7ebe5 00f17b3d 000739f7     .'u.....={...9..
  406440:	008a5292 00ea6bfb 005fb11f 008d5d08     .R...k...._..]..
  406450:	00560330 0046fc7b 006babf0 00cfbc20     0.V.{.F...k. ...
  406460:	009af436 001da9e3 0091615e 00e61b08     6.......^a......
  406470:	00659985 005f14a0 0068408d 00ffd880     ..e..._..@h.....
  406480:	004d7327 00310606 001556ca 0073a8c9     'sM...1..V....s.
  406490:	0060e27b 00c08c6b                       {.`.k...

00406498 <PIo2>:
  406498:	40000000 3ff921fb 00000000 3e74442d     ...@.!.?....-Dt>
  4064a8:	80000000 3cf84698 60000000 3b78cc51     .....F.<...`Q.x;
  4064b8:	80000000 39f01b83 40000000 387a2520     .......9...@ %z8
  4064c8:	80000000 36e38222 00000000 3569f31d     ...."..6......i5

004064d8 <init_jk>:
  4064d8:	00000002 00000003 00000004 00000006     ................

004064e8 <_global_impure_ptr>:
  4064e8:	20400004 00464e49 00666e69 004e414e     ..@ INF.inf.NAN.
  4064f8:	006e616e 31300030 35343332 39383736     nan.0.0123456789
  406508:	44434241 30004645 34333231 38373635     ABCDEF.012345678
  406518:	63626139 00666564 69666e49 7974696e     9abcdef.Infinity
  406528:	4e614e00 00000000                       .NaN....

00406530 <__sf_fake_stderr>:
	...

00406550 <__sf_fake_stdin>:
	...

00406570 <__sf_fake_stdout>:
	...

00406590 <__mprec_bigtens>:
  406590:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  4065a0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  4065b0:	7f73bf3c 75154fdd                       <.s..O.u

004065b8 <__mprec_tens>:
  4065b8:	00000000 3ff00000 00000000 40240000     .......?......$@
  4065c8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  4065d8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  4065e8:	00000000 412e8480 00000000 416312d0     .......A......cA
  4065f8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  406608:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  406618:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  406628:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  406638:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  406648:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  406658:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  406668:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  406678:	79d99db4 44ea7843                       ...yCx.D

00406680 <p05.6047>:
  406680:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
  406690:	6c680020 6665004c 47464567 50004300      .hlL.efgEFG.C.P
  4066a0:	5849534f 00002e00                                OSIX...

004066a7 <_ctype_>:
  4066a7:	20202000 20202020 28282020 20282828     .         ((((( 
  4066b7:	20202020 20202020 20202020 20202020                     
  4066c7:	10108820 10101010 10101010 10101010      ...............
  4066d7:	04040410 04040404 10040404 10101010     ................
  4066e7:	41411010 41414141 01010101 01010101     ..AAAAAA........
  4066f7:	01010101 01010101 01010101 10101010     ................
  406707:	42421010 42424242 02020202 02020202     ..BBBBBB........
  406717:	02020202 02020202 02020202 10101010     ................
  406727:	00000020 00000000 00000000 00000000      ...............
	...

004067a8 <_init>:
  4067a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4067aa:	bf00      	nop
  4067ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4067ae:	bc08      	pop	{r3}
  4067b0:	469e      	mov	lr, r3
  4067b2:	4770      	bx	lr

004067b4 <__init_array_start>:
  4067b4:	0040018d 	.word	0x0040018d

004067b8 <_fini>:
  4067b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4067ba:	bf00      	nop
  4067bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4067be:	bc08      	pop	{r3}
  4067c0:	469e      	mov	lr, r3
  4067c2:	4770      	bx	lr

004067c4 <__fini_array_start>:
  4067c4:	00400169 	.word	0x00400169
